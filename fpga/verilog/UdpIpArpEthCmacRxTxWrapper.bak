`timescale 1ps / 1ps


module UdpIpArpEthCmacRxTxWrapper#(
    parameter GT_LANE_WIDTH = 4,
    parameter XDMA_AXIS_TDATA_WIDTH = 512,
    parameter XDMA_AXIS_TKEEP_WIDTH = 64,
    parameter XDMA_AXIS_TUSER_WIDTH = 1
)(
    input udp_clk,
    input udp_reset,

    input gt_ref_clk_p,
    input gt_ref_clk_n,
    input gt_init_clk,
    input gt_sys_reset,

    input  xdma_rx_axis_tready,
    output xdma_rx_axis_tvalid,
    output xdma_rx_axis_tlast,
    output [XDMA_AXIS_TDATA_WIDTH - 1 : 0] xdma_rx_axis_tdata,
    output [XDMA_AXIS_TKEEP_WIDTH - 1 : 0] xdma_rx_axis_tkeep,
    output [XDMA_AXIS_TUSER_WIDTH - 1 : 0] xdma_rx_axis_tuser,

    input  xdma_tx_axis_tvalid,
    output xdma_tx_axis_tready,
    input  xdma_tx_axis_tlast,
    input [XDMA_AXIS_TDATA_WIDTH - 1 : 0] xdma_tx_axis_tdata,
    input [XDMA_AXIS_TKEEP_WIDTH - 1 : 0] xdma_tx_axis_tkeep,
    input [XDMA_AXIS_TUSER_WIDTH - 1 : 0] xdma_tx_axis_tuser,

    // Serdes
    input  [GT_LANE_WIDTH - 1 : 0] gt_rxn_in,
    input  [GT_LANE_WIDTH - 1 : 0] gt_rxp_in,
    output [GT_LANE_WIDTH - 1 : 0] gt_txn_out,
    output [GT_LANE_WIDTH - 1 : 0] gt_txp_out
);
    localparam CMAC_AXIS_TDATA_WIDTH = 512;
    localparam CMAC_AXIS_TKEEP_WIDTH = 64;
    localparam CMAC_AXIS_TUSER_WIDTH = 1;

    wire cmac_clk;
    wire cmac_rx_reset;
    wire cmac_tx_reset;

    wire udp_tx_axis_tready;
    wire udp_tx_axis_tvalid;
    wire udp_tx_axis_tlast;
    wire [CMAC_AXIS_TDATA_WIDTH - 1 : 0] udp_tx_axis_tdata;
    wire [CMAC_AXIS_TKEEP_WIDTH - 1 : 0] udp_tx_axis_tkeep;
    wire [CMAC_AXIS_TUSER_WIDTH - 1 : 0] udp_tx_axis_tuser;
    
    wire udp_rx_axis_tready;
    wire udp_rx_axis_tvalid;
    wire udp_rx_axis_tlast;
    wire [CMAC_AXIS_TDATA_WIDTH - 1 : 0] udp_rx_axis_tdata;
    wire [CMAC_AXIS_TKEEP_WIDTH - 1 : 0] udp_rx_axis_tkeep;
    wire [CMAC_AXIS_TUSER_WIDTH - 1 : 0] udp_rx_axis_tuser;

    wire cmac_tx_axis_tready;
    wire cmac_tx_axis_tvalid;
    wire cmac_tx_axis_tlast;
    wire [CMAC_AXIS_TDATA_WIDTH - 1 : 0] cmac_tx_axis_tdata;
    wire [CMAC_AXIS_TKEEP_WIDTH - 1 : 0] cmac_tx_axis_tkeep;
    wire [CMAC_AXIS_TUSER_WIDTH - 1 : 0] cmac_tx_axis_tuser;
    
    wire cmac_rx_axis_tready;
    wire cmac_rx_axis_tvalid;
    wire cmac_rx_axis_tlast;
    wire [CMAC_AXIS_TDATA_WIDTH - 1 : 0] cmac_rx_axis_tdata;
    wire [CMAC_AXIS_TKEEP_WIDTH - 1 : 0] cmac_rx_axis_tkeep;
    wire [CMAC_AXIS_TUSER_WIDTH - 1 : 0] cmac_rx_axis_tuser;

    mkXdmaUdpIpArpEthRxTx udp_inst (
		.udp_clk      (udp_clk),
		.udp_reset    (udp_reset),

		.cmac_tx_axis_tvalid(udp_tx_axis_tvalid),
		.cmac_tx_axis_tdata (udp_tx_axis_tdata ),
		.cmac_tx_axis_tkeep (udp_tx_axis_tkeep ),
		.cmac_tx_axis_tlast (udp_tx_axis_tlast ),
	    .cmac_tx_axis_tuser (udp_tx_axis_tuser ),
		.cmac_tx_axis_tready(udp_tx_axis_tready),

		.cmac_rx_axis_tvalid (udp_rx_axis_tvalid),
		.cmac_rx_axis_tdata  (udp_rx_axis_tdata ),
		.cmac_rx_axis_tkeep  (udp_rx_axis_tkeep ),
		.cmac_rx_axis_tlast  (udp_rx_axis_tlast ),
	    .cmac_rx_axis_tuser  (udp_rx_axis_tuser ),
		.cmac_rx_axis_tready (udp_rx_axis_tready),

	    .xdma_rx_axis_tvalid(xdma_rx_axis_tvalid),
		.xdma_rx_axis_tdata (xdma_rx_axis_tdata ),
		.xdma_rx_axis_tkeep (xdma_rx_axis_tkeep ),
		.xdma_rx_axis_tlast (xdma_rx_axis_tlast ),
		.xdma_rx_axis_tuser (xdma_rx_axis_tuser ),
		.xdma_rx_axis_tready(xdma_rx_axis_tready),

		.xdma_tx_axis_tvalid(xdma_tx_axis_tvalid),
		.xdma_tx_axis_tdata (xdma_tx_axis_tdata ),
		.xdma_tx_axis_tkeep (xdma_tx_axis_tkeep ),
		.xdma_tx_axis_tlast (xdma_tx_axis_tlast ),
		.xdma_tx_axis_tuser (xdma_tx_axis_tuser ),
		.xdma_tx_axis_tready(xdma_tx_axis_tready)
    );

    
    wire cmac_tx_reset_sync, tx_fifo_rstn;
    assign tx_fifo_rstn = ~(udp_reset | cmac_tx_reset_sync);
    xpm_cdc_sync_rst #(
        .DEST_SYNC_FF(4),   // DECIMAL; range: 2-10
        .INIT(1),           // DECIMAL; 0=initialize synchronization registers to 0, 1=initialize synchronization
                            // registers to 1
        .INIT_SYNC_FF(0),   // DECIMAL; 0=disable simulation init values, 1=enable simulation init values
        .SIM_ASSERT_CHK(0)  // DECIMAL; 0=disable simulation messages, 1=enable simulation messages
    ) xpm_cdc_sync_rst_tx_inst (
        .dest_rst(cmac_tx_reset_sync),
        .dest_clk(udp_clk),
        .src_rst (cmac_tx_reset)
    );
    axis_data_fifo_0 tx_axis_async_fifo (
        .s_axis_aresetn(tx_fifo_rstn       ),   // input wire s_axis_aresetn
        .s_axis_aclk   (udp_clk            ),   // input wire s_axis_aclk
        .s_axis_tvalid (udp_tx_axis_tvalid ),   // input wire s_axis_tvalid
        .s_axis_tready (udp_tx_axis_tready ),   // output wire s_axis_tready
        .s_axis_tdata  (udp_tx_axis_tdata  ),   // input wire [511 : 0] s_axis_tdata
        .s_axis_tkeep  (udp_tx_axis_tkeep  ),   // input wire [63 : 0] s_axis_tkeep
        .s_axis_tlast  (udp_tx_axis_tlast  ),   // input wire s_axis_tlast
        .s_axis_tuser  (udp_tx_axis_tuser  ),   // input wire [0 : 0] s_axis_tuser
        
        .m_axis_aclk   (cmac_clk            ),  // input wire m_axis_aclk
        .m_axis_tvalid (cmac_tx_axis_tvalid ),  // output wire m_axis_tvalid
        .m_axis_tready (cmac_tx_axis_tready ),  // input wire m_axis_tready
        .m_axis_tdata  (cmac_tx_axis_tdata  ),  // output wire [511 : 0] m_axis_tdata
        .m_axis_tkeep  (cmac_tx_axis_tkeep  ),  // output wire [63 : 0] m_axis_tkeep
        .m_axis_tlast  (cmac_tx_axis_tlast  ),  // output wire m_axis_tlast
        .m_axis_tuser  (cmac_tx_axis_tuser  )   // output wire [0 : 0] m_axis_tuser
    );

    wire udp_reset_sync, rx_fifo_rstn;
    assign rx_fifo_rstn = ~(udp_reset_sync | cmac_rx_reset);
    xpm_cdc_sync_rst #(
        .DEST_SYNC_FF(4),   // DECIMAL; range: 2-10
        .INIT(1),           // DECIMAL; 0=initialize synchronization registers to 0, 1=initialize synchronization
                            // registers to 1
        .INIT_SYNC_FF(0),   // DECIMAL; 0=disable simulation init values, 1=enable simulation init values
        .SIM_ASSERT_CHK(0)  // DECIMAL; 0=disable simulation messages, 1=enable simulation messages
    ) xpm_cdc_sync_rst_rx_inst (
        .dest_rst(udp_reset_sync),
        .dest_clk(      cmac_clk),
        .src_rst (     udp_reset)
    );

    axis_data_fifo_0 rx_axis_async_fifo (
        .s_axis_aresetn(rx_fifo_rstn        ),   // input wire s_axis_aresetn
        .s_axis_aclk   (cmac_clk            ),   // input wire s_axis_aclk
        .s_axis_tvalid (cmac_rx_axis_tvalid ),   // input wire s_axis_tvalid
        .s_axis_tready (cmac_rx_axis_tready ),   // output wire s_axis_tready
        .s_axis_tdata  (cmac_rx_axis_tdata  ),   // input wire [511 : 0] s_axis_tdata
        .s_axis_tkeep  (cmac_rx_axis_tkeep  ),   // input wire [63 : 0] s_axis_tkeep
        .s_axis_tlast  (cmac_rx_axis_tlast  ),   // input wire s_axis_tlast
        .s_axis_tuser  (cmac_rx_axis_tuser  ),   // input wire [0 : 0] s_axis_tuser
        
        .m_axis_aclk   (udp_clk             ),  // input wire m_axis_aclk
        .m_axis_tvalid (udp_rx_axis_tvalid  ),  // output wire m_axis_tvalid
        .m_axis_tready (udp_rx_axis_tready  ),  // input wire m_axis_tready
        .m_axis_tdata  (udp_rx_axis_tdata   ),  // output wire [511 : 0] m_axis_tdata
        .m_axis_tkeep  (udp_rx_axis_tkeep   ),  // output wire [63 : 0] m_axis_tkeep
        .m_axis_tlast  (udp_rx_axis_tlast   ),  // output wire m_axis_tlast
        .m_axis_tuser  (udp_rx_axis_tuser   )   // output wire [0 : 0] m_axis_tuser
    );

    XilinxCmacWrapper#(
        GT_LANE_WIDTH,
        CMAC_AXIS_TDATA_WIDTH,
        CMAC_AXIS_TKEEP_WIDTH,
        CMAC_AXIS_TUSER_WIDTH
    ) xilinxCmacWrapper (
        .gt_ref_clk_p(gt_ref_clk_p),
        .gt_ref_clk_n(gt_ref_clk_n),
        .gt_init_clk (gt_init_clk ),
        .gt_sys_reset(gt_sys_reset),

        .cmac_clk     (cmac_clk     ),
        .cmac_rx_reset(cmac_rx_reset),
        .cmac_tx_reset(cmac_tx_reset),

        .tx_axis_tvalid(cmac_tx_axis_tvalid),
        .tx_axis_tready(cmac_tx_axis_tready),
        .tx_axis_tlast (cmac_tx_axis_tlast ),
        .tx_axis_tdata (cmac_tx_axis_tdata ),
        .tx_axis_tkeep (cmac_tx_axis_tkeep ),
        .tx_axis_tuser (cmac_tx_axis_tuser ),

        .tx_flowctrl_valid(1'b0),
        .tx_flowctrl_ready(),
        .tx_flowctrl_data (0),

        .rx_axis_tvalid(cmac_rx_axis_tvalid),
        .rx_axis_tready(cmac_rx_axis_tready),
        .rx_axis_tlast (cmac_rx_axis_tlast ),
        .rx_axis_tdata (cmac_rx_axis_tdata ),
        .rx_axis_tkeep (cmac_rx_axis_tkeep ),
        .rx_axis_tuser (cmac_rx_axis_tuser ),

        .rx_flowctrl_valid(),
        .rx_flowctrl_ready(1'b0),
        .rx_flowctrl_data (),

        .gt_rxn_in (gt_rxn_in ),
        .gt_rxp_in (gt_rxp_in ),
        .gt_txn_out(gt_txn_out),
        .gt_txp_out(gt_txp_out)
    );

endmodule