
//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// On Sat Jun  3 20:43:14 CST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_udpConfig_put              O     1 const
// RDY_axiStreamIn_put            O     1
// macMetaDataOut_first           O    64 reg
// RDY_macMetaDataOut_first       O     1 reg
// RDY_macMetaDataOut_deq         O     1 reg
// macMetaDataOut_notEmpty        O     1 reg
// RDY_macMetaDataOut_notEmpty    O     1 const
// udpIpMetaDataOut_first         O    80 reg
// RDY_udpIpMetaDataOut_first     O     1 reg
// RDY_udpIpMetaDataOut_deq       O     1 reg
// udpIpMetaDataOut_notEmpty      O     1 reg
// RDY_udpIpMetaDataOut_notEmpty  O     1 const
// dataStreamOut_first            O   290 reg
// RDY_dataStreamOut_first        O     1 reg
// RDY_dataStreamOut_deq          O     1 reg
// dataStreamOut_notEmpty         O     1 reg
// RDY_dataStreamOut_notEmpty     O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// udpConfig_put                  I   144 reg
// axiStreamIn_put                I   578 reg
// EN_udpConfig_put               I     1
// EN_axiStreamIn_put             I     1
// EN_macMetaDataOut_deq          I     1
// EN_udpIpMetaDataOut_deq        I     1
// EN_dataStreamOut_deq           I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkUdpEthRx(CLK,
		  RST_N,

		  udpConfig_put,
		  EN_udpConfig_put,
		  RDY_udpConfig_put,

		  axiStreamIn_put,
		  EN_axiStreamIn_put,
		  RDY_axiStreamIn_put,

		  macMetaDataOut_first,
		  RDY_macMetaDataOut_first,

		  EN_macMetaDataOut_deq,
		  RDY_macMetaDataOut_deq,

		  macMetaDataOut_notEmpty,
		  RDY_macMetaDataOut_notEmpty,

		  udpIpMetaDataOut_first,
		  RDY_udpIpMetaDataOut_first,

		  EN_udpIpMetaDataOut_deq,
		  RDY_udpIpMetaDataOut_deq,

		  udpIpMetaDataOut_notEmpty,
		  RDY_udpIpMetaDataOut_notEmpty,

		  dataStreamOut_first,
		  RDY_dataStreamOut_first,

		  EN_dataStreamOut_deq,
		  RDY_dataStreamOut_deq,

		  dataStreamOut_notEmpty,
		  RDY_dataStreamOut_notEmpty);
  input  CLK;
  input  RST_N;

  // action method udpConfig_put
  input  [143 : 0] udpConfig_put;
  input  EN_udpConfig_put;
  output RDY_udpConfig_put;

  // action method axiStreamIn_put
  input  [577 : 0] axiStreamIn_put;
  input  EN_axiStreamIn_put;
  output RDY_axiStreamIn_put;

  // value method macMetaDataOut_first
  output [63 : 0] macMetaDataOut_first;
  output RDY_macMetaDataOut_first;

  // action method macMetaDataOut_deq
  input  EN_macMetaDataOut_deq;
  output RDY_macMetaDataOut_deq;

  // value method macMetaDataOut_notEmpty
  output macMetaDataOut_notEmpty;
  output RDY_macMetaDataOut_notEmpty;

  // value method udpIpMetaDataOut_first
  output [79 : 0] udpIpMetaDataOut_first;
  output RDY_udpIpMetaDataOut_first;

  // action method udpIpMetaDataOut_deq
  input  EN_udpIpMetaDataOut_deq;
  output RDY_udpIpMetaDataOut_deq;

  // value method udpIpMetaDataOut_notEmpty
  output udpIpMetaDataOut_notEmpty;
  output RDY_udpIpMetaDataOut_notEmpty;

  // value method dataStreamOut_first
  output [289 : 0] dataStreamOut_first;
  output RDY_dataStreamOut_first;

  // action method dataStreamOut_deq
  input  EN_dataStreamOut_deq;
  output RDY_dataStreamOut_deq;

  // value method dataStreamOut_notEmpty
  output dataStreamOut_notEmpty;
  output RDY_dataStreamOut_notEmpty;

  // signals for module outputs
  wire [289 : 0] dataStreamOut_first;
  wire [79 : 0] udpIpMetaDataOut_first;
  wire [63 : 0] macMetaDataOut_first;
  wire RDY_axiStreamIn_put,
       RDY_dataStreamOut_deq,
       RDY_dataStreamOut_first,
       RDY_dataStreamOut_notEmpty,
       RDY_macMetaDataOut_deq,
       RDY_macMetaDataOut_first,
       RDY_macMetaDataOut_notEmpty,
       RDY_udpConfig_put,
       RDY_udpIpMetaDataOut_deq,
       RDY_udpIpMetaDataOut_first,
       RDY_udpIpMetaDataOut_notEmpty,
       dataStreamOut_notEmpty,
       macMetaDataOut_notEmpty,
       udpIpMetaDataOut_notEmpty;

  // register macMetaAndUdpIpStream_extState
  reg [1 : 0] macMetaAndUdpIpStream_extState;
  wire [1 : 0] macMetaAndUdpIpStream_extState_D_IN;
  wire macMetaAndUdpIpStream_extState_EN;

  // register macMetaAndUdpIpStream_macExtractor_extractState
  reg [1 : 0] macMetaAndUdpIpStream_macExtractor_extractState;
  reg [1 : 0] macMetaAndUdpIpStream_macExtractor_extractState_D_IN;
  wire macMetaAndUdpIpStream_macExtractor_extractState_EN;

  // register macMetaAndUdpIpStream_macExtractor_isFirstReg
  reg macMetaAndUdpIpStream_macExtractor_isFirstReg;
  wire macMetaAndUdpIpStream_macExtractor_isFirstReg_D_IN,
       macMetaAndUdpIpStream_macExtractor_isFirstReg_EN;

  // register macMetaAndUdpIpStream_macExtractor_residueBuf
  reg [143 : 0] macMetaAndUdpIpStream_macExtractor_residueBuf;
  wire [143 : 0] macMetaAndUdpIpStream_macExtractor_residueBuf_D_IN;
  wire macMetaAndUdpIpStream_macExtractor_residueBuf_EN;

  // register macMetaAndUdpIpStream_macExtractor_residueByteEnBuf
  reg [17 : 0] macMetaAndUdpIpStream_macExtractor_residueByteEnBuf;
  wire [17 : 0] macMetaAndUdpIpStream_macExtractor_residueByteEnBuf_D_IN;
  wire macMetaAndUdpIpStream_macExtractor_residueByteEnBuf_EN;

  // register macStream_extraDataStreamBuf
  reg [290 : 0] macStream_extraDataStreamBuf;
  wire [290 : 0] macStream_extraDataStreamBuf_D_IN;
  wire macStream_extraDataStreamBuf_EN;

  // register macStream_isFirstReg
  reg macStream_isFirstReg;
  wire macStream_isFirstReg_D_IN, macStream_isFirstReg_EN;

  // register udpConfigReg
  reg [144 : 0] udpConfigReg;
  wire [144 : 0] udpConfigReg_D_IN;
  wire udpConfigReg_EN;

  // register udpIpMetaAndDataStream_extState
  reg [1 : 0] udpIpMetaAndDataStream_extState;
  wire [1 : 0] udpIpMetaAndDataStream_extState_D_IN;
  wire udpIpMetaAndDataStream_extState_EN;

  // register udpIpMetaAndDataStream_udpIpExtractor_extractState
  reg [1 : 0] udpIpMetaAndDataStream_udpIpExtractor_extractState;
  reg [1 : 0] udpIpMetaAndDataStream_udpIpExtractor_extractState_D_IN;
  wire udpIpMetaAndDataStream_udpIpExtractor_extractState_EN;

  // register udpIpMetaAndDataStream_udpIpExtractor_isFirstReg
  reg udpIpMetaAndDataStream_udpIpExtractor_isFirstReg;
  wire udpIpMetaAndDataStream_udpIpExtractor_isFirstReg_D_IN,
       udpIpMetaAndDataStream_udpIpExtractor_isFirstReg_EN;

  // register udpIpMetaAndDataStream_udpIpExtractor_residueBuf
  reg [31 : 0] udpIpMetaAndDataStream_udpIpExtractor_residueBuf;
  wire [31 : 0] udpIpMetaAndDataStream_udpIpExtractor_residueBuf_D_IN;
  wire udpIpMetaAndDataStream_udpIpExtractor_residueBuf_EN;

  // register udpIpMetaAndDataStream_udpIpExtractor_residueByteEnBuf
  reg [3 : 0] udpIpMetaAndDataStream_udpIpExtractor_residueByteEnBuf;
  wire [3 : 0] udpIpMetaAndDataStream_udpIpExtractor_residueByteEnBuf_D_IN;
  wire udpIpMetaAndDataStream_udpIpExtractor_residueByteEnBuf_EN;

  // ports of submodule axiStreamInBuf
  wire [577 : 0] axiStreamInBuf_D_IN, axiStreamInBuf_D_OUT;
  wire axiStreamInBuf_CLR,
       axiStreamInBuf_DEQ,
       axiStreamInBuf_EMPTY_N,
       axiStreamInBuf_ENQ,
       axiStreamInBuf_FULL_N;

  // ports of submodule macMetaAndUdpIpStream_dataStreamOutBuf
  wire [289 : 0] macMetaAndUdpIpStream_dataStreamOutBuf_D_IN,
		 macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT;
  wire macMetaAndUdpIpStream_dataStreamOutBuf_CLR,
       macMetaAndUdpIpStream_dataStreamOutBuf_DEQ,
       macMetaAndUdpIpStream_dataStreamOutBuf_EMPTY_N,
       macMetaAndUdpIpStream_dataStreamOutBuf_ENQ,
       macMetaAndUdpIpStream_dataStreamOutBuf_FULL_N;

  // ports of submodule macMetaAndUdpIpStream_macExtractor_dataStreamBuf
  wire [289 : 0] macMetaAndUdpIpStream_macExtractor_dataStreamBuf_D_IN,
		 macMetaAndUdpIpStream_macExtractor_dataStreamBuf_D_OUT;
  wire macMetaAndUdpIpStream_macExtractor_dataStreamBuf_CLR,
       macMetaAndUdpIpStream_macExtractor_dataStreamBuf_DEQ,
       macMetaAndUdpIpStream_macExtractor_dataStreamBuf_EMPTY_N,
       macMetaAndUdpIpStream_macExtractor_dataStreamBuf_ENQ,
       macMetaAndUdpIpStream_macExtractor_dataStreamBuf_FULL_N;

  // ports of submodule macMetaAndUdpIpStream_macExtractor_extractDataBuf
  wire [111 : 0] macMetaAndUdpIpStream_macExtractor_extractDataBuf_D_IN,
		 macMetaAndUdpIpStream_macExtractor_extractDataBuf_D_OUT;
  wire macMetaAndUdpIpStream_macExtractor_extractDataBuf_CLR,
       macMetaAndUdpIpStream_macExtractor_extractDataBuf_DEQ,
       macMetaAndUdpIpStream_macExtractor_extractDataBuf_EMPTY_N,
       macMetaAndUdpIpStream_macExtractor_extractDataBuf_ENQ,
       macMetaAndUdpIpStream_macExtractor_extractDataBuf_FULL_N;

  // ports of submodule macMetaAndUdpIpStream_macMetaDataOutBuf
  wire [63 : 0] macMetaAndUdpIpStream_macMetaDataOutBuf_D_IN,
		macMetaAndUdpIpStream_macMetaDataOutBuf_D_OUT;
  wire macMetaAndUdpIpStream_macMetaDataOutBuf_CLR,
       macMetaAndUdpIpStream_macMetaDataOutBuf_DEQ,
       macMetaAndUdpIpStream_macMetaDataOutBuf_EMPTY_N,
       macMetaAndUdpIpStream_macMetaDataOutBuf_ENQ,
       macMetaAndUdpIpStream_macMetaDataOutBuf_FULL_N;

  // ports of submodule macStream_dataStreamOutBuf
  wire [289 : 0] macStream_dataStreamOutBuf_D_IN,
		 macStream_dataStreamOutBuf_D_OUT;
  wire macStream_dataStreamOutBuf_CLR,
       macStream_dataStreamOutBuf_DEQ,
       macStream_dataStreamOutBuf_EMPTY_N,
       macStream_dataStreamOutBuf_ENQ,
       macStream_dataStreamOutBuf_FULL_N;

  // ports of submodule udpIpMetaAndDataStream_dataStreamOutBuf
  wire [289 : 0] udpIpMetaAndDataStream_dataStreamOutBuf_D_IN,
		 udpIpMetaAndDataStream_dataStreamOutBuf_D_OUT;
  wire udpIpMetaAndDataStream_dataStreamOutBuf_CLR,
       udpIpMetaAndDataStream_dataStreamOutBuf_DEQ,
       udpIpMetaAndDataStream_dataStreamOutBuf_EMPTY_N,
       udpIpMetaAndDataStream_dataStreamOutBuf_ENQ,
       udpIpMetaAndDataStream_dataStreamOutBuf_FULL_N;

  // ports of submodule udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf
  wire [289 : 0] udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_D_IN,
		 udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_D_OUT;
  wire udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_CLR,
       udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_DEQ,
       udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_EMPTY_N,
       udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_ENQ,
       udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_FULL_N;

  // ports of submodule udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf
  wire [223 : 0] udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_IN,
		 udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT;
  wire udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_CLR,
       udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_DEQ,
       udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_EMPTY_N,
       udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_ENQ,
       udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_FULL_N;

  // ports of submodule udpIpMetaAndDataStream_udpIpMetaDataOutBuf
  wire [79 : 0] udpIpMetaAndDataStream_udpIpMetaDataOutBuf_D_IN,
		udpIpMetaAndDataStream_udpIpMetaDataOutBuf_D_OUT;
  wire udpIpMetaAndDataStream_udpIpMetaDataOutBuf_CLR,
       udpIpMetaAndDataStream_udpIpMetaDataOutBuf_DEQ,
       udpIpMetaAndDataStream_udpIpMetaDataOutBuf_EMPTY_N,
       udpIpMetaAndDataStream_udpIpMetaDataOutBuf_ENQ,
       udpIpMetaAndDataStream_udpIpMetaDataOutBuf_FULL_N;

  // rule scheduling signals
  reg WILL_FIRE_RL_macMetaAndUdpIpStream_macExtractor_doExtraction,
      WILL_FIRE_RL_udpIpMetaAndDataStream_udpIpExtractor_doExtraction;
  wire WILL_FIRE_RL_macMetaAndUdpIpStream_doCheck,
       WILL_FIRE_RL_macMetaAndUdpIpStream_doPass,
       WILL_FIRE_RL_macMetaAndUdpIpStream_doThrow,
       WILL_FIRE_RL_macStream_doStreamReduction,
       WILL_FIRE_RL_udpIpMetaAndDataStream_doCheck,
       WILL_FIRE_RL_udpIpMetaAndDataStream_doPass,
       WILL_FIRE_RL_udpIpMetaAndDataStream_doThrow;

  // inputs to muxes for submodule ports
  wire [1 : 0] MUX_macMetaAndUdpIpStream_extState_write_1__VAL_2,
	       MUX_udpIpMetaAndDataStream_extState_write_1__VAL_2;
  wire MUX_macMetaAndUdpIpStream_extState_write_1__PSEL_1,
       MUX_macMetaAndUdpIpStream_extState_write_1__SEL_1,
       MUX_udpIpMetaAndDataStream_extState_write_1__PSEL_1,
       MUX_udpIpMetaAndDataStream_extState_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h1328;
  reg [63 : 0] v__h5227;
  // synopsys translate_on

  // remaining internal signals
  wire [47 : 0] x__h1475, x__h3627;
  wire [31 : 0] x__h9677, x__h9681;
  wire [19 : 0] _theResult____h10206;
  wire [15 : 0] ipChecksum__h10199,
		temp__h10203,
		x__h11001,
		x__h9649,
		x__h9653,
		x__h9671,
		x_ethType__h1481;
  wire [12 : 0] x_ipHeader_ipOffset__h9628;
  wire macMetaAndUdpIpStream_macExtractor_extractData_ETC___d108,
       macMetaAndUdpIpStream_macExtractor_extractData_ETC___d114,
       udpIpMetaAndDataStream_udpIpExtractor_extractD_ETC___d269;

  // action method udpConfig_put
  assign RDY_udpConfig_put = 1'd1 ;

  // action method axiStreamIn_put
  assign RDY_axiStreamIn_put = udpConfigReg[144] && axiStreamInBuf_FULL_N ;

  // value method macMetaDataOut_first
  assign macMetaDataOut_first =
	     macMetaAndUdpIpStream_macMetaDataOutBuf_D_OUT ;
  assign RDY_macMetaDataOut_first =
	     macMetaAndUdpIpStream_macMetaDataOutBuf_EMPTY_N ;

  // action method macMetaDataOut_deq
  assign RDY_macMetaDataOut_deq =
	     macMetaAndUdpIpStream_macMetaDataOutBuf_EMPTY_N ;

  // value method macMetaDataOut_notEmpty
  assign macMetaDataOut_notEmpty =
	     macMetaAndUdpIpStream_macMetaDataOutBuf_EMPTY_N ;
  assign RDY_macMetaDataOut_notEmpty = 1'd1 ;

  // value method udpIpMetaDataOut_first
  assign udpIpMetaDataOut_first =
	     udpIpMetaAndDataStream_udpIpMetaDataOutBuf_D_OUT ;
  assign RDY_udpIpMetaDataOut_first =
	     udpIpMetaAndDataStream_udpIpMetaDataOutBuf_EMPTY_N ;

  // action method udpIpMetaDataOut_deq
  assign RDY_udpIpMetaDataOut_deq =
	     udpIpMetaAndDataStream_udpIpMetaDataOutBuf_EMPTY_N ;

  // value method udpIpMetaDataOut_notEmpty
  assign udpIpMetaDataOut_notEmpty =
	     udpIpMetaAndDataStream_udpIpMetaDataOutBuf_EMPTY_N ;
  assign RDY_udpIpMetaDataOut_notEmpty = 1'd1 ;

  // value method dataStreamOut_first
  assign dataStreamOut_first = udpIpMetaAndDataStream_dataStreamOutBuf_D_OUT ;
  assign RDY_dataStreamOut_first =
	     udpIpMetaAndDataStream_dataStreamOutBuf_EMPTY_N ;

  // action method dataStreamOut_deq
  assign RDY_dataStreamOut_deq =
	     udpIpMetaAndDataStream_dataStreamOutBuf_EMPTY_N ;

  // value method dataStreamOut_notEmpty
  assign dataStreamOut_notEmpty =
	     udpIpMetaAndDataStream_dataStreamOutBuf_EMPTY_N ;
  assign RDY_dataStreamOut_notEmpty = 1'd1 ;

  // submodule axiStreamInBuf
  FIFO2 #(.width(32'd578), .guarded(1'd1)) axiStreamInBuf(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(axiStreamInBuf_D_IN),
							  .ENQ(axiStreamInBuf_ENQ),
							  .DEQ(axiStreamInBuf_DEQ),
							  .CLR(axiStreamInBuf_CLR),
							  .D_OUT(axiStreamInBuf_D_OUT),
							  .FULL_N(axiStreamInBuf_FULL_N),
							  .EMPTY_N(axiStreamInBuf_EMPTY_N));

  // submodule macMetaAndUdpIpStream_dataStreamOutBuf
  FIFO2 #(.width(32'd290),
	  .guarded(1'd1)) macMetaAndUdpIpStream_dataStreamOutBuf(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(macMetaAndUdpIpStream_dataStreamOutBuf_D_IN),
								 .ENQ(macMetaAndUdpIpStream_dataStreamOutBuf_ENQ),
								 .DEQ(macMetaAndUdpIpStream_dataStreamOutBuf_DEQ),
								 .CLR(macMetaAndUdpIpStream_dataStreamOutBuf_CLR),
								 .D_OUT(macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT),
								 .FULL_N(macMetaAndUdpIpStream_dataStreamOutBuf_FULL_N),
								 .EMPTY_N(macMetaAndUdpIpStream_dataStreamOutBuf_EMPTY_N));

  // submodule macMetaAndUdpIpStream_macExtractor_dataStreamBuf
  FIFO2 #(.width(32'd290),
	  .guarded(1'd1)) macMetaAndUdpIpStream_macExtractor_dataStreamBuf(.RST(RST_N),
									   .CLK(CLK),
									   .D_IN(macMetaAndUdpIpStream_macExtractor_dataStreamBuf_D_IN),
									   .ENQ(macMetaAndUdpIpStream_macExtractor_dataStreamBuf_ENQ),
									   .DEQ(macMetaAndUdpIpStream_macExtractor_dataStreamBuf_DEQ),
									   .CLR(macMetaAndUdpIpStream_macExtractor_dataStreamBuf_CLR),
									   .D_OUT(macMetaAndUdpIpStream_macExtractor_dataStreamBuf_D_OUT),
									   .FULL_N(macMetaAndUdpIpStream_macExtractor_dataStreamBuf_FULL_N),
									   .EMPTY_N(macMetaAndUdpIpStream_macExtractor_dataStreamBuf_EMPTY_N));

  // submodule macMetaAndUdpIpStream_macExtractor_extractDataBuf
  FIFO2 #(.width(32'd112),
	  .guarded(1'd1)) macMetaAndUdpIpStream_macExtractor_extractDataBuf(.RST(RST_N),
									    .CLK(CLK),
									    .D_IN(macMetaAndUdpIpStream_macExtractor_extractDataBuf_D_IN),
									    .ENQ(macMetaAndUdpIpStream_macExtractor_extractDataBuf_ENQ),
									    .DEQ(macMetaAndUdpIpStream_macExtractor_extractDataBuf_DEQ),
									    .CLR(macMetaAndUdpIpStream_macExtractor_extractDataBuf_CLR),
									    .D_OUT(macMetaAndUdpIpStream_macExtractor_extractDataBuf_D_OUT),
									    .FULL_N(macMetaAndUdpIpStream_macExtractor_extractDataBuf_FULL_N),
									    .EMPTY_N(macMetaAndUdpIpStream_macExtractor_extractDataBuf_EMPTY_N));

  // submodule macMetaAndUdpIpStream_macMetaDataOutBuf
  FIFO2 #(.width(32'd64),
	  .guarded(1'd1)) macMetaAndUdpIpStream_macMetaDataOutBuf(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(macMetaAndUdpIpStream_macMetaDataOutBuf_D_IN),
								  .ENQ(macMetaAndUdpIpStream_macMetaDataOutBuf_ENQ),
								  .DEQ(macMetaAndUdpIpStream_macMetaDataOutBuf_DEQ),
								  .CLR(macMetaAndUdpIpStream_macMetaDataOutBuf_CLR),
								  .D_OUT(macMetaAndUdpIpStream_macMetaDataOutBuf_D_OUT),
								  .FULL_N(macMetaAndUdpIpStream_macMetaDataOutBuf_FULL_N),
								  .EMPTY_N(macMetaAndUdpIpStream_macMetaDataOutBuf_EMPTY_N));

  // submodule macStream_dataStreamOutBuf
  FIFO2 #(.width(32'd290),
	  .guarded(1'd1)) macStream_dataStreamOutBuf(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(macStream_dataStreamOutBuf_D_IN),
						     .ENQ(macStream_dataStreamOutBuf_ENQ),
						     .DEQ(macStream_dataStreamOutBuf_DEQ),
						     .CLR(macStream_dataStreamOutBuf_CLR),
						     .D_OUT(macStream_dataStreamOutBuf_D_OUT),
						     .FULL_N(macStream_dataStreamOutBuf_FULL_N),
						     .EMPTY_N(macStream_dataStreamOutBuf_EMPTY_N));

  // submodule udpIpMetaAndDataStream_dataStreamOutBuf
  FIFO2 #(.width(32'd290),
	  .guarded(1'd1)) udpIpMetaAndDataStream_dataStreamOutBuf(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(udpIpMetaAndDataStream_dataStreamOutBuf_D_IN),
								  .ENQ(udpIpMetaAndDataStream_dataStreamOutBuf_ENQ),
								  .DEQ(udpIpMetaAndDataStream_dataStreamOutBuf_DEQ),
								  .CLR(udpIpMetaAndDataStream_dataStreamOutBuf_CLR),
								  .D_OUT(udpIpMetaAndDataStream_dataStreamOutBuf_D_OUT),
								  .FULL_N(udpIpMetaAndDataStream_dataStreamOutBuf_FULL_N),
								  .EMPTY_N(udpIpMetaAndDataStream_dataStreamOutBuf_EMPTY_N));

  // submodule udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf
  FIFO2 #(.width(32'd290),
	  .guarded(1'd1)) udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf(.RST(RST_N),
									      .CLK(CLK),
									      .D_IN(udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_D_IN),
									      .ENQ(udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_ENQ),
									      .DEQ(udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_DEQ),
									      .CLR(udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_CLR),
									      .D_OUT(udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_D_OUT),
									      .FULL_N(udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_FULL_N),
									      .EMPTY_N(udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_EMPTY_N));

  // submodule udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf
  FIFO2 #(.width(32'd224),
	  .guarded(1'd1)) udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf(.RST(RST_N),
									       .CLK(CLK),
									       .D_IN(udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_IN),
									       .ENQ(udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_ENQ),
									       .DEQ(udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_DEQ),
									       .CLR(udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_CLR),
									       .D_OUT(udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT),
									       .FULL_N(udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_FULL_N),
									       .EMPTY_N(udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_EMPTY_N));

  // submodule udpIpMetaAndDataStream_udpIpMetaDataOutBuf
  FIFO2 #(.width(32'd80),
	  .guarded(1'd1)) udpIpMetaAndDataStream_udpIpMetaDataOutBuf(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(udpIpMetaAndDataStream_udpIpMetaDataOutBuf_D_IN),
								     .ENQ(udpIpMetaAndDataStream_udpIpMetaDataOutBuf_ENQ),
								     .DEQ(udpIpMetaAndDataStream_udpIpMetaDataOutBuf_DEQ),
								     .CLR(udpIpMetaAndDataStream_udpIpMetaDataOutBuf_CLR),
								     .D_OUT(udpIpMetaAndDataStream_udpIpMetaDataOutBuf_D_OUT),
								     .FULL_N(udpIpMetaAndDataStream_udpIpMetaDataOutBuf_FULL_N),
								     .EMPTY_N(udpIpMetaAndDataStream_udpIpMetaDataOutBuf_EMPTY_N));

  // rule RL_macStream_doStreamReduction
  assign WILL_FIRE_RL_macStream_doStreamReduction =
	     macStream_dataStreamOutBuf_FULL_N &&
	     (macStream_extraDataStreamBuf[290] || axiStreamInBuf_EMPTY_N) ;

  // rule RL_macMetaAndUdpIpStream_doCheck
  assign WILL_FIRE_RL_macMetaAndUdpIpStream_doCheck =
	     macMetaAndUdpIpStream_macExtractor_extractData_ETC___d114 &&
	     macMetaAndUdpIpStream_extState == 2'd0 ;

  // rule RL_macMetaAndUdpIpStream_doPass
  assign WILL_FIRE_RL_macMetaAndUdpIpStream_doPass =
	     macMetaAndUdpIpStream_macExtractor_dataStreamBuf_EMPTY_N &&
	     macMetaAndUdpIpStream_dataStreamOutBuf_FULL_N &&
	     macMetaAndUdpIpStream_extState == 2'd1 ;

  // rule RL_macMetaAndUdpIpStream_doThrow
  assign WILL_FIRE_RL_macMetaAndUdpIpStream_doThrow =
	     macMetaAndUdpIpStream_macExtractor_dataStreamBuf_EMPTY_N &&
	     macMetaAndUdpIpStream_extState == 2'd2 ;

  // rule RL_macMetaAndUdpIpStream_macExtractor_doExtraction
  always@(macMetaAndUdpIpStream_macExtractor_extractState or
	  macMetaAndUdpIpStream_macExtractor_dataStreamBuf_FULL_N or
	  macStream_dataStreamOutBuf_EMPTY_N or
	  macMetaAndUdpIpStream_macExtractor_extractDataBuf_FULL_N)
  begin
    case (macMetaAndUdpIpStream_macExtractor_extractState)
      2'd0:
	  WILL_FIRE_RL_macMetaAndUdpIpStream_macExtractor_doExtraction =
	      macStream_dataStreamOutBuf_EMPTY_N &&
	      macMetaAndUdpIpStream_macExtractor_extractDataBuf_FULL_N;
      2'd1:
	  WILL_FIRE_RL_macMetaAndUdpIpStream_macExtractor_doExtraction =
	      macStream_dataStreamOutBuf_EMPTY_N &&
	      macMetaAndUdpIpStream_macExtractor_dataStreamBuf_FULL_N;
      default: WILL_FIRE_RL_macMetaAndUdpIpStream_macExtractor_doExtraction =
		   macMetaAndUdpIpStream_macExtractor_extractState != 2'd2 ||
		   macMetaAndUdpIpStream_macExtractor_dataStreamBuf_FULL_N;
    endcase
  end

  // rule RL_udpIpMetaAndDataStream_doCheck
  assign WILL_FIRE_RL_udpIpMetaAndDataStream_doCheck =
	     udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_EMPTY_N &&
	     (ipChecksum__h10199 != 16'd0 ||
	      !udpIpMetaAndDataStream_udpIpExtractor_extractD_ETC___d269 ||
	      udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[87:80] !=
	      8'd17 ||
	      udpIpMetaAndDataStream_udpIpMetaDataOutBuf_FULL_N) &&
	     udpIpMetaAndDataStream_extState == 2'd0 ;

  // rule RL_udpIpMetaAndDataStream_doPass
  assign WILL_FIRE_RL_udpIpMetaAndDataStream_doPass =
	     udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_EMPTY_N &&
	     udpIpMetaAndDataStream_dataStreamOutBuf_FULL_N &&
	     udpIpMetaAndDataStream_extState == 2'd1 ;

  // rule RL_udpIpMetaAndDataStream_doThrow
  assign WILL_FIRE_RL_udpIpMetaAndDataStream_doThrow =
	     udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_EMPTY_N &&
	     udpIpMetaAndDataStream_extState == 2'd2 ;

  // rule RL_udpIpMetaAndDataStream_udpIpExtractor_doExtraction
  always@(udpIpMetaAndDataStream_udpIpExtractor_extractState or
	  udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_FULL_N or
	  macMetaAndUdpIpStream_dataStreamOutBuf_EMPTY_N or
	  udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_FULL_N)
  begin
    case (udpIpMetaAndDataStream_udpIpExtractor_extractState)
      2'd0:
	  WILL_FIRE_RL_udpIpMetaAndDataStream_udpIpExtractor_doExtraction =
	      macMetaAndUdpIpStream_dataStreamOutBuf_EMPTY_N &&
	      udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_FULL_N;
      2'd1:
	  WILL_FIRE_RL_udpIpMetaAndDataStream_udpIpExtractor_doExtraction =
	      macMetaAndUdpIpStream_dataStreamOutBuf_EMPTY_N &&
	      udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_FULL_N;
      default: WILL_FIRE_RL_udpIpMetaAndDataStream_udpIpExtractor_doExtraction =
		   udpIpMetaAndDataStream_udpIpExtractor_extractState !=
		   2'd2 ||
		   udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_FULL_N;
    endcase
  end

  // inputs to muxes for submodule ports
  assign MUX_macMetaAndUdpIpStream_extState_write_1__PSEL_1 =
	     WILL_FIRE_RL_macMetaAndUdpIpStream_doThrow ||
	     WILL_FIRE_RL_macMetaAndUdpIpStream_doPass ;
  assign MUX_macMetaAndUdpIpStream_extState_write_1__SEL_1 =
	     MUX_macMetaAndUdpIpStream_extState_write_1__PSEL_1 &&
	     macMetaAndUdpIpStream_macExtractor_dataStreamBuf_D_OUT[0] ;
  assign MUX_udpIpMetaAndDataStream_extState_write_1__PSEL_1 =
	     WILL_FIRE_RL_udpIpMetaAndDataStream_doThrow ||
	     WILL_FIRE_RL_udpIpMetaAndDataStream_doPass ;
  assign MUX_udpIpMetaAndDataStream_extState_write_1__SEL_1 =
	     MUX_udpIpMetaAndDataStream_extState_write_1__PSEL_1 &&
	     udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_D_OUT[0] ;
  assign MUX_macMetaAndUdpIpStream_extState_write_1__VAL_2 =
	     (macMetaAndUdpIpStream_macExtractor_extractDataBuf_D_OUT[15:0] ==
	      16'd2054 ||
	      macMetaAndUdpIpStream_macExtractor_extractDataBuf_D_OUT[15:0] ==
	      16'd2048 &&
	      macMetaAndUdpIpStream_macExtractor_extractData_ETC___d108) ?
	       2'd1 :
	       2'd2 ;
  assign MUX_udpIpMetaAndDataStream_extState_write_1__VAL_2 =
	     (ipChecksum__h10199 == 16'd0 &&
	      udpIpMetaAndDataStream_udpIpExtractor_extractD_ETC___d269 &&
	      udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[87:80] ==
	      8'd17) ?
	       2'd1 :
	       2'd2 ;

  // register macMetaAndUdpIpStream_extState
  assign macMetaAndUdpIpStream_extState_D_IN =
	     MUX_macMetaAndUdpIpStream_extState_write_1__SEL_1 ?
	       2'd0 :
	       MUX_macMetaAndUdpIpStream_extState_write_1__VAL_2 ;
  assign macMetaAndUdpIpStream_extState_EN =
	     (WILL_FIRE_RL_macMetaAndUdpIpStream_doThrow ||
	      WILL_FIRE_RL_macMetaAndUdpIpStream_doPass) &&
	     macMetaAndUdpIpStream_macExtractor_dataStreamBuf_D_OUT[0] ||
	     WILL_FIRE_RL_macMetaAndUdpIpStream_doCheck ;

  // register macMetaAndUdpIpStream_macExtractor_extractState
  always@(macMetaAndUdpIpStream_macExtractor_extractState or
	  macStream_dataStreamOutBuf_D_OUT)
  begin
    case (macMetaAndUdpIpStream_macExtractor_extractState)
      2'd0:
	  macMetaAndUdpIpStream_macExtractor_extractState_D_IN =
	      macStream_dataStreamOutBuf_D_OUT[0] ? 2'd2 : 2'd1;
      2'd1:
	  macMetaAndUdpIpStream_macExtractor_extractState_D_IN =
	      (macStream_dataStreamOutBuf_D_OUT[33:16] == 18'd0) ?
		2'd0 :
		2'd2;
      default: macMetaAndUdpIpStream_macExtractor_extractState_D_IN = 2'd0;
    endcase
  end
  assign macMetaAndUdpIpStream_macExtractor_extractState_EN =
	     WILL_FIRE_RL_macMetaAndUdpIpStream_macExtractor_doExtraction &&
	     (macMetaAndUdpIpStream_macExtractor_extractState == 2'd0 &&
	      (macStream_dataStreamOutBuf_D_OUT[33:16] != 18'd0 ||
	       !macStream_dataStreamOutBuf_D_OUT[0]) ||
	      macMetaAndUdpIpStream_macExtractor_extractState == 2'd1 &&
	      macStream_dataStreamOutBuf_D_OUT[0] ||
	      macMetaAndUdpIpStream_macExtractor_extractState == 2'd2) ;

  // register macMetaAndUdpIpStream_macExtractor_isFirstReg
  assign macMetaAndUdpIpStream_macExtractor_isFirstReg_D_IN =
	     macMetaAndUdpIpStream_macExtractor_extractState == 2'd0 ;
  assign macMetaAndUdpIpStream_macExtractor_isFirstReg_EN =
	     WILL_FIRE_RL_macMetaAndUdpIpStream_macExtractor_doExtraction &&
	     (macMetaAndUdpIpStream_macExtractor_extractState == 2'd0 ||
	      macMetaAndUdpIpStream_macExtractor_extractState == 2'd1) ;

  // register macMetaAndUdpIpStream_macExtractor_residueBuf
  assign macMetaAndUdpIpStream_macExtractor_residueBuf_D_IN =
	     macStream_dataStreamOutBuf_D_OUT[289:146] ;
  assign macMetaAndUdpIpStream_macExtractor_residueBuf_EN =
	     WILL_FIRE_RL_macMetaAndUdpIpStream_macExtractor_doExtraction &&
	     (macMetaAndUdpIpStream_macExtractor_extractState == 2'd0 ||
	      macMetaAndUdpIpStream_macExtractor_extractState == 2'd1) ;

  // register macMetaAndUdpIpStream_macExtractor_residueByteEnBuf
  assign macMetaAndUdpIpStream_macExtractor_residueByteEnBuf_D_IN =
	     macStream_dataStreamOutBuf_D_OUT[33:16] ;
  assign macMetaAndUdpIpStream_macExtractor_residueByteEnBuf_EN =
	     WILL_FIRE_RL_macMetaAndUdpIpStream_macExtractor_doExtraction &&
	     (macMetaAndUdpIpStream_macExtractor_extractState == 2'd0 ||
	      macMetaAndUdpIpStream_macExtractor_extractState == 2'd1) ;

  // register macStream_extraDataStreamBuf
  assign macStream_extraDataStreamBuf_D_IN =
	     { !macStream_extraDataStreamBuf[290],
	       axiStreamInBuf_D_OUT[577:322],
	       axiStreamInBuf_D_OUT[65:34],
	       1'd0,
	       axiStreamInBuf_D_OUT[0] } ;
  assign macStream_extraDataStreamBuf_EN =
	     WILL_FIRE_RL_macStream_doStreamReduction &&
	     (macStream_extraDataStreamBuf[290] ||
	      axiStreamInBuf_D_OUT[65:34] != 32'd0) ;

  // register macStream_isFirstReg
  assign macStream_isFirstReg_D_IN = axiStreamInBuf_D_OUT[0] ;
  assign macStream_isFirstReg_EN =
	     WILL_FIRE_RL_macStream_doStreamReduction &&
	     !macStream_extraDataStreamBuf[290] ;

  // register udpConfigReg
  assign udpConfigReg_D_IN = { 1'd1, udpConfig_put } ;
  assign udpConfigReg_EN = EN_udpConfig_put ;

  // register udpIpMetaAndDataStream_extState
  assign udpIpMetaAndDataStream_extState_D_IN =
	     MUX_udpIpMetaAndDataStream_extState_write_1__SEL_1 ?
	       2'd0 :
	       MUX_udpIpMetaAndDataStream_extState_write_1__VAL_2 ;
  assign udpIpMetaAndDataStream_extState_EN =
	     (WILL_FIRE_RL_udpIpMetaAndDataStream_doThrow ||
	      WILL_FIRE_RL_udpIpMetaAndDataStream_doPass) &&
	     udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_D_OUT[0] ||
	     WILL_FIRE_RL_udpIpMetaAndDataStream_doCheck ;

  // register udpIpMetaAndDataStream_udpIpExtractor_extractState
  always@(udpIpMetaAndDataStream_udpIpExtractor_extractState or
	  macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT)
  begin
    case (udpIpMetaAndDataStream_udpIpExtractor_extractState)
      2'd0:
	  udpIpMetaAndDataStream_udpIpExtractor_extractState_D_IN =
	      macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[0] ? 2'd2 : 2'd1;
      2'd1:
	  udpIpMetaAndDataStream_udpIpExtractor_extractState_D_IN =
	      (macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[33:30] == 4'd0) ?
		2'd0 :
		2'd2;
      default: udpIpMetaAndDataStream_udpIpExtractor_extractState_D_IN = 2'd0;
    endcase
  end
  assign udpIpMetaAndDataStream_udpIpExtractor_extractState_EN =
	     WILL_FIRE_RL_udpIpMetaAndDataStream_udpIpExtractor_doExtraction &&
	     (udpIpMetaAndDataStream_udpIpExtractor_extractState == 2'd0 &&
	      (macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[33:30] != 4'd0 ||
	       !macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[0]) ||
	      udpIpMetaAndDataStream_udpIpExtractor_extractState == 2'd1 &&
	      macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[0] ||
	      udpIpMetaAndDataStream_udpIpExtractor_extractState == 2'd2) ;

  // register udpIpMetaAndDataStream_udpIpExtractor_isFirstReg
  assign udpIpMetaAndDataStream_udpIpExtractor_isFirstReg_D_IN =
	     udpIpMetaAndDataStream_udpIpExtractor_extractState == 2'd0 ;
  assign udpIpMetaAndDataStream_udpIpExtractor_isFirstReg_EN =
	     WILL_FIRE_RL_udpIpMetaAndDataStream_udpIpExtractor_doExtraction &&
	     (udpIpMetaAndDataStream_udpIpExtractor_extractState == 2'd0 ||
	      udpIpMetaAndDataStream_udpIpExtractor_extractState == 2'd1) ;

  // register udpIpMetaAndDataStream_udpIpExtractor_residueBuf
  assign udpIpMetaAndDataStream_udpIpExtractor_residueBuf_D_IN =
	     macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[289:258] ;
  assign udpIpMetaAndDataStream_udpIpExtractor_residueBuf_EN =
	     WILL_FIRE_RL_udpIpMetaAndDataStream_udpIpExtractor_doExtraction &&
	     (udpIpMetaAndDataStream_udpIpExtractor_extractState == 2'd0 ||
	      udpIpMetaAndDataStream_udpIpExtractor_extractState == 2'd1) ;

  // register udpIpMetaAndDataStream_udpIpExtractor_residueByteEnBuf
  assign udpIpMetaAndDataStream_udpIpExtractor_residueByteEnBuf_D_IN =
	     macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[33:30] ;
  assign udpIpMetaAndDataStream_udpIpExtractor_residueByteEnBuf_EN =
	     WILL_FIRE_RL_udpIpMetaAndDataStream_udpIpExtractor_doExtraction &&
	     (udpIpMetaAndDataStream_udpIpExtractor_extractState == 2'd0 ||
	      udpIpMetaAndDataStream_udpIpExtractor_extractState == 2'd1) ;

  // submodule axiStreamInBuf
  assign axiStreamInBuf_D_IN = axiStreamIn_put ;
  assign axiStreamInBuf_ENQ = EN_axiStreamIn_put ;
  assign axiStreamInBuf_DEQ =
	     WILL_FIRE_RL_macStream_doStreamReduction &&
	     !macStream_extraDataStreamBuf[290] ;
  assign axiStreamInBuf_CLR = 1'b0 ;

  // submodule macMetaAndUdpIpStream_dataStreamOutBuf
  assign macMetaAndUdpIpStream_dataStreamOutBuf_D_IN =
	     macMetaAndUdpIpStream_macExtractor_dataStreamBuf_D_OUT ;
  assign macMetaAndUdpIpStream_dataStreamOutBuf_ENQ =
	     WILL_FIRE_RL_macMetaAndUdpIpStream_doPass ;
  assign macMetaAndUdpIpStream_dataStreamOutBuf_DEQ =
	     WILL_FIRE_RL_udpIpMetaAndDataStream_udpIpExtractor_doExtraction &&
	     (udpIpMetaAndDataStream_udpIpExtractor_extractState == 2'd0 ||
	      udpIpMetaAndDataStream_udpIpExtractor_extractState == 2'd1) ;
  assign macMetaAndUdpIpStream_dataStreamOutBuf_CLR = 1'b0 ;

  // submodule macMetaAndUdpIpStream_macExtractor_dataStreamBuf
  assign macMetaAndUdpIpStream_macExtractor_dataStreamBuf_D_IN =
	     { (macMetaAndUdpIpStream_macExtractor_extractState == 2'd1) ?
		 macStream_dataStreamOutBuf_D_OUT[145:34] :
		 112'd0,
	       macMetaAndUdpIpStream_macExtractor_residueBuf,
	       (macMetaAndUdpIpStream_macExtractor_extractState == 2'd1) ?
		 macStream_dataStreamOutBuf_D_OUT[15:2] :
		 14'd0,
	       macMetaAndUdpIpStream_macExtractor_residueByteEnBuf,
	       macMetaAndUdpIpStream_macExtractor_isFirstReg,
	       macMetaAndUdpIpStream_macExtractor_extractState != 2'd1 ||
	       macStream_dataStreamOutBuf_D_OUT[0] &&
	       macStream_dataStreamOutBuf_D_OUT[33:16] == 18'd0 } ;
  assign macMetaAndUdpIpStream_macExtractor_dataStreamBuf_ENQ =
	     WILL_FIRE_RL_macMetaAndUdpIpStream_macExtractor_doExtraction &&
	     (macMetaAndUdpIpStream_macExtractor_extractState == 2'd1 ||
	      macMetaAndUdpIpStream_macExtractor_extractState == 2'd2) ;
  assign macMetaAndUdpIpStream_macExtractor_dataStreamBuf_DEQ =
	     MUX_macMetaAndUdpIpStream_extState_write_1__PSEL_1 ;
  assign macMetaAndUdpIpStream_macExtractor_dataStreamBuf_CLR = 1'b0 ;

  // submodule macMetaAndUdpIpStream_macExtractor_extractDataBuf
  assign macMetaAndUdpIpStream_macExtractor_extractDataBuf_D_IN =
	     { x__h1475, x__h3627, x_ethType__h1481 } ;
  assign macMetaAndUdpIpStream_macExtractor_extractDataBuf_ENQ =
	     WILL_FIRE_RL_macMetaAndUdpIpStream_macExtractor_doExtraction &&
	     macMetaAndUdpIpStream_macExtractor_extractState == 2'd0 ;
  assign macMetaAndUdpIpStream_macExtractor_extractDataBuf_DEQ =
	     WILL_FIRE_RL_macMetaAndUdpIpStream_doCheck ;
  assign macMetaAndUdpIpStream_macExtractor_extractDataBuf_CLR = 1'b0 ;

  // submodule macMetaAndUdpIpStream_macMetaDataOutBuf
  assign macMetaAndUdpIpStream_macMetaDataOutBuf_D_IN =
	     macMetaAndUdpIpStream_macExtractor_extractDataBuf_D_OUT[63:0] ;
  assign macMetaAndUdpIpStream_macMetaDataOutBuf_ENQ =
	     WILL_FIRE_RL_macMetaAndUdpIpStream_doCheck &&
	     (macMetaAndUdpIpStream_macExtractor_extractDataBuf_D_OUT[15:0] ==
	      16'd2054 ||
	      macMetaAndUdpIpStream_macExtractor_extractDataBuf_D_OUT[15:0] ==
	      16'd2048 &&
	      macMetaAndUdpIpStream_macExtractor_extractData_ETC___d108) ;
  assign macMetaAndUdpIpStream_macMetaDataOutBuf_DEQ = EN_macMetaDataOut_deq ;
  assign macMetaAndUdpIpStream_macMetaDataOutBuf_CLR = 1'b0 ;

  // submodule macStream_dataStreamOutBuf
  assign macStream_dataStreamOutBuf_D_IN =
	     macStream_extraDataStreamBuf[290] ?
	       macStream_extraDataStreamBuf[289:0] :
	       { axiStreamInBuf_D_OUT[321:66],
		 axiStreamInBuf_D_OUT[33:2],
		 macStream_isFirstReg,
		 axiStreamInBuf_D_OUT[65:34] == 32'd0 } ;
  assign macStream_dataStreamOutBuf_ENQ =
	     WILL_FIRE_RL_macStream_doStreamReduction ;
  assign macStream_dataStreamOutBuf_DEQ =
	     WILL_FIRE_RL_macMetaAndUdpIpStream_macExtractor_doExtraction &&
	     (macMetaAndUdpIpStream_macExtractor_extractState == 2'd0 ||
	      macMetaAndUdpIpStream_macExtractor_extractState == 2'd1) ;
  assign macStream_dataStreamOutBuf_CLR = 1'b0 ;

  // submodule udpIpMetaAndDataStream_dataStreamOutBuf
  assign udpIpMetaAndDataStream_dataStreamOutBuf_D_IN =
	     udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_D_OUT ;
  assign udpIpMetaAndDataStream_dataStreamOutBuf_ENQ =
	     WILL_FIRE_RL_udpIpMetaAndDataStream_doPass ;
  assign udpIpMetaAndDataStream_dataStreamOutBuf_DEQ = EN_dataStreamOut_deq ;
  assign udpIpMetaAndDataStream_dataStreamOutBuf_CLR = 1'b0 ;

  // submodule udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf
  assign udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_D_IN =
	     { (udpIpMetaAndDataStream_udpIpExtractor_extractState == 2'd1) ?
		 macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[257:34] :
		 224'd0,
	       udpIpMetaAndDataStream_udpIpExtractor_residueBuf,
	       (udpIpMetaAndDataStream_udpIpExtractor_extractState == 2'd1) ?
		 macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[29:2] :
		 28'd0,
	       udpIpMetaAndDataStream_udpIpExtractor_residueByteEnBuf,
	       udpIpMetaAndDataStream_udpIpExtractor_isFirstReg,
	       udpIpMetaAndDataStream_udpIpExtractor_extractState != 2'd1 ||
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[0] &&
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[33:30] == 4'd0 } ;
  assign udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_ENQ =
	     WILL_FIRE_RL_udpIpMetaAndDataStream_udpIpExtractor_doExtraction &&
	     (udpIpMetaAndDataStream_udpIpExtractor_extractState == 2'd1 ||
	      udpIpMetaAndDataStream_udpIpExtractor_extractState == 2'd2) ;
  assign udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_DEQ =
	     MUX_udpIpMetaAndDataStream_extState_write_1__PSEL_1 ;
  assign udpIpMetaAndDataStream_udpIpExtractor_dataStreamBuf_CLR = 1'b0 ;

  // submodule udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf
  assign udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_IN =
	     { macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[41:34],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[49:42],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[57:50],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[65:58],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[73:66],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[81:74],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[89:82],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[97:90],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[105:98],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[113:106],
	       x__h9649,
	       x__h9653,
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[153:151],
	       x_ipHeader_ipOffset__h9628,
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[169:162],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[177:170],
	       x__h9671,
	       x__h9677,
	       x__h9681 } ;
  assign udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_ENQ =
	     WILL_FIRE_RL_udpIpMetaAndDataStream_udpIpExtractor_doExtraction &&
	     udpIpMetaAndDataStream_udpIpExtractor_extractState == 2'd0 ;
  assign udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_DEQ =
	     WILL_FIRE_RL_udpIpMetaAndDataStream_doCheck ;
  assign udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_CLR = 1'b0 ;

  // submodule udpIpMetaAndDataStream_udpIpMetaDataOutBuf
  assign udpIpMetaAndDataStream_udpIpMetaDataOutBuf_D_IN =
	     { x__h11001,
	       udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[63:32],
	       udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[207:192],
	       udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[223:208] } ;
  assign udpIpMetaAndDataStream_udpIpMetaDataOutBuf_ENQ =
	     WILL_FIRE_RL_udpIpMetaAndDataStream_doCheck &&
	     ipChecksum__h10199 == 16'd0 &&
	     udpIpMetaAndDataStream_udpIpExtractor_extractD_ETC___d269 &&
	     udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[87:80] ==
	     8'd17 ;
  assign udpIpMetaAndDataStream_udpIpMetaDataOutBuf_DEQ =
	     EN_udpIpMetaDataOut_deq ;
  assign udpIpMetaAndDataStream_udpIpMetaDataOutBuf_CLR = 1'b0 ;

  // remaining internal signals
  assign _theResult____h10206 =
	     { 4'd0,
	       udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[15:0] } +
	     { 4'd0,
	       udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[31:16] } +
	     { 4'd0,
	       udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[47:32] } +
	     { 4'd0,
	       udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[63:48] } +
	     { 4'd0,
	       udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[79:64] } +
	     { 4'd0,
	       udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[95:80] } +
	     { 4'd0,
	       udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[111:96] } +
	     { 4'd0,
	       udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[127:112] } +
	     { 4'd0,
	       udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[143:128] } +
	     { 4'd0,
	       udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[159:144] } ;
  assign ipChecksum__h10199 = ~temp__h10203 ;
  assign macMetaAndUdpIpStream_macExtractor_extractData_ETC___d108 =
	     macMetaAndUdpIpStream_macExtractor_extractDataBuf_D_OUT[111:64] ==
	     udpConfigReg[143:96] ;
  assign macMetaAndUdpIpStream_macExtractor_extractData_ETC___d114 =
	     macMetaAndUdpIpStream_macExtractor_extractDataBuf_EMPTY_N &&
	     (macMetaAndUdpIpStream_macExtractor_extractDataBuf_D_OUT[15:0] !=
	      16'd2054 &&
	      (macMetaAndUdpIpStream_macExtractor_extractDataBuf_D_OUT[15:0] !=
	       16'd2048 ||
	       !macMetaAndUdpIpStream_macExtractor_extractData_ETC___d108) ||
	      macMetaAndUdpIpStream_macMetaDataOutBuf_FULL_N) ;
  assign temp__h10203 =
	     _theResult____h10206[15:0] +
	     { 12'd0, _theResult____h10206[19:16] } ;
  assign udpIpMetaAndDataStream_udpIpExtractor_extractD_ETC___d269 =
	     udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[31:0] ==
	     udpConfigReg[95:64] ;
  assign x__h11001 =
	     udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[191:176] -
	     16'd8 ;
  assign x__h1475 =
	     { macStream_dataStreamOutBuf_D_OUT[41:34],
	       macStream_dataStreamOutBuf_D_OUT[49:42],
	       macStream_dataStreamOutBuf_D_OUT[57:50],
	       macStream_dataStreamOutBuf_D_OUT[65:58],
	       macStream_dataStreamOutBuf_D_OUT[73:66],
	       macStream_dataStreamOutBuf_D_OUT[81:74] } ;
  assign x__h3627 =
	     { macStream_dataStreamOutBuf_D_OUT[89:82],
	       macStream_dataStreamOutBuf_D_OUT[97:90],
	       macStream_dataStreamOutBuf_D_OUT[105:98],
	       macStream_dataStreamOutBuf_D_OUT[113:106],
	       macStream_dataStreamOutBuf_D_OUT[121:114],
	       macStream_dataStreamOutBuf_D_OUT[129:122] } ;
  assign x__h9649 =
	     { macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[121:114],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[129:122] } ;
  assign x__h9653 =
	     { macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[137:130],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[145:138] } ;
  assign x__h9671 =
	     { macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[185:178],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[193:186] } ;
  assign x__h9677 =
	     { macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[201:194],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[209:202],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[217:210],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[225:218] } ;
  assign x__h9681 =
	     { macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[233:226],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[241:234],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[249:242],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[257:250] } ;
  assign x_ethType__h1481 =
	     { macStream_dataStreamOutBuf_D_OUT[137:130],
	       macStream_dataStreamOutBuf_D_OUT[145:138] } ;
  assign x_ipHeader_ipOffset__h9628 =
	     { macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[150:146],
	       macMetaAndUdpIpStream_dataStreamOutBuf_D_OUT[161:154] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        macMetaAndUdpIpStream_extState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	macMetaAndUdpIpStream_macExtractor_extractState <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	macMetaAndUdpIpStream_macExtractor_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	macStream_extraDataStreamBuf <= `BSV_ASSIGNMENT_DELAY
	    291'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	macStream_isFirstReg <= `BSV_ASSIGNMENT_DELAY 1'd1;
	udpConfigReg <= `BSV_ASSIGNMENT_DELAY
	    145'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	udpIpMetaAndDataStream_extState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	udpIpMetaAndDataStream_udpIpExtractor_extractState <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	udpIpMetaAndDataStream_udpIpExtractor_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
      end
    else
      begin
        if (macMetaAndUdpIpStream_extState_EN)
	  macMetaAndUdpIpStream_extState <= `BSV_ASSIGNMENT_DELAY
	      macMetaAndUdpIpStream_extState_D_IN;
	if (macMetaAndUdpIpStream_macExtractor_extractState_EN)
	  macMetaAndUdpIpStream_macExtractor_extractState <= `BSV_ASSIGNMENT_DELAY
	      macMetaAndUdpIpStream_macExtractor_extractState_D_IN;
	if (macMetaAndUdpIpStream_macExtractor_isFirstReg_EN)
	  macMetaAndUdpIpStream_macExtractor_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	      macMetaAndUdpIpStream_macExtractor_isFirstReg_D_IN;
	if (macStream_extraDataStreamBuf_EN)
	  macStream_extraDataStreamBuf <= `BSV_ASSIGNMENT_DELAY
	      macStream_extraDataStreamBuf_D_IN;
	if (macStream_isFirstReg_EN)
	  macStream_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	      macStream_isFirstReg_D_IN;
	if (udpConfigReg_EN)
	  udpConfigReg <= `BSV_ASSIGNMENT_DELAY udpConfigReg_D_IN;
	if (udpIpMetaAndDataStream_extState_EN)
	  udpIpMetaAndDataStream_extState <= `BSV_ASSIGNMENT_DELAY
	      udpIpMetaAndDataStream_extState_D_IN;
	if (udpIpMetaAndDataStream_udpIpExtractor_extractState_EN)
	  udpIpMetaAndDataStream_udpIpExtractor_extractState <= `BSV_ASSIGNMENT_DELAY
	      udpIpMetaAndDataStream_udpIpExtractor_extractState_D_IN;
	if (udpIpMetaAndDataStream_udpIpExtractor_isFirstReg_EN)
	  udpIpMetaAndDataStream_udpIpExtractor_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	      udpIpMetaAndDataStream_udpIpExtractor_isFirstReg_D_IN;
      end
    if (macMetaAndUdpIpStream_macExtractor_residueBuf_EN)
      macMetaAndUdpIpStream_macExtractor_residueBuf <= `BSV_ASSIGNMENT_DELAY
	  macMetaAndUdpIpStream_macExtractor_residueBuf_D_IN;
    if (macMetaAndUdpIpStream_macExtractor_residueByteEnBuf_EN)
      macMetaAndUdpIpStream_macExtractor_residueByteEnBuf <= `BSV_ASSIGNMENT_DELAY
	  macMetaAndUdpIpStream_macExtractor_residueByteEnBuf_D_IN;
    if (udpIpMetaAndDataStream_udpIpExtractor_residueBuf_EN)
      udpIpMetaAndDataStream_udpIpExtractor_residueBuf <= `BSV_ASSIGNMENT_DELAY
	  udpIpMetaAndDataStream_udpIpExtractor_residueBuf_D_IN;
    if (udpIpMetaAndDataStream_udpIpExtractor_residueByteEnBuf_EN)
      udpIpMetaAndDataStream_udpIpExtractor_residueByteEnBuf <= `BSV_ASSIGNMENT_DELAY
	  udpIpMetaAndDataStream_udpIpExtractor_residueByteEnBuf_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    macMetaAndUdpIpStream_extState = 2'h2;
    macMetaAndUdpIpStream_macExtractor_extractState = 2'h2;
    macMetaAndUdpIpStream_macExtractor_isFirstReg = 1'h0;
    macMetaAndUdpIpStream_macExtractor_residueBuf =
	144'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    macMetaAndUdpIpStream_macExtractor_residueByteEnBuf = 18'h2AAAA;
    macStream_extraDataStreamBuf =
	291'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    macStream_isFirstReg = 1'h0;
    udpConfigReg = 145'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    udpIpMetaAndDataStream_extState = 2'h2;
    udpIpMetaAndDataStream_udpIpExtractor_extractState = 2'h2;
    udpIpMetaAndDataStream_udpIpExtractor_isFirstReg = 1'h0;
    udpIpMetaAndDataStream_udpIpExtractor_residueBuf = 32'hAAAAAAAA;
    udpIpMetaAndDataStream_udpIpExtractor_residueByteEnBuf = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macMetaAndUdpIpStream_doCheck &&
	  (macMetaAndUdpIpStream_macExtractor_extractDataBuf_D_OUT[15:0] ==
	   16'd2054 ||
	   macMetaAndUdpIpStream_macExtractor_extractDataBuf_D_OUT[15:0] ==
	   16'd2048 &&
	   macMetaAndUdpIpStream_macExtractor_extractData_ETC___d108))
	$display("Mac Extractor Mac Addr Check: Pass");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macMetaAndUdpIpStream_doCheck &&
	  macMetaAndUdpIpStream_macExtractor_extractDataBuf_D_OUT[15:0] !=
	  16'd2054 &&
	  (macMetaAndUdpIpStream_macExtractor_extractDataBuf_D_OUT[15:0] !=
	   16'd2048 ||
	   !macMetaAndUdpIpStream_macExtractor_extractData_ETC___d108))
	$display("Mac Extractor Mac Addr Check: Fail");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macMetaAndUdpIpStream_macExtractor_doExtraction &&
	  macMetaAndUdpIpStream_macExtractor_extractState != 2'd0 &&
	  macMetaAndUdpIpStream_macExtractor_extractState != 2'd1 &&
	  macMetaAndUdpIpStream_macExtractor_extractState != 2'd2)
	begin
	  v__h1328 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macMetaAndUdpIpStream_macExtractor_doExtraction &&
	  macMetaAndUdpIpStream_macExtractor_extractState != 2'd0 &&
	  macMetaAndUdpIpStream_macExtractor_extractState != 2'd1 &&
	  macMetaAndUdpIpStream_macExtractor_extractState != 2'd2)
	$write("ImmAssert failed in %m @time=%0t: %s-- %s: ",
	       v__h1328,
	       "\"/home/wengwz/workspace/udp-eth/src/includes/Utils.bsv\", line 301, column 21\n",
	       "unreachible case @ mkDataStreamExtract");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macMetaAndUdpIpStream_macExtractor_doExtraction &&
	  macMetaAndUdpIpStream_macExtractor_extractState != 2'd0 &&
	  macMetaAndUdpIpStream_macExtractor_extractState != 2'd1 &&
	  macMetaAndUdpIpStream_macExtractor_extractState != 2'd2)
	$write("extractState = %",
	       macMetaAndUdpIpStream_macExtractor_extractState);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macMetaAndUdpIpStream_macExtractor_doExtraction &&
	  macMetaAndUdpIpStream_macExtractor_extractState != 2'd0 &&
	  macMetaAndUdpIpStream_macExtractor_extractState != 2'd1 &&
	  macMetaAndUdpIpStream_macExtractor_extractState != 2'd2)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macMetaAndUdpIpStream_macExtractor_doExtraction &&
	  macMetaAndUdpIpStream_macExtractor_extractState != 2'd0 &&
	  macMetaAndUdpIpStream_macExtractor_extractState != 2'd1 &&
	  macMetaAndUdpIpStream_macExtractor_extractState != 2'd2)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_udpIpMetaAndDataStream_doCheck &&
	  ipChecksum__h10199 == 16'd0 &&
	  udpIpMetaAndDataStream_udpIpExtractor_extractD_ETC___d269 &&
	  udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[87:80] ==
	  8'd17)
	$display("IpUdp EXT: Check Pass");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_udpIpMetaAndDataStream_doCheck &&
	  (ipChecksum__h10199 != 16'd0 ||
	   !udpIpMetaAndDataStream_udpIpExtractor_extractD_ETC___d269 ||
	   udpIpMetaAndDataStream_udpIpExtractor_extractDataBuf_D_OUT[87:80] !=
	   8'd17))
	$display("IpUdp EXT: Check Fail ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_udpIpMetaAndDataStream_udpIpExtractor_doExtraction &&
	  udpIpMetaAndDataStream_udpIpExtractor_extractState != 2'd0 &&
	  udpIpMetaAndDataStream_udpIpExtractor_extractState != 2'd1 &&
	  udpIpMetaAndDataStream_udpIpExtractor_extractState != 2'd2)
	begin
	  v__h5227 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_udpIpMetaAndDataStream_udpIpExtractor_doExtraction &&
	  udpIpMetaAndDataStream_udpIpExtractor_extractState != 2'd0 &&
	  udpIpMetaAndDataStream_udpIpExtractor_extractState != 2'd1 &&
	  udpIpMetaAndDataStream_udpIpExtractor_extractState != 2'd2)
	$write("ImmAssert failed in %m @time=%0t: %s-- %s: ",
	       v__h5227,
	       "\"/home/wengwz/workspace/udp-eth/src/includes/Utils.bsv\", line 301, column 21\n",
	       "unreachible case @ mkDataStreamExtract");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_udpIpMetaAndDataStream_udpIpExtractor_doExtraction &&
	  udpIpMetaAndDataStream_udpIpExtractor_extractState != 2'd0 &&
	  udpIpMetaAndDataStream_udpIpExtractor_extractState != 2'd1 &&
	  udpIpMetaAndDataStream_udpIpExtractor_extractState != 2'd2)
	$write("extractState = %",
	       udpIpMetaAndDataStream_udpIpExtractor_extractState);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_udpIpMetaAndDataStream_udpIpExtractor_doExtraction &&
	  udpIpMetaAndDataStream_udpIpExtractor_extractState != 2'd0 &&
	  udpIpMetaAndDataStream_udpIpExtractor_extractState != 2'd1 &&
	  udpIpMetaAndDataStream_udpIpExtractor_extractState != 2'd2)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_udpIpMetaAndDataStream_udpIpExtractor_doExtraction &&
	  udpIpMetaAndDataStream_udpIpExtractor_extractState != 2'd0 &&
	  udpIpMetaAndDataStream_udpIpExtractor_extractState != 2'd1 &&
	  udpIpMetaAndDataStream_udpIpExtractor_extractState != 2'd2)
	$finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkUdpEthRx


`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif


module RegN(CLK, RST, Q_OUT, D_IN, EN);

   parameter width = 1;
   parameter init  = { width {1'b0} } ;

   input     CLK;
   input     RST;
   input     EN;
   input [width - 1 : 0] D_IN;
   output [width - 1 : 0] Q_OUT;

   reg [width - 1 : 0]    Q_OUT;

   always@(posedge CLK)
     begin
        if (RST == `BSV_RESET_VALUE)
          Q_OUT <= `BSV_ASSIGNMENT_DELAY init;
        else
          begin
             if (EN)
               Q_OUT <= `BSV_ASSIGNMENT_DELAY D_IN;
          end // else: !if(RST == `BSV_RESET_VALUE)
     end

`ifdef BSV_NO_INITIAL_BLOCKS
`else // not BSV_NO_INITIAL_BLOCKS
   // synopsys translate_off
   initial begin
      Q_OUT = {((width + 1)/2){2'b10}} ;
   end
   // synopsys translate_on
`endif // BSV_NO_INITIAL_BLOCKS

endmodule


`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif


// Basic register without reset.
module RegUN(CLK, EN, D_IN, Q_OUT);
   parameter width = 1;

   input     CLK;
   input     EN;
   input [width - 1 : 0] D_IN;

   output [width - 1 : 0] Q_OUT;
   reg [width - 1 : 0]    Q_OUT;

`ifdef BSV_NO_INITIAL_BLOCKS
`else // not BSV_NO_INITIAL_BLOCKS
   // synopsys translate_off
   initial begin
      Q_OUT = {((width + 1)/2){2'b10}} ;
   end
   // synopsys translate_on
`endif // BSV_NO_INITIAL_BLOCKS

   
   always@(posedge CLK)
     begin
        if (EN)
          Q_OUT <= `BSV_ASSIGNMENT_DELAY D_IN;
     end
endmodule


`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

`ifdef BSV_ASYNC_RESET
 `define BSV_ARESET_EDGE_META or `BSV_RESET_EDGE RST
`else
 `define BSV_ARESET_EDGE_META
`endif

`ifdef BSV_RESET_FIFO_HEAD
 `define BSV_ARESET_EDGE_HEAD `BSV_ARESET_EDGE_META
`else
 `define BSV_ARESET_EDGE_HEAD
`endif

// Depth 2 FIFO
module FIFO2(CLK,
             RST,
             D_IN,
             ENQ,
             FULL_N,
             D_OUT,
             DEQ,
             EMPTY_N,
             CLR);

   parameter width = 1;
   parameter guarded = 1'b1;

   input     CLK ;
   input     RST ;
   input [width - 1 : 0] D_IN;
   input                 ENQ;
   input                 DEQ;
   input                 CLR ;

   output                FULL_N;
   output                EMPTY_N;
   output [width - 1 : 0] D_OUT;

   reg                    full_reg;
   reg                    empty_reg;
   reg [width - 1 : 0]    data0_reg;
   reg [width - 1 : 0]    data1_reg;

   assign                 FULL_N = full_reg ;
   assign                 EMPTY_N = empty_reg ;
   assign                 D_OUT = data0_reg ;


   // Optimize the loading logic since state encoding is not power of 2!
   wire                   d0di = (ENQ && ! empty_reg ) || ( ENQ && DEQ && full_reg ) ;
   wire                   d0d1 = DEQ && ! full_reg ;
   wire                   d0h = ((! DEQ) && (! ENQ )) || (!DEQ && empty_reg ) || ( ! ENQ &&full_reg) ;
   wire                   d1di = ENQ & empty_reg ;

`ifdef BSV_NO_INITIAL_BLOCKS
`else // not BSV_NO_INITIAL_BLOCKS
   // synopsys translate_off
   initial
     begin
        data0_reg   = {((width + 1)/2) {2'b10}} ;
        data1_reg  = {((width + 1)/2) {2'b10}} ;
        empty_reg = 1'b0;
        full_reg  = 1'b1;
     end // initial begin
   // synopsys translate_on
`endif // BSV_NO_INITIAL_BLOCKS

   always@(posedge CLK `BSV_ARESET_EDGE_META)
     begin
        if (RST == `BSV_RESET_VALUE)
          begin
             empty_reg <= `BSV_ASSIGNMENT_DELAY 1'b0;
             full_reg  <= `BSV_ASSIGNMENT_DELAY 1'b1;
          end // if (RST == `BSV_RESET_VALUE)
        else
          begin
             if (CLR)
               begin
                  empty_reg <= `BSV_ASSIGNMENT_DELAY 1'b0;
                  full_reg  <= `BSV_ASSIGNMENT_DELAY 1'b1;
               end // if (CLR)
             else if ( ENQ && ! DEQ ) // just enq
               begin
                  empty_reg <= `BSV_ASSIGNMENT_DELAY 1'b1;
                  full_reg <= `BSV_ASSIGNMENT_DELAY ! empty_reg ;
               end
             else if ( DEQ && ! ENQ )
               begin
                  full_reg  <= `BSV_ASSIGNMENT_DELAY 1'b1;
                  empty_reg <= `BSV_ASSIGNMENT_DELAY ! full_reg;
               end // if ( DEQ && ! ENQ )
          end // else: !if(RST == `BSV_RESET_VALUE)

     end // always@ (posedge CLK or `BSV_RESET_EDGE RST)


   always@(posedge CLK `BSV_ARESET_EDGE_HEAD)
     begin
`ifdef BSV_RESET_FIFO_HEAD
        if (RST == `BSV_RESET_VALUE)
          begin
             data0_reg <= `BSV_ASSIGNMENT_DELAY {width {1'b0}} ;
             data1_reg <= `BSV_ASSIGNMENT_DELAY {width {1'b0}} ;
          end
        else
`endif
          begin
             data0_reg  <= `BSV_ASSIGNMENT_DELAY
                           {width{d0di}} & D_IN | {width{d0d1}} & data1_reg | {width{d0h}} & data0_reg ;
             data1_reg <= `BSV_ASSIGNMENT_DELAY
                          d1di ? D_IN : data1_reg ;
          end // else: !if(RST == `BSV_RESET_VALUE)
     end // always@ (posedge CLK or `BSV_RESET_EDGE RST)



   // synopsys translate_off
   always@(posedge CLK)
     begin: error_checks
        reg deqerror, enqerror ;

        deqerror =  0;
        enqerror = 0;
        if (RST == ! `BSV_RESET_VALUE)
          begin
             if ( ! empty_reg && DEQ )
               begin
                  deqerror =  1;
                  $display( "Warning: FIFO2: %m -- Dequeuing from empty fifo" ) ;
               end
             if ( ! full_reg && ENQ && (!DEQ || guarded) )
               begin
                  enqerror = 1;
                  $display( "Warning: FIFO2: %m -- Enqueuing to a full fifo" ) ;
               end
          end
     end // always@ (posedge CLK)
   // synopsys translate_on

endmodule
