
//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// On Tue Apr 11 22:47:13 CST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_udpConfig_put              O     1 const
// RDY_axiStreamInRx_put          O     1
// macMetaDataOutRx_first         O    64 reg
// RDY_macMetaDataOutRx_first     O     1 reg
// RDY_macMetaDataOutRx_deq       O     1 reg
// macMetaDataOutRx_notEmpty      O     1 reg
// RDY_macMetaDataOutRx_notEmpty  O     1 const
// udpMetaDataOutRx_first         O    80 reg
// RDY_udpMetaDataOutRx_first     O     1 reg
// RDY_udpMetaDataOutRx_deq       O     1 reg
// udpMetaDataOutRx_notEmpty      O     1 reg
// RDY_udpMetaDataOutRx_notEmpty  O     1 const
// dataStreamOutRx_first          O   290 reg
// RDY_dataStreamOutRx_first      O     1 reg
// RDY_dataStreamOutRx_deq        O     1 reg
// dataStreamOutRx_notEmpty       O     1 reg
// RDY_dataStreamOutRx_notEmpty   O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// udpConfig_put                  I   144 reg
// axiStreamInRx_put              I   578 reg
// EN_udpConfig_put               I     1
// EN_axiStreamInRx_put           I     1
// EN_macMetaDataOutRx_deq        I     1
// EN_udpMetaDataOutRx_deq        I     1
// EN_dataStreamOutRx_deq         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkUdpEthRx(CLK,
		  RST_N,

		  udpConfig_put,
		  EN_udpConfig_put,
		  RDY_udpConfig_put,

		  axiStreamInRx_put,
		  EN_axiStreamInRx_put,
		  RDY_axiStreamInRx_put,

		  macMetaDataOutRx_first,
		  RDY_macMetaDataOutRx_first,

		  EN_macMetaDataOutRx_deq,
		  RDY_macMetaDataOutRx_deq,

		  macMetaDataOutRx_notEmpty,
		  RDY_macMetaDataOutRx_notEmpty,

		  udpMetaDataOutRx_first,
		  RDY_udpMetaDataOutRx_first,

		  EN_udpMetaDataOutRx_deq,
		  RDY_udpMetaDataOutRx_deq,

		  udpMetaDataOutRx_notEmpty,
		  RDY_udpMetaDataOutRx_notEmpty,

		  dataStreamOutRx_first,
		  RDY_dataStreamOutRx_first,

		  EN_dataStreamOutRx_deq,
		  RDY_dataStreamOutRx_deq,

		  dataStreamOutRx_notEmpty,
		  RDY_dataStreamOutRx_notEmpty);
  input  CLK;
  input  RST_N;

  // action method udpConfig_put
  input  [143 : 0] udpConfig_put;
  input  EN_udpConfig_put;
  output RDY_udpConfig_put;

  // action method axiStreamInRx_put
  input  [577 : 0] axiStreamInRx_put;
  input  EN_axiStreamInRx_put;
  output RDY_axiStreamInRx_put;

  // value method macMetaDataOutRx_first
  output [63 : 0] macMetaDataOutRx_first;
  output RDY_macMetaDataOutRx_first;

  // action method macMetaDataOutRx_deq
  input  EN_macMetaDataOutRx_deq;
  output RDY_macMetaDataOutRx_deq;

  // value method macMetaDataOutRx_notEmpty
  output macMetaDataOutRx_notEmpty;
  output RDY_macMetaDataOutRx_notEmpty;

  // value method udpMetaDataOutRx_first
  output [79 : 0] udpMetaDataOutRx_first;
  output RDY_udpMetaDataOutRx_first;

  // action method udpMetaDataOutRx_deq
  input  EN_udpMetaDataOutRx_deq;
  output RDY_udpMetaDataOutRx_deq;

  // value method udpMetaDataOutRx_notEmpty
  output udpMetaDataOutRx_notEmpty;
  output RDY_udpMetaDataOutRx_notEmpty;

  // value method dataStreamOutRx_first
  output [289 : 0] dataStreamOutRx_first;
  output RDY_dataStreamOutRx_first;

  // action method dataStreamOutRx_deq
  input  EN_dataStreamOutRx_deq;
  output RDY_dataStreamOutRx_deq;

  // value method dataStreamOutRx_notEmpty
  output dataStreamOutRx_notEmpty;
  output RDY_dataStreamOutRx_notEmpty;

  // signals for module outputs
  wire [289 : 0] dataStreamOutRx_first;
  wire [79 : 0] udpMetaDataOutRx_first;
  wire [63 : 0] macMetaDataOutRx_first;
  wire RDY_axiStreamInRx_put,
       RDY_dataStreamOutRx_deq,
       RDY_dataStreamOutRx_first,
       RDY_dataStreamOutRx_notEmpty,
       RDY_macMetaDataOutRx_deq,
       RDY_macMetaDataOutRx_first,
       RDY_macMetaDataOutRx_notEmpty,
       RDY_udpConfig_put,
       RDY_udpMetaDataOutRx_deq,
       RDY_udpMetaDataOutRx_first,
       RDY_udpMetaDataOutRx_notEmpty,
       dataStreamOutRx_notEmpty,
       macMetaDataOutRx_notEmpty,
       udpMetaDataOutRx_notEmpty;

  // register macMetaAndIpUdpStream_extState
  reg [1 : 0] macMetaAndIpUdpStream_extState;
  wire [1 : 0] macMetaAndIpUdpStream_extState_D_IN;
  wire macMetaAndIpUdpStream_extState_EN;

  // register macMetaAndIpUdpStream_macExtractor_extractState
  reg [1 : 0] macMetaAndIpUdpStream_macExtractor_extractState;
  reg [1 : 0] macMetaAndIpUdpStream_macExtractor_extractState_D_IN;
  wire macMetaAndIpUdpStream_macExtractor_extractState_EN;

  // register macMetaAndIpUdpStream_macExtractor_isFirstReg
  reg macMetaAndIpUdpStream_macExtractor_isFirstReg;
  wire macMetaAndIpUdpStream_macExtractor_isFirstReg_D_IN,
       macMetaAndIpUdpStream_macExtractor_isFirstReg_EN;

  // register macMetaAndIpUdpStream_macExtractor_residueBuf
  reg [143 : 0] macMetaAndIpUdpStream_macExtractor_residueBuf;
  wire [143 : 0] macMetaAndIpUdpStream_macExtractor_residueBuf_D_IN;
  wire macMetaAndIpUdpStream_macExtractor_residueBuf_EN;

  // register macMetaAndIpUdpStream_macExtractor_residueByteEnBuf
  reg [17 : 0] macMetaAndIpUdpStream_macExtractor_residueByteEnBuf;
  wire [17 : 0] macMetaAndIpUdpStream_macExtractor_residueByteEnBuf_D_IN;
  wire macMetaAndIpUdpStream_macExtractor_residueByteEnBuf_EN;

  // register macStream_extraDataStreamBuf
  reg [290 : 0] macStream_extraDataStreamBuf;
  wire [290 : 0] macStream_extraDataStreamBuf_D_IN;
  wire macStream_extraDataStreamBuf_EN;

  // register macStream_isFirstReg
  reg macStream_isFirstReg;
  wire macStream_isFirstReg_D_IN, macStream_isFirstReg_EN;

  // register udpConfigReg
  reg [144 : 0] udpConfigReg;
  wire [144 : 0] udpConfigReg_D_IN;
  wire udpConfigReg_EN;

  // register udpMetaAndLoadStream_extState
  reg [1 : 0] udpMetaAndLoadStream_extState;
  wire [1 : 0] udpMetaAndLoadStream_extState_D_IN;
  wire udpMetaAndLoadStream_extState_EN;

  // register udpMetaAndLoadStream_ipUdpExtractor_extractState
  reg [1 : 0] udpMetaAndLoadStream_ipUdpExtractor_extractState;
  reg [1 : 0] udpMetaAndLoadStream_ipUdpExtractor_extractState_D_IN;
  wire udpMetaAndLoadStream_ipUdpExtractor_extractState_EN;

  // register udpMetaAndLoadStream_ipUdpExtractor_isFirstReg
  reg udpMetaAndLoadStream_ipUdpExtractor_isFirstReg;
  wire udpMetaAndLoadStream_ipUdpExtractor_isFirstReg_D_IN,
       udpMetaAndLoadStream_ipUdpExtractor_isFirstReg_EN;

  // register udpMetaAndLoadStream_ipUdpExtractor_residueBuf
  reg [31 : 0] udpMetaAndLoadStream_ipUdpExtractor_residueBuf;
  wire [31 : 0] udpMetaAndLoadStream_ipUdpExtractor_residueBuf_D_IN;
  wire udpMetaAndLoadStream_ipUdpExtractor_residueBuf_EN;

  // register udpMetaAndLoadStream_ipUdpExtractor_residueByteEnBuf
  reg [3 : 0] udpMetaAndLoadStream_ipUdpExtractor_residueByteEnBuf;
  wire [3 : 0] udpMetaAndLoadStream_ipUdpExtractor_residueByteEnBuf_D_IN;
  wire udpMetaAndLoadStream_ipUdpExtractor_residueByteEnBuf_EN;

  // ports of submodule axiStreamInRxBuf
  wire [577 : 0] axiStreamInRxBuf_D_IN, axiStreamInRxBuf_D_OUT;
  wire axiStreamInRxBuf_CLR,
       axiStreamInRxBuf_DEQ,
       axiStreamInRxBuf_EMPTY_N,
       axiStreamInRxBuf_ENQ,
       axiStreamInRxBuf_FULL_N;

  // ports of submodule macMetaAndIpUdpStream_dataStreamOutBuf
  wire [289 : 0] macMetaAndIpUdpStream_dataStreamOutBuf_D_IN,
		 macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT;
  wire macMetaAndIpUdpStream_dataStreamOutBuf_CLR,
       macMetaAndIpUdpStream_dataStreamOutBuf_DEQ,
       macMetaAndIpUdpStream_dataStreamOutBuf_EMPTY_N,
       macMetaAndIpUdpStream_dataStreamOutBuf_ENQ,
       macMetaAndIpUdpStream_dataStreamOutBuf_FULL_N;

  // ports of submodule macMetaAndIpUdpStream_macExtractor_dataStreamBuf
  wire [289 : 0] macMetaAndIpUdpStream_macExtractor_dataStreamBuf_D_IN,
		 macMetaAndIpUdpStream_macExtractor_dataStreamBuf_D_OUT;
  wire macMetaAndIpUdpStream_macExtractor_dataStreamBuf_CLR,
       macMetaAndIpUdpStream_macExtractor_dataStreamBuf_DEQ,
       macMetaAndIpUdpStream_macExtractor_dataStreamBuf_EMPTY_N,
       macMetaAndIpUdpStream_macExtractor_dataStreamBuf_ENQ,
       macMetaAndIpUdpStream_macExtractor_dataStreamBuf_FULL_N;

  // ports of submodule macMetaAndIpUdpStream_macExtractor_extractDataBuf
  wire [111 : 0] macMetaAndIpUdpStream_macExtractor_extractDataBuf_D_IN,
		 macMetaAndIpUdpStream_macExtractor_extractDataBuf_D_OUT;
  wire macMetaAndIpUdpStream_macExtractor_extractDataBuf_CLR,
       macMetaAndIpUdpStream_macExtractor_extractDataBuf_DEQ,
       macMetaAndIpUdpStream_macExtractor_extractDataBuf_EMPTY_N,
       macMetaAndIpUdpStream_macExtractor_extractDataBuf_ENQ,
       macMetaAndIpUdpStream_macExtractor_extractDataBuf_FULL_N;

  // ports of submodule macMetaAndIpUdpStream_macMetaDataOutBuf
  wire [63 : 0] macMetaAndIpUdpStream_macMetaDataOutBuf_D_IN,
		macMetaAndIpUdpStream_macMetaDataOutBuf_D_OUT;
  wire macMetaAndIpUdpStream_macMetaDataOutBuf_CLR,
       macMetaAndIpUdpStream_macMetaDataOutBuf_DEQ,
       macMetaAndIpUdpStream_macMetaDataOutBuf_EMPTY_N,
       macMetaAndIpUdpStream_macMetaDataOutBuf_ENQ,
       macMetaAndIpUdpStream_macMetaDataOutBuf_FULL_N;

  // ports of submodule macStream_dataStreamOutBuf
  wire [289 : 0] macStream_dataStreamOutBuf_D_IN,
		 macStream_dataStreamOutBuf_D_OUT;
  wire macStream_dataStreamOutBuf_CLR,
       macStream_dataStreamOutBuf_DEQ,
       macStream_dataStreamOutBuf_EMPTY_N,
       macStream_dataStreamOutBuf_ENQ,
       macStream_dataStreamOutBuf_FULL_N;

  // ports of submodule udpMetaAndLoadStream_dataStreamOutBuf
  wire [289 : 0] udpMetaAndLoadStream_dataStreamOutBuf_D_IN,
		 udpMetaAndLoadStream_dataStreamOutBuf_D_OUT;
  wire udpMetaAndLoadStream_dataStreamOutBuf_CLR,
       udpMetaAndLoadStream_dataStreamOutBuf_DEQ,
       udpMetaAndLoadStream_dataStreamOutBuf_EMPTY_N,
       udpMetaAndLoadStream_dataStreamOutBuf_ENQ,
       udpMetaAndLoadStream_dataStreamOutBuf_FULL_N;

  // ports of submodule udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf
  wire [289 : 0] udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_D_IN,
		 udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_D_OUT;
  wire udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_CLR,
       udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_DEQ,
       udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_EMPTY_N,
       udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_ENQ,
       udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_FULL_N;

  // ports of submodule udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf
  wire [223 : 0] udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_IN,
		 udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT;
  wire udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_CLR,
       udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_DEQ,
       udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_EMPTY_N,
       udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_ENQ,
       udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_FULL_N;

  // ports of submodule udpMetaAndLoadStream_metaDataOutBuf
  wire [79 : 0] udpMetaAndLoadStream_metaDataOutBuf_D_IN,
		udpMetaAndLoadStream_metaDataOutBuf_D_OUT;
  wire udpMetaAndLoadStream_metaDataOutBuf_CLR,
       udpMetaAndLoadStream_metaDataOutBuf_DEQ,
       udpMetaAndLoadStream_metaDataOutBuf_EMPTY_N,
       udpMetaAndLoadStream_metaDataOutBuf_ENQ,
       udpMetaAndLoadStream_metaDataOutBuf_FULL_N;

  // rule scheduling signals
  reg WILL_FIRE_RL_macMetaAndIpUdpStream_macExtractor_doExtraction,
      WILL_FIRE_RL_udpMetaAndLoadStream_ipUdpExtractor_doExtraction;
  wire WILL_FIRE_RL_macMetaAndIpUdpStream_doCheck,
       WILL_FIRE_RL_macMetaAndIpUdpStream_doPass,
       WILL_FIRE_RL_macMetaAndIpUdpStream_doThrow,
       WILL_FIRE_RL_macStream_doStreamReduction,
       WILL_FIRE_RL_udpMetaAndLoadStream_doCheck,
       WILL_FIRE_RL_udpMetaAndLoadStream_doPass,
       WILL_FIRE_RL_udpMetaAndLoadStream_doThrow;

  // inputs to muxes for submodule ports
  wire [1 : 0] MUX_macMetaAndIpUdpStream_extState_write_1__VAL_2,
	       MUX_udpMetaAndLoadStream_extState_write_1__VAL_2;
  wire MUX_macMetaAndIpUdpStream_extState_write_1__PSEL_1,
       MUX_macMetaAndIpUdpStream_extState_write_1__SEL_1,
       MUX_udpMetaAndLoadStream_extState_write_1__PSEL_1,
       MUX_udpMetaAndLoadStream_extState_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h1328;
  reg [63 : 0] v__h5228;
  // synopsys translate_on

  // remaining internal signals
  wire [47 : 0] x__h1475, x__h3627;
  wire [19 : 0] _theResult____h10199;
  wire [15 : 0] ipChecksum__h10192,
		temp__h10196,
		x__h11090,
		x__h9662,
		x__h9674,
		x__h9678,
		x__h9682,
		x_ethType__h1481;
  wire macMetaAndIpUdpStream_macExtractor_extractData_ETC___d108,
       macMetaAndIpUdpStream_macExtractor_extractData_ETC___d114,
       udpMetaAndLoadStream_ipUdpExtractor_extractDat_ETC___d265;

  // action method udpConfig_put
  assign RDY_udpConfig_put = 1'd1 ;

  // action method axiStreamInRx_put
  assign RDY_axiStreamInRx_put =
	     udpConfigReg[144] && axiStreamInRxBuf_FULL_N ;

  // value method macMetaDataOutRx_first
  assign macMetaDataOutRx_first =
	     macMetaAndIpUdpStream_macMetaDataOutBuf_D_OUT ;
  assign RDY_macMetaDataOutRx_first =
	     macMetaAndIpUdpStream_macMetaDataOutBuf_EMPTY_N ;

  // action method macMetaDataOutRx_deq
  assign RDY_macMetaDataOutRx_deq =
	     macMetaAndIpUdpStream_macMetaDataOutBuf_EMPTY_N ;

  // value method macMetaDataOutRx_notEmpty
  assign macMetaDataOutRx_notEmpty =
	     macMetaAndIpUdpStream_macMetaDataOutBuf_EMPTY_N ;
  assign RDY_macMetaDataOutRx_notEmpty = 1'd1 ;

  // value method udpMetaDataOutRx_first
  assign udpMetaDataOutRx_first = udpMetaAndLoadStream_metaDataOutBuf_D_OUT ;
  assign RDY_udpMetaDataOutRx_first =
	     udpMetaAndLoadStream_metaDataOutBuf_EMPTY_N ;

  // action method udpMetaDataOutRx_deq
  assign RDY_udpMetaDataOutRx_deq =
	     udpMetaAndLoadStream_metaDataOutBuf_EMPTY_N ;

  // value method udpMetaDataOutRx_notEmpty
  assign udpMetaDataOutRx_notEmpty =
	     udpMetaAndLoadStream_metaDataOutBuf_EMPTY_N ;
  assign RDY_udpMetaDataOutRx_notEmpty = 1'd1 ;

  // value method dataStreamOutRx_first
  assign dataStreamOutRx_first = udpMetaAndLoadStream_dataStreamOutBuf_D_OUT ;
  assign RDY_dataStreamOutRx_first =
	     udpMetaAndLoadStream_dataStreamOutBuf_EMPTY_N ;

  // action method dataStreamOutRx_deq
  assign RDY_dataStreamOutRx_deq =
	     udpMetaAndLoadStream_dataStreamOutBuf_EMPTY_N ;

  // value method dataStreamOutRx_notEmpty
  assign dataStreamOutRx_notEmpty =
	     udpMetaAndLoadStream_dataStreamOutBuf_EMPTY_N ;
  assign RDY_dataStreamOutRx_notEmpty = 1'd1 ;

  // submodule axiStreamInRxBuf
  FIFO2 #(.width(32'd578), .guarded(1'd1)) axiStreamInRxBuf(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(axiStreamInRxBuf_D_IN),
							    .ENQ(axiStreamInRxBuf_ENQ),
							    .DEQ(axiStreamInRxBuf_DEQ),
							    .CLR(axiStreamInRxBuf_CLR),
							    .D_OUT(axiStreamInRxBuf_D_OUT),
							    .FULL_N(axiStreamInRxBuf_FULL_N),
							    .EMPTY_N(axiStreamInRxBuf_EMPTY_N));

  // submodule macMetaAndIpUdpStream_dataStreamOutBuf
  FIFO2 #(.width(32'd290),
	  .guarded(1'd1)) macMetaAndIpUdpStream_dataStreamOutBuf(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(macMetaAndIpUdpStream_dataStreamOutBuf_D_IN),
								 .ENQ(macMetaAndIpUdpStream_dataStreamOutBuf_ENQ),
								 .DEQ(macMetaAndIpUdpStream_dataStreamOutBuf_DEQ),
								 .CLR(macMetaAndIpUdpStream_dataStreamOutBuf_CLR),
								 .D_OUT(macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT),
								 .FULL_N(macMetaAndIpUdpStream_dataStreamOutBuf_FULL_N),
								 .EMPTY_N(macMetaAndIpUdpStream_dataStreamOutBuf_EMPTY_N));

  // submodule macMetaAndIpUdpStream_macExtractor_dataStreamBuf
  FIFO2 #(.width(32'd290),
	  .guarded(1'd1)) macMetaAndIpUdpStream_macExtractor_dataStreamBuf(.RST(RST_N),
									   .CLK(CLK),
									   .D_IN(macMetaAndIpUdpStream_macExtractor_dataStreamBuf_D_IN),
									   .ENQ(macMetaAndIpUdpStream_macExtractor_dataStreamBuf_ENQ),
									   .DEQ(macMetaAndIpUdpStream_macExtractor_dataStreamBuf_DEQ),
									   .CLR(macMetaAndIpUdpStream_macExtractor_dataStreamBuf_CLR),
									   .D_OUT(macMetaAndIpUdpStream_macExtractor_dataStreamBuf_D_OUT),
									   .FULL_N(macMetaAndIpUdpStream_macExtractor_dataStreamBuf_FULL_N),
									   .EMPTY_N(macMetaAndIpUdpStream_macExtractor_dataStreamBuf_EMPTY_N));

  // submodule macMetaAndIpUdpStream_macExtractor_extractDataBuf
  FIFO2 #(.width(32'd112),
	  .guarded(1'd1)) macMetaAndIpUdpStream_macExtractor_extractDataBuf(.RST(RST_N),
									    .CLK(CLK),
									    .D_IN(macMetaAndIpUdpStream_macExtractor_extractDataBuf_D_IN),
									    .ENQ(macMetaAndIpUdpStream_macExtractor_extractDataBuf_ENQ),
									    .DEQ(macMetaAndIpUdpStream_macExtractor_extractDataBuf_DEQ),
									    .CLR(macMetaAndIpUdpStream_macExtractor_extractDataBuf_CLR),
									    .D_OUT(macMetaAndIpUdpStream_macExtractor_extractDataBuf_D_OUT),
									    .FULL_N(macMetaAndIpUdpStream_macExtractor_extractDataBuf_FULL_N),
									    .EMPTY_N(macMetaAndIpUdpStream_macExtractor_extractDataBuf_EMPTY_N));

  // submodule macMetaAndIpUdpStream_macMetaDataOutBuf
  FIFO2 #(.width(32'd64),
	  .guarded(1'd1)) macMetaAndIpUdpStream_macMetaDataOutBuf(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(macMetaAndIpUdpStream_macMetaDataOutBuf_D_IN),
								  .ENQ(macMetaAndIpUdpStream_macMetaDataOutBuf_ENQ),
								  .DEQ(macMetaAndIpUdpStream_macMetaDataOutBuf_DEQ),
								  .CLR(macMetaAndIpUdpStream_macMetaDataOutBuf_CLR),
								  .D_OUT(macMetaAndIpUdpStream_macMetaDataOutBuf_D_OUT),
								  .FULL_N(macMetaAndIpUdpStream_macMetaDataOutBuf_FULL_N),
								  .EMPTY_N(macMetaAndIpUdpStream_macMetaDataOutBuf_EMPTY_N));

  // submodule macStream_dataStreamOutBuf
  FIFO2 #(.width(32'd290),
	  .guarded(1'd1)) macStream_dataStreamOutBuf(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(macStream_dataStreamOutBuf_D_IN),
						     .ENQ(macStream_dataStreamOutBuf_ENQ),
						     .DEQ(macStream_dataStreamOutBuf_DEQ),
						     .CLR(macStream_dataStreamOutBuf_CLR),
						     .D_OUT(macStream_dataStreamOutBuf_D_OUT),
						     .FULL_N(macStream_dataStreamOutBuf_FULL_N),
						     .EMPTY_N(macStream_dataStreamOutBuf_EMPTY_N));

  // submodule udpMetaAndLoadStream_dataStreamOutBuf
  FIFO2 #(.width(32'd290),
	  .guarded(1'd1)) udpMetaAndLoadStream_dataStreamOutBuf(.RST(RST_N),
								.CLK(CLK),
								.D_IN(udpMetaAndLoadStream_dataStreamOutBuf_D_IN),
								.ENQ(udpMetaAndLoadStream_dataStreamOutBuf_ENQ),
								.DEQ(udpMetaAndLoadStream_dataStreamOutBuf_DEQ),
								.CLR(udpMetaAndLoadStream_dataStreamOutBuf_CLR),
								.D_OUT(udpMetaAndLoadStream_dataStreamOutBuf_D_OUT),
								.FULL_N(udpMetaAndLoadStream_dataStreamOutBuf_FULL_N),
								.EMPTY_N(udpMetaAndLoadStream_dataStreamOutBuf_EMPTY_N));

  // submodule udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf
  FIFO2 #(.width(32'd290),
	  .guarded(1'd1)) udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf(.RST(RST_N),
									    .CLK(CLK),
									    .D_IN(udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_D_IN),
									    .ENQ(udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_ENQ),
									    .DEQ(udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_DEQ),
									    .CLR(udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_CLR),
									    .D_OUT(udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_D_OUT),
									    .FULL_N(udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_FULL_N),
									    .EMPTY_N(udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_EMPTY_N));

  // submodule udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf
  FIFO2 #(.width(32'd224),
	  .guarded(1'd1)) udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf(.RST(RST_N),
									     .CLK(CLK),
									     .D_IN(udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_IN),
									     .ENQ(udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_ENQ),
									     .DEQ(udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_DEQ),
									     .CLR(udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_CLR),
									     .D_OUT(udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT),
									     .FULL_N(udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_FULL_N),
									     .EMPTY_N(udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_EMPTY_N));

  // submodule udpMetaAndLoadStream_metaDataOutBuf
  FIFO2 #(.width(32'd80),
	  .guarded(1'd1)) udpMetaAndLoadStream_metaDataOutBuf(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(udpMetaAndLoadStream_metaDataOutBuf_D_IN),
							      .ENQ(udpMetaAndLoadStream_metaDataOutBuf_ENQ),
							      .DEQ(udpMetaAndLoadStream_metaDataOutBuf_DEQ),
							      .CLR(udpMetaAndLoadStream_metaDataOutBuf_CLR),
							      .D_OUT(udpMetaAndLoadStream_metaDataOutBuf_D_OUT),
							      .FULL_N(udpMetaAndLoadStream_metaDataOutBuf_FULL_N),
							      .EMPTY_N(udpMetaAndLoadStream_metaDataOutBuf_EMPTY_N));

  // rule RL_macStream_doStreamReduction
  assign WILL_FIRE_RL_macStream_doStreamReduction =
	     macStream_dataStreamOutBuf_FULL_N &&
	     (macStream_extraDataStreamBuf[290] || axiStreamInRxBuf_EMPTY_N) ;

  // rule RL_macMetaAndIpUdpStream_doCheck
  assign WILL_FIRE_RL_macMetaAndIpUdpStream_doCheck =
	     macMetaAndIpUdpStream_macExtractor_extractData_ETC___d114 &&
	     macMetaAndIpUdpStream_extState == 2'd0 ;

  // rule RL_macMetaAndIpUdpStream_doPass
  assign WILL_FIRE_RL_macMetaAndIpUdpStream_doPass =
	     macMetaAndIpUdpStream_macExtractor_dataStreamBuf_EMPTY_N &&
	     macMetaAndIpUdpStream_dataStreamOutBuf_FULL_N &&
	     macMetaAndIpUdpStream_extState == 2'd1 ;

  // rule RL_macMetaAndIpUdpStream_doThrow
  assign WILL_FIRE_RL_macMetaAndIpUdpStream_doThrow =
	     macMetaAndIpUdpStream_macExtractor_dataStreamBuf_EMPTY_N &&
	     macMetaAndIpUdpStream_extState == 2'd2 ;

  // rule RL_macMetaAndIpUdpStream_macExtractor_doExtraction
  always@(macMetaAndIpUdpStream_macExtractor_extractState or
	  macMetaAndIpUdpStream_macExtractor_dataStreamBuf_FULL_N or
	  macStream_dataStreamOutBuf_EMPTY_N or
	  macMetaAndIpUdpStream_macExtractor_extractDataBuf_FULL_N)
  begin
    case (macMetaAndIpUdpStream_macExtractor_extractState)
      2'd0:
	  WILL_FIRE_RL_macMetaAndIpUdpStream_macExtractor_doExtraction =
	      macStream_dataStreamOutBuf_EMPTY_N &&
	      macMetaAndIpUdpStream_macExtractor_extractDataBuf_FULL_N;
      2'd1:
	  WILL_FIRE_RL_macMetaAndIpUdpStream_macExtractor_doExtraction =
	      macStream_dataStreamOutBuf_EMPTY_N &&
	      macMetaAndIpUdpStream_macExtractor_dataStreamBuf_FULL_N;
      default: WILL_FIRE_RL_macMetaAndIpUdpStream_macExtractor_doExtraction =
		   macMetaAndIpUdpStream_macExtractor_extractState != 2'd2 ||
		   macMetaAndIpUdpStream_macExtractor_dataStreamBuf_FULL_N;
    endcase
  end

  // rule RL_udpMetaAndLoadStream_doCheck
  assign WILL_FIRE_RL_udpMetaAndLoadStream_doCheck =
	     udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_EMPTY_N &&
	     (ipChecksum__h10192 != 16'd0 ||
	      !udpMetaAndLoadStream_ipUdpExtractor_extractDat_ETC___d265 ||
	      udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[151:144] !=
	      8'd17 ||
	      udpMetaAndLoadStream_metaDataOutBuf_FULL_N) &&
	     udpMetaAndLoadStream_extState == 2'd0 ;

  // rule RL_udpMetaAndLoadStream_doPass
  assign WILL_FIRE_RL_udpMetaAndLoadStream_doPass =
	     udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_EMPTY_N &&
	     udpMetaAndLoadStream_dataStreamOutBuf_FULL_N &&
	     udpMetaAndLoadStream_extState == 2'd1 ;

  // rule RL_udpMetaAndLoadStream_doThrow
  assign WILL_FIRE_RL_udpMetaAndLoadStream_doThrow =
	     udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_EMPTY_N &&
	     udpMetaAndLoadStream_extState == 2'd2 ;

  // rule RL_udpMetaAndLoadStream_ipUdpExtractor_doExtraction
  always@(udpMetaAndLoadStream_ipUdpExtractor_extractState or
	  udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_FULL_N or
	  macMetaAndIpUdpStream_dataStreamOutBuf_EMPTY_N or
	  udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_FULL_N)
  begin
    case (udpMetaAndLoadStream_ipUdpExtractor_extractState)
      2'd0:
	  WILL_FIRE_RL_udpMetaAndLoadStream_ipUdpExtractor_doExtraction =
	      macMetaAndIpUdpStream_dataStreamOutBuf_EMPTY_N &&
	      udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_FULL_N;
      2'd1:
	  WILL_FIRE_RL_udpMetaAndLoadStream_ipUdpExtractor_doExtraction =
	      macMetaAndIpUdpStream_dataStreamOutBuf_EMPTY_N &&
	      udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_FULL_N;
      default: WILL_FIRE_RL_udpMetaAndLoadStream_ipUdpExtractor_doExtraction =
		   udpMetaAndLoadStream_ipUdpExtractor_extractState != 2'd2 ||
		   udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_FULL_N;
    endcase
  end

  // inputs to muxes for submodule ports
  assign MUX_macMetaAndIpUdpStream_extState_write_1__PSEL_1 =
	     WILL_FIRE_RL_macMetaAndIpUdpStream_doThrow ||
	     WILL_FIRE_RL_macMetaAndIpUdpStream_doPass ;
  assign MUX_macMetaAndIpUdpStream_extState_write_1__SEL_1 =
	     MUX_macMetaAndIpUdpStream_extState_write_1__PSEL_1 &&
	     macMetaAndIpUdpStream_macExtractor_dataStreamBuf_D_OUT[0] ;
  assign MUX_udpMetaAndLoadStream_extState_write_1__PSEL_1 =
	     WILL_FIRE_RL_udpMetaAndLoadStream_doThrow ||
	     WILL_FIRE_RL_udpMetaAndLoadStream_doPass ;
  assign MUX_udpMetaAndLoadStream_extState_write_1__SEL_1 =
	     MUX_udpMetaAndLoadStream_extState_write_1__PSEL_1 &&
	     udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_D_OUT[0] ;
  assign MUX_macMetaAndIpUdpStream_extState_write_1__VAL_2 =
	     (macMetaAndIpUdpStream_macExtractor_extractDataBuf_D_OUT[15:0] ==
	      16'd2054 ||
	      macMetaAndIpUdpStream_macExtractor_extractDataBuf_D_OUT[15:0] ==
	      16'd2048 &&
	      macMetaAndIpUdpStream_macExtractor_extractData_ETC___d108) ?
	       2'd1 :
	       2'd2 ;
  assign MUX_udpMetaAndLoadStream_extState_write_1__VAL_2 =
	     (ipChecksum__h10192 == 16'd0 &&
	      udpMetaAndLoadStream_ipUdpExtractor_extractDat_ETC___d265 &&
	      udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[151:144] ==
	      8'd17) ?
	       2'd1 :
	       2'd2 ;

  // register macMetaAndIpUdpStream_extState
  assign macMetaAndIpUdpStream_extState_D_IN =
	     MUX_macMetaAndIpUdpStream_extState_write_1__SEL_1 ?
	       2'd0 :
	       MUX_macMetaAndIpUdpStream_extState_write_1__VAL_2 ;
  assign macMetaAndIpUdpStream_extState_EN =
	     (WILL_FIRE_RL_macMetaAndIpUdpStream_doThrow ||
	      WILL_FIRE_RL_macMetaAndIpUdpStream_doPass) &&
	     macMetaAndIpUdpStream_macExtractor_dataStreamBuf_D_OUT[0] ||
	     WILL_FIRE_RL_macMetaAndIpUdpStream_doCheck ;

  // register macMetaAndIpUdpStream_macExtractor_extractState
  always@(macMetaAndIpUdpStream_macExtractor_extractState or
	  macStream_dataStreamOutBuf_D_OUT)
  begin
    case (macMetaAndIpUdpStream_macExtractor_extractState)
      2'd0:
	  macMetaAndIpUdpStream_macExtractor_extractState_D_IN =
	      macStream_dataStreamOutBuf_D_OUT[0] ? 2'd2 : 2'd1;
      2'd1:
	  macMetaAndIpUdpStream_macExtractor_extractState_D_IN =
	      (macStream_dataStreamOutBuf_D_OUT[33:16] == 18'd0) ?
		2'd0 :
		2'd2;
      default: macMetaAndIpUdpStream_macExtractor_extractState_D_IN = 2'd0;
    endcase
  end
  assign macMetaAndIpUdpStream_macExtractor_extractState_EN =
	     WILL_FIRE_RL_macMetaAndIpUdpStream_macExtractor_doExtraction &&
	     (macMetaAndIpUdpStream_macExtractor_extractState == 2'd0 &&
	      (macStream_dataStreamOutBuf_D_OUT[33:16] != 18'd0 ||
	       !macStream_dataStreamOutBuf_D_OUT[0]) ||
	      macMetaAndIpUdpStream_macExtractor_extractState == 2'd1 &&
	      macStream_dataStreamOutBuf_D_OUT[0] ||
	      macMetaAndIpUdpStream_macExtractor_extractState == 2'd2) ;

  // register macMetaAndIpUdpStream_macExtractor_isFirstReg
  assign macMetaAndIpUdpStream_macExtractor_isFirstReg_D_IN =
	     macMetaAndIpUdpStream_macExtractor_extractState == 2'd0 ;
  assign macMetaAndIpUdpStream_macExtractor_isFirstReg_EN =
	     WILL_FIRE_RL_macMetaAndIpUdpStream_macExtractor_doExtraction &&
	     (macMetaAndIpUdpStream_macExtractor_extractState == 2'd0 ||
	      macMetaAndIpUdpStream_macExtractor_extractState == 2'd1) ;

  // register macMetaAndIpUdpStream_macExtractor_residueBuf
  assign macMetaAndIpUdpStream_macExtractor_residueBuf_D_IN =
	     macStream_dataStreamOutBuf_D_OUT[289:146] ;
  assign macMetaAndIpUdpStream_macExtractor_residueBuf_EN =
	     WILL_FIRE_RL_macMetaAndIpUdpStream_macExtractor_doExtraction &&
	     (macMetaAndIpUdpStream_macExtractor_extractState == 2'd0 ||
	      macMetaAndIpUdpStream_macExtractor_extractState == 2'd1) ;

  // register macMetaAndIpUdpStream_macExtractor_residueByteEnBuf
  assign macMetaAndIpUdpStream_macExtractor_residueByteEnBuf_D_IN =
	     macStream_dataStreamOutBuf_D_OUT[33:16] ;
  assign macMetaAndIpUdpStream_macExtractor_residueByteEnBuf_EN =
	     WILL_FIRE_RL_macMetaAndIpUdpStream_macExtractor_doExtraction &&
	     (macMetaAndIpUdpStream_macExtractor_extractState == 2'd0 ||
	      macMetaAndIpUdpStream_macExtractor_extractState == 2'd1) ;

  // register macStream_extraDataStreamBuf
  assign macStream_extraDataStreamBuf_D_IN =
	     { !macStream_extraDataStreamBuf[290],
	       axiStreamInRxBuf_D_OUT[577:322],
	       axiStreamInRxBuf_D_OUT[65:34],
	       1'd0,
	       axiStreamInRxBuf_D_OUT[0] } ;
  assign macStream_extraDataStreamBuf_EN =
	     WILL_FIRE_RL_macStream_doStreamReduction &&
	     (macStream_extraDataStreamBuf[290] ||
	      axiStreamInRxBuf_D_OUT[65:34] != 32'd0) ;

  // register macStream_isFirstReg
  assign macStream_isFirstReg_D_IN = axiStreamInRxBuf_D_OUT[0] ;
  assign macStream_isFirstReg_EN =
	     WILL_FIRE_RL_macStream_doStreamReduction &&
	     !macStream_extraDataStreamBuf[290] ;

  // register udpConfigReg
  assign udpConfigReg_D_IN = { 1'd1, udpConfig_put } ;
  assign udpConfigReg_EN = EN_udpConfig_put ;

  // register udpMetaAndLoadStream_extState
  assign udpMetaAndLoadStream_extState_D_IN =
	     MUX_udpMetaAndLoadStream_extState_write_1__SEL_1 ?
	       2'd0 :
	       MUX_udpMetaAndLoadStream_extState_write_1__VAL_2 ;
  assign udpMetaAndLoadStream_extState_EN =
	     (WILL_FIRE_RL_udpMetaAndLoadStream_doThrow ||
	      WILL_FIRE_RL_udpMetaAndLoadStream_doPass) &&
	     udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_D_OUT[0] ||
	     WILL_FIRE_RL_udpMetaAndLoadStream_doCheck ;

  // register udpMetaAndLoadStream_ipUdpExtractor_extractState
  always@(udpMetaAndLoadStream_ipUdpExtractor_extractState or
	  macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT)
  begin
    case (udpMetaAndLoadStream_ipUdpExtractor_extractState)
      2'd0:
	  udpMetaAndLoadStream_ipUdpExtractor_extractState_D_IN =
	      macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[0] ? 2'd2 : 2'd1;
      2'd1:
	  udpMetaAndLoadStream_ipUdpExtractor_extractState_D_IN =
	      (macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[33:30] == 4'd0) ?
		2'd0 :
		2'd2;
      default: udpMetaAndLoadStream_ipUdpExtractor_extractState_D_IN = 2'd0;
    endcase
  end
  assign udpMetaAndLoadStream_ipUdpExtractor_extractState_EN =
	     WILL_FIRE_RL_udpMetaAndLoadStream_ipUdpExtractor_doExtraction &&
	     (udpMetaAndLoadStream_ipUdpExtractor_extractState == 2'd0 &&
	      (macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[33:30] != 4'd0 ||
	       !macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[0]) ||
	      udpMetaAndLoadStream_ipUdpExtractor_extractState == 2'd1 &&
	      macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[0] ||
	      udpMetaAndLoadStream_ipUdpExtractor_extractState == 2'd2) ;

  // register udpMetaAndLoadStream_ipUdpExtractor_isFirstReg
  assign udpMetaAndLoadStream_ipUdpExtractor_isFirstReg_D_IN =
	     udpMetaAndLoadStream_ipUdpExtractor_extractState == 2'd0 ;
  assign udpMetaAndLoadStream_ipUdpExtractor_isFirstReg_EN =
	     WILL_FIRE_RL_udpMetaAndLoadStream_ipUdpExtractor_doExtraction &&
	     (udpMetaAndLoadStream_ipUdpExtractor_extractState == 2'd0 ||
	      udpMetaAndLoadStream_ipUdpExtractor_extractState == 2'd1) ;

  // register udpMetaAndLoadStream_ipUdpExtractor_residueBuf
  assign udpMetaAndLoadStream_ipUdpExtractor_residueBuf_D_IN =
	     macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[289:258] ;
  assign udpMetaAndLoadStream_ipUdpExtractor_residueBuf_EN =
	     WILL_FIRE_RL_udpMetaAndLoadStream_ipUdpExtractor_doExtraction &&
	     (udpMetaAndLoadStream_ipUdpExtractor_extractState == 2'd0 ||
	      udpMetaAndLoadStream_ipUdpExtractor_extractState == 2'd1) ;

  // register udpMetaAndLoadStream_ipUdpExtractor_residueByteEnBuf
  assign udpMetaAndLoadStream_ipUdpExtractor_residueByteEnBuf_D_IN =
	     macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[33:30] ;
  assign udpMetaAndLoadStream_ipUdpExtractor_residueByteEnBuf_EN =
	     WILL_FIRE_RL_udpMetaAndLoadStream_ipUdpExtractor_doExtraction &&
	     (udpMetaAndLoadStream_ipUdpExtractor_extractState == 2'd0 ||
	      udpMetaAndLoadStream_ipUdpExtractor_extractState == 2'd1) ;

  // submodule axiStreamInRxBuf
  assign axiStreamInRxBuf_D_IN = axiStreamInRx_put ;
  assign axiStreamInRxBuf_ENQ = EN_axiStreamInRx_put ;
  assign axiStreamInRxBuf_DEQ =
	     WILL_FIRE_RL_macStream_doStreamReduction &&
	     !macStream_extraDataStreamBuf[290] ;
  assign axiStreamInRxBuf_CLR = 1'b0 ;

  // submodule macMetaAndIpUdpStream_dataStreamOutBuf
  assign macMetaAndIpUdpStream_dataStreamOutBuf_D_IN =
	     macMetaAndIpUdpStream_macExtractor_dataStreamBuf_D_OUT ;
  assign macMetaAndIpUdpStream_dataStreamOutBuf_ENQ =
	     WILL_FIRE_RL_macMetaAndIpUdpStream_doPass ;
  assign macMetaAndIpUdpStream_dataStreamOutBuf_DEQ =
	     WILL_FIRE_RL_udpMetaAndLoadStream_ipUdpExtractor_doExtraction &&
	     (udpMetaAndLoadStream_ipUdpExtractor_extractState == 2'd0 ||
	      udpMetaAndLoadStream_ipUdpExtractor_extractState == 2'd1) ;
  assign macMetaAndIpUdpStream_dataStreamOutBuf_CLR = 1'b0 ;

  // submodule macMetaAndIpUdpStream_macExtractor_dataStreamBuf
  assign macMetaAndIpUdpStream_macExtractor_dataStreamBuf_D_IN =
	     { (macMetaAndIpUdpStream_macExtractor_extractState == 2'd1) ?
		 macStream_dataStreamOutBuf_D_OUT[145:34] :
		 112'd0,
	       macMetaAndIpUdpStream_macExtractor_residueBuf,
	       (macMetaAndIpUdpStream_macExtractor_extractState == 2'd1) ?
		 macStream_dataStreamOutBuf_D_OUT[15:2] :
		 14'd0,
	       macMetaAndIpUdpStream_macExtractor_residueByteEnBuf,
	       macMetaAndIpUdpStream_macExtractor_isFirstReg,
	       macMetaAndIpUdpStream_macExtractor_extractState != 2'd1 ||
	       macStream_dataStreamOutBuf_D_OUT[0] &&
	       macStream_dataStreamOutBuf_D_OUT[33:16] == 18'd0 } ;
  assign macMetaAndIpUdpStream_macExtractor_dataStreamBuf_ENQ =
	     WILL_FIRE_RL_macMetaAndIpUdpStream_macExtractor_doExtraction &&
	     (macMetaAndIpUdpStream_macExtractor_extractState == 2'd1 ||
	      macMetaAndIpUdpStream_macExtractor_extractState == 2'd2) ;
  assign macMetaAndIpUdpStream_macExtractor_dataStreamBuf_DEQ =
	     MUX_macMetaAndIpUdpStream_extState_write_1__PSEL_1 ;
  assign macMetaAndIpUdpStream_macExtractor_dataStreamBuf_CLR = 1'b0 ;

  // submodule macMetaAndIpUdpStream_macExtractor_extractDataBuf
  assign macMetaAndIpUdpStream_macExtractor_extractDataBuf_D_IN =
	     { x__h1475, x__h3627, x_ethType__h1481 } ;
  assign macMetaAndIpUdpStream_macExtractor_extractDataBuf_ENQ =
	     WILL_FIRE_RL_macMetaAndIpUdpStream_macExtractor_doExtraction &&
	     macMetaAndIpUdpStream_macExtractor_extractState == 2'd0 ;
  assign macMetaAndIpUdpStream_macExtractor_extractDataBuf_DEQ =
	     WILL_FIRE_RL_macMetaAndIpUdpStream_doCheck ;
  assign macMetaAndIpUdpStream_macExtractor_extractDataBuf_CLR = 1'b0 ;

  // submodule macMetaAndIpUdpStream_macMetaDataOutBuf
  assign macMetaAndIpUdpStream_macMetaDataOutBuf_D_IN =
	     macMetaAndIpUdpStream_macExtractor_extractDataBuf_D_OUT[63:0] ;
  assign macMetaAndIpUdpStream_macMetaDataOutBuf_ENQ =
	     WILL_FIRE_RL_macMetaAndIpUdpStream_doCheck &&
	     (macMetaAndIpUdpStream_macExtractor_extractDataBuf_D_OUT[15:0] ==
	      16'd2054 ||
	      macMetaAndIpUdpStream_macExtractor_extractDataBuf_D_OUT[15:0] ==
	      16'd2048 &&
	      macMetaAndIpUdpStream_macExtractor_extractData_ETC___d108) ;
  assign macMetaAndIpUdpStream_macMetaDataOutBuf_DEQ =
	     EN_macMetaDataOutRx_deq ;
  assign macMetaAndIpUdpStream_macMetaDataOutBuf_CLR = 1'b0 ;

  // submodule macStream_dataStreamOutBuf
  assign macStream_dataStreamOutBuf_D_IN =
	     macStream_extraDataStreamBuf[290] ?
	       macStream_extraDataStreamBuf[289:0] :
	       { axiStreamInRxBuf_D_OUT[321:66],
		 axiStreamInRxBuf_D_OUT[33:2],
		 macStream_isFirstReg,
		 axiStreamInRxBuf_D_OUT[65:34] == 32'd0 } ;
  assign macStream_dataStreamOutBuf_ENQ =
	     WILL_FIRE_RL_macStream_doStreamReduction ;
  assign macStream_dataStreamOutBuf_DEQ =
	     WILL_FIRE_RL_macMetaAndIpUdpStream_macExtractor_doExtraction &&
	     (macMetaAndIpUdpStream_macExtractor_extractState == 2'd0 ||
	      macMetaAndIpUdpStream_macExtractor_extractState == 2'd1) ;
  assign macStream_dataStreamOutBuf_CLR = 1'b0 ;

  // submodule udpMetaAndLoadStream_dataStreamOutBuf
  assign udpMetaAndLoadStream_dataStreamOutBuf_D_IN =
	     udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_D_OUT ;
  assign udpMetaAndLoadStream_dataStreamOutBuf_ENQ =
	     WILL_FIRE_RL_udpMetaAndLoadStream_doPass ;
  assign udpMetaAndLoadStream_dataStreamOutBuf_DEQ = EN_dataStreamOutRx_deq ;
  assign udpMetaAndLoadStream_dataStreamOutBuf_CLR = 1'b0 ;

  // submodule udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf
  assign udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_D_IN =
	     { (udpMetaAndLoadStream_ipUdpExtractor_extractState == 2'd1) ?
		 macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[257:34] :
		 224'd0,
	       udpMetaAndLoadStream_ipUdpExtractor_residueBuf,
	       (udpMetaAndLoadStream_ipUdpExtractor_extractState == 2'd1) ?
		 macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[29:2] :
		 28'd0,
	       udpMetaAndLoadStream_ipUdpExtractor_residueByteEnBuf,
	       udpMetaAndLoadStream_ipUdpExtractor_isFirstReg,
	       udpMetaAndLoadStream_ipUdpExtractor_extractState != 2'd1 ||
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[0] &&
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[33:30] == 4'd0 } ;
  assign udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_ENQ =
	     WILL_FIRE_RL_udpMetaAndLoadStream_ipUdpExtractor_doExtraction &&
	     (udpMetaAndLoadStream_ipUdpExtractor_extractState == 2'd1 ||
	      udpMetaAndLoadStream_ipUdpExtractor_extractState == 2'd2) ;
  assign udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_DEQ =
	     MUX_udpMetaAndLoadStream_extState_write_1__PSEL_1 ;
  assign udpMetaAndLoadStream_ipUdpExtractor_dataStreamBuf_CLR = 1'b0 ;

  // submodule udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf
  assign udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_IN =
	     { macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[41:34],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[49:42],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[57:50],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[65:58],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[73:66],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[81:74],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[89:82],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[97:90],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[105:98],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[113:106],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[121:114],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[129:122],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[137:130],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[145:138],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[153:146],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[161:154],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[169:162],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[177:170],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[185:178],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[193:186],
	       x__h9662,
	       x__h9674,
	       x__h9678,
	       x__h9682 } ;
  assign udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_ENQ =
	     WILL_FIRE_RL_udpMetaAndLoadStream_ipUdpExtractor_doExtraction &&
	     udpMetaAndLoadStream_ipUdpExtractor_extractState == 2'd0 ;
  assign udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_DEQ =
	     WILL_FIRE_RL_udpMetaAndLoadStream_doCheck ;
  assign udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_CLR = 1'b0 ;

  // submodule udpMetaAndLoadStream_metaDataOutBuf
  assign udpMetaAndLoadStream_metaDataOutBuf_D_IN =
	     { x__h11090,
	       udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[127:96],
	       udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[47:32],
	       udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[63:48] } ;
  assign udpMetaAndLoadStream_metaDataOutBuf_ENQ =
	     WILL_FIRE_RL_udpMetaAndLoadStream_doCheck &&
	     ipChecksum__h10192 == 16'd0 &&
	     udpMetaAndLoadStream_ipUdpExtractor_extractDat_ETC___d265 &&
	     udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[151:144] ==
	     8'd17 ;
  assign udpMetaAndLoadStream_metaDataOutBuf_DEQ = EN_udpMetaDataOutRx_deq ;
  assign udpMetaAndLoadStream_metaDataOutBuf_CLR = 1'b0 ;

  // remaining internal signals
  assign _theResult____h10199 =
	     { 4'd0,
	       udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[79:64] } +
	     { 4'd0,
	       udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[95:80] } +
	     { 4'd0,
	       udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[111:96] } +
	     { 4'd0,
	       udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[127:112] } +
	     { 4'd0,
	       udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[143:128] } +
	     { 4'd0,
	       udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[159:144] } +
	     { 4'd0,
	       udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[175:160] } +
	     { 4'd0,
	       udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[191:176] } +
	     { 4'd0,
	       udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[207:192] } +
	     { 4'd0,
	       udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[223:208] } ;
  assign ipChecksum__h10192 = ~temp__h10196 ;
  assign macMetaAndIpUdpStream_macExtractor_extractData_ETC___d108 =
	     macMetaAndIpUdpStream_macExtractor_extractDataBuf_D_OUT[111:64] ==
	     udpConfigReg[143:96] ;
  assign macMetaAndIpUdpStream_macExtractor_extractData_ETC___d114 =
	     macMetaAndIpUdpStream_macExtractor_extractDataBuf_EMPTY_N &&
	     (macMetaAndIpUdpStream_macExtractor_extractDataBuf_D_OUT[15:0] !=
	      16'd2054 &&
	      (macMetaAndIpUdpStream_macExtractor_extractDataBuf_D_OUT[15:0] !=
	       16'd2048 ||
	       !macMetaAndIpUdpStream_macExtractor_extractData_ETC___d108) ||
	      macMetaAndIpUdpStream_macMetaDataOutBuf_FULL_N) ;
  assign temp__h10196 =
	     _theResult____h10199[15:0] +
	     { 12'd0, _theResult____h10199[19:16] } ;
  assign udpMetaAndLoadStream_ipUdpExtractor_extractDat_ETC___d265 =
	     udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[95:64] ==
	     udpConfigReg[95:64] ;
  assign x__h11090 =
	     udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[31:16] -
	     16'd8 ;
  assign x__h1475 =
	     { macStream_dataStreamOutBuf_D_OUT[41:34],
	       macStream_dataStreamOutBuf_D_OUT[49:42],
	       macStream_dataStreamOutBuf_D_OUT[57:50],
	       macStream_dataStreamOutBuf_D_OUT[65:58],
	       macStream_dataStreamOutBuf_D_OUT[73:66],
	       macStream_dataStreamOutBuf_D_OUT[81:74] } ;
  assign x__h3627 =
	     { macStream_dataStreamOutBuf_D_OUT[89:82],
	       macStream_dataStreamOutBuf_D_OUT[97:90],
	       macStream_dataStreamOutBuf_D_OUT[105:98],
	       macStream_dataStreamOutBuf_D_OUT[113:106],
	       macStream_dataStreamOutBuf_D_OUT[121:114],
	       macStream_dataStreamOutBuf_D_OUT[129:122] } ;
  assign x__h9662 =
	     { macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[201:194],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[209:202] } ;
  assign x__h9674 =
	     { macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[217:210],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[225:218] } ;
  assign x__h9678 =
	     { macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[233:226],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[241:234] } ;
  assign x__h9682 =
	     { macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[249:242],
	       macMetaAndIpUdpStream_dataStreamOutBuf_D_OUT[257:250] } ;
  assign x_ethType__h1481 =
	     { macStream_dataStreamOutBuf_D_OUT[137:130],
	       macStream_dataStreamOutBuf_D_OUT[145:138] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        macMetaAndIpUdpStream_extState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	macMetaAndIpUdpStream_macExtractor_extractState <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	macMetaAndIpUdpStream_macExtractor_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	macStream_extraDataStreamBuf <= `BSV_ASSIGNMENT_DELAY
	    291'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	macStream_isFirstReg <= `BSV_ASSIGNMENT_DELAY 1'd1;
	udpConfigReg <= `BSV_ASSIGNMENT_DELAY
	    145'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	udpMetaAndLoadStream_extState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	udpMetaAndLoadStream_ipUdpExtractor_extractState <= `BSV_ASSIGNMENT_DELAY
	    2'd0;
	udpMetaAndLoadStream_ipUdpExtractor_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
      end
    else
      begin
        if (macMetaAndIpUdpStream_extState_EN)
	  macMetaAndIpUdpStream_extState <= `BSV_ASSIGNMENT_DELAY
	      macMetaAndIpUdpStream_extState_D_IN;
	if (macMetaAndIpUdpStream_macExtractor_extractState_EN)
	  macMetaAndIpUdpStream_macExtractor_extractState <= `BSV_ASSIGNMENT_DELAY
	      macMetaAndIpUdpStream_macExtractor_extractState_D_IN;
	if (macMetaAndIpUdpStream_macExtractor_isFirstReg_EN)
	  macMetaAndIpUdpStream_macExtractor_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	      macMetaAndIpUdpStream_macExtractor_isFirstReg_D_IN;
	if (macStream_extraDataStreamBuf_EN)
	  macStream_extraDataStreamBuf <= `BSV_ASSIGNMENT_DELAY
	      macStream_extraDataStreamBuf_D_IN;
	if (macStream_isFirstReg_EN)
	  macStream_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	      macStream_isFirstReg_D_IN;
	if (udpConfigReg_EN)
	  udpConfigReg <= `BSV_ASSIGNMENT_DELAY udpConfigReg_D_IN;
	if (udpMetaAndLoadStream_extState_EN)
	  udpMetaAndLoadStream_extState <= `BSV_ASSIGNMENT_DELAY
	      udpMetaAndLoadStream_extState_D_IN;
	if (udpMetaAndLoadStream_ipUdpExtractor_extractState_EN)
	  udpMetaAndLoadStream_ipUdpExtractor_extractState <= `BSV_ASSIGNMENT_DELAY
	      udpMetaAndLoadStream_ipUdpExtractor_extractState_D_IN;
	if (udpMetaAndLoadStream_ipUdpExtractor_isFirstReg_EN)
	  udpMetaAndLoadStream_ipUdpExtractor_isFirstReg <= `BSV_ASSIGNMENT_DELAY
	      udpMetaAndLoadStream_ipUdpExtractor_isFirstReg_D_IN;
      end
    if (macMetaAndIpUdpStream_macExtractor_residueBuf_EN)
      macMetaAndIpUdpStream_macExtractor_residueBuf <= `BSV_ASSIGNMENT_DELAY
	  macMetaAndIpUdpStream_macExtractor_residueBuf_D_IN;
    if (macMetaAndIpUdpStream_macExtractor_residueByteEnBuf_EN)
      macMetaAndIpUdpStream_macExtractor_residueByteEnBuf <= `BSV_ASSIGNMENT_DELAY
	  macMetaAndIpUdpStream_macExtractor_residueByteEnBuf_D_IN;
    if (udpMetaAndLoadStream_ipUdpExtractor_residueBuf_EN)
      udpMetaAndLoadStream_ipUdpExtractor_residueBuf <= `BSV_ASSIGNMENT_DELAY
	  udpMetaAndLoadStream_ipUdpExtractor_residueBuf_D_IN;
    if (udpMetaAndLoadStream_ipUdpExtractor_residueByteEnBuf_EN)
      udpMetaAndLoadStream_ipUdpExtractor_residueByteEnBuf <= `BSV_ASSIGNMENT_DELAY
	  udpMetaAndLoadStream_ipUdpExtractor_residueByteEnBuf_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    macMetaAndIpUdpStream_extState = 2'h2;
    macMetaAndIpUdpStream_macExtractor_extractState = 2'h2;
    macMetaAndIpUdpStream_macExtractor_isFirstReg = 1'h0;
    macMetaAndIpUdpStream_macExtractor_residueBuf =
	144'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    macMetaAndIpUdpStream_macExtractor_residueByteEnBuf = 18'h2AAAA;
    macStream_extraDataStreamBuf =
	291'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    macStream_isFirstReg = 1'h0;
    udpConfigReg = 145'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    udpMetaAndLoadStream_extState = 2'h2;
    udpMetaAndLoadStream_ipUdpExtractor_extractState = 2'h2;
    udpMetaAndLoadStream_ipUdpExtractor_isFirstReg = 1'h0;
    udpMetaAndLoadStream_ipUdpExtractor_residueBuf = 32'hAAAAAAAA;
    udpMetaAndLoadStream_ipUdpExtractor_residueByteEnBuf = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macMetaAndIpUdpStream_doCheck &&
	  (macMetaAndIpUdpStream_macExtractor_extractDataBuf_D_OUT[15:0] ==
	   16'd2054 ||
	   macMetaAndIpUdpStream_macExtractor_extractDataBuf_D_OUT[15:0] ==
	   16'd2048 &&
	   macMetaAndIpUdpStream_macExtractor_extractData_ETC___d108))
	$display("Mac Extractor Mac Addr Check: Pass");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macMetaAndIpUdpStream_doCheck &&
	  macMetaAndIpUdpStream_macExtractor_extractDataBuf_D_OUT[15:0] !=
	  16'd2054 &&
	  (macMetaAndIpUdpStream_macExtractor_extractDataBuf_D_OUT[15:0] !=
	   16'd2048 ||
	   !macMetaAndIpUdpStream_macExtractor_extractData_ETC___d108))
	$display("Mac Extractor Mac Addr Check: Fail");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macMetaAndIpUdpStream_macExtractor_doExtraction &&
	  macMetaAndIpUdpStream_macExtractor_extractState != 2'd0 &&
	  macMetaAndIpUdpStream_macExtractor_extractState != 2'd1 &&
	  macMetaAndIpUdpStream_macExtractor_extractState != 2'd2)
	begin
	  v__h1328 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macMetaAndIpUdpStream_macExtractor_doExtraction &&
	  macMetaAndIpUdpStream_macExtractor_extractState != 2'd0 &&
	  macMetaAndIpUdpStream_macExtractor_extractState != 2'd1 &&
	  macMetaAndIpUdpStream_macExtractor_extractState != 2'd2)
	$write("ImmAssert failed in %m @time=%0t: %s-- %s: ",
	       v__h1328,
	       "\"/home/wengwz/workspace/udp-eth/src/includes/Utils.bsv\", line 285, column 21\n",
	       "unreachible case @ mkDataStreamExtract");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macMetaAndIpUdpStream_macExtractor_doExtraction &&
	  macMetaAndIpUdpStream_macExtractor_extractState != 2'd0 &&
	  macMetaAndIpUdpStream_macExtractor_extractState != 2'd1 &&
	  macMetaAndIpUdpStream_macExtractor_extractState != 2'd2)
	$write("extractState = %",
	       macMetaAndIpUdpStream_macExtractor_extractState);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macMetaAndIpUdpStream_macExtractor_doExtraction &&
	  macMetaAndIpUdpStream_macExtractor_extractState != 2'd0 &&
	  macMetaAndIpUdpStream_macExtractor_extractState != 2'd1 &&
	  macMetaAndIpUdpStream_macExtractor_extractState != 2'd2)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macMetaAndIpUdpStream_macExtractor_doExtraction &&
	  macMetaAndIpUdpStream_macExtractor_extractState != 2'd0 &&
	  macMetaAndIpUdpStream_macExtractor_extractState != 2'd1 &&
	  macMetaAndIpUdpStream_macExtractor_extractState != 2'd2)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_udpMetaAndLoadStream_doCheck &&
	  ipChecksum__h10192 == 16'd0 &&
	  udpMetaAndLoadStream_ipUdpExtractor_extractDat_ETC___d265 &&
	  udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[151:144] ==
	  8'd17)
	$display("IpUdp EXT: Check Pass");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_udpMetaAndLoadStream_doCheck &&
	  (ipChecksum__h10192 != 16'd0 ||
	   !udpMetaAndLoadStream_ipUdpExtractor_extractDat_ETC___d265 ||
	   udpMetaAndLoadStream_ipUdpExtractor_extractDataBuf_D_OUT[151:144] !=
	   8'd17))
	$display("IpUdp EXT: Check Fail ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_udpMetaAndLoadStream_ipUdpExtractor_doExtraction &&
	  udpMetaAndLoadStream_ipUdpExtractor_extractState != 2'd0 &&
	  udpMetaAndLoadStream_ipUdpExtractor_extractState != 2'd1 &&
	  udpMetaAndLoadStream_ipUdpExtractor_extractState != 2'd2)
	begin
	  v__h5228 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_udpMetaAndLoadStream_ipUdpExtractor_doExtraction &&
	  udpMetaAndLoadStream_ipUdpExtractor_extractState != 2'd0 &&
	  udpMetaAndLoadStream_ipUdpExtractor_extractState != 2'd1 &&
	  udpMetaAndLoadStream_ipUdpExtractor_extractState != 2'd2)
	$write("ImmAssert failed in %m @time=%0t: %s-- %s: ",
	       v__h5228,
	       "\"/home/wengwz/workspace/udp-eth/src/includes/Utils.bsv\", line 285, column 21\n",
	       "unreachible case @ mkDataStreamExtract");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_udpMetaAndLoadStream_ipUdpExtractor_doExtraction &&
	  udpMetaAndLoadStream_ipUdpExtractor_extractState != 2'd0 &&
	  udpMetaAndLoadStream_ipUdpExtractor_extractState != 2'd1 &&
	  udpMetaAndLoadStream_ipUdpExtractor_extractState != 2'd2)
	$write("extractState = %",
	       udpMetaAndLoadStream_ipUdpExtractor_extractState);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_udpMetaAndLoadStream_ipUdpExtractor_doExtraction &&
	  udpMetaAndLoadStream_ipUdpExtractor_extractState != 2'd0 &&
	  udpMetaAndLoadStream_ipUdpExtractor_extractState != 2'd1 &&
	  udpMetaAndLoadStream_ipUdpExtractor_extractState != 2'd2)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_udpMetaAndLoadStream_ipUdpExtractor_doExtraction &&
	  udpMetaAndLoadStream_ipUdpExtractor_extractState != 2'd0 &&
	  udpMetaAndLoadStream_ipUdpExtractor_extractState != 2'd1 &&
	  udpMetaAndLoadStream_ipUdpExtractor_extractState != 2'd2)
	$finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkUdpEthRx


`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif


module RegN(CLK, RST, Q_OUT, D_IN, EN);

   parameter width = 1;
   parameter init  = { width {1'b0} } ;

   input     CLK;
   input     RST;
   input     EN;
   input [width - 1 : 0] D_IN;
   output [width - 1 : 0] Q_OUT;

   reg [width - 1 : 0]    Q_OUT;

   always@(posedge CLK)
     begin
        if (RST == `BSV_RESET_VALUE)
          Q_OUT <= `BSV_ASSIGNMENT_DELAY init;
        else
          begin
             if (EN)
               Q_OUT <= `BSV_ASSIGNMENT_DELAY D_IN;
          end // else: !if(RST == `BSV_RESET_VALUE)
     end

`ifdef BSV_NO_INITIAL_BLOCKS
`else // not BSV_NO_INITIAL_BLOCKS
   // synopsys translate_off
   initial begin
      Q_OUT = {((width + 1)/2){2'b10}} ;
   end
   // synopsys translate_on
`endif // BSV_NO_INITIAL_BLOCKS

endmodule


`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif


// Basic register without reset.
module RegUN(CLK, EN, D_IN, Q_OUT);
   parameter width = 1;

   input     CLK;
   input     EN;
   input [width - 1 : 0] D_IN;

   output [width - 1 : 0] Q_OUT;
   reg [width - 1 : 0]    Q_OUT;

`ifdef BSV_NO_INITIAL_BLOCKS
`else // not BSV_NO_INITIAL_BLOCKS
   // synopsys translate_off
   initial begin
      Q_OUT = {((width + 1)/2){2'b10}} ;
   end
   // synopsys translate_on
`endif // BSV_NO_INITIAL_BLOCKS

   
   always@(posedge CLK)
     begin
        if (EN)
          Q_OUT <= `BSV_ASSIGNMENT_DELAY D_IN;
     end
endmodule


`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

`ifdef BSV_ASYNC_RESET
 `define BSV_ARESET_EDGE_META or `BSV_RESET_EDGE RST
`else
 `define BSV_ARESET_EDGE_META
`endif

`ifdef BSV_RESET_FIFO_HEAD
 `define BSV_ARESET_EDGE_HEAD `BSV_ARESET_EDGE_META
`else
 `define BSV_ARESET_EDGE_HEAD
`endif

// Depth 2 FIFO
module FIFO2(CLK,
             RST,
             D_IN,
             ENQ,
             FULL_N,
             D_OUT,
             DEQ,
             EMPTY_N,
             CLR);

   parameter width = 1;
   parameter guarded = 1'b1;

   input     CLK ;
   input     RST ;
   input [width - 1 : 0] D_IN;
   input                 ENQ;
   input                 DEQ;
   input                 CLR ;

   output                FULL_N;
   output                EMPTY_N;
   output [width - 1 : 0] D_OUT;

   reg                    full_reg;
   reg                    empty_reg;
   reg [width - 1 : 0]    data0_reg;
   reg [width - 1 : 0]    data1_reg;

   assign                 FULL_N = full_reg ;
   assign                 EMPTY_N = empty_reg ;
   assign                 D_OUT = data0_reg ;


   // Optimize the loading logic since state encoding is not power of 2!
   wire                   d0di = (ENQ && ! empty_reg ) || ( ENQ && DEQ && full_reg ) ;
   wire                   d0d1 = DEQ && ! full_reg ;
   wire                   d0h = ((! DEQ) && (! ENQ )) || (!DEQ && empty_reg ) || ( ! ENQ &&full_reg) ;
   wire                   d1di = ENQ & empty_reg ;

`ifdef BSV_NO_INITIAL_BLOCKS
`else // not BSV_NO_INITIAL_BLOCKS
   // synopsys translate_off
   initial
     begin
        data0_reg   = {((width + 1)/2) {2'b10}} ;
        data1_reg  = {((width + 1)/2) {2'b10}} ;
        empty_reg = 1'b0;
        full_reg  = 1'b1;
     end // initial begin
   // synopsys translate_on
`endif // BSV_NO_INITIAL_BLOCKS

   always@(posedge CLK `BSV_ARESET_EDGE_META)
     begin
        if (RST == `BSV_RESET_VALUE)
          begin
             empty_reg <= `BSV_ASSIGNMENT_DELAY 1'b0;
             full_reg  <= `BSV_ASSIGNMENT_DELAY 1'b1;
          end // if (RST == `BSV_RESET_VALUE)
        else
          begin
             if (CLR)
               begin
                  empty_reg <= `BSV_ASSIGNMENT_DELAY 1'b0;
                  full_reg  <= `BSV_ASSIGNMENT_DELAY 1'b1;
               end // if (CLR)
             else if ( ENQ && ! DEQ ) // just enq
               begin
                  empty_reg <= `BSV_ASSIGNMENT_DELAY 1'b1;
                  full_reg <= `BSV_ASSIGNMENT_DELAY ! empty_reg ;
               end
             else if ( DEQ && ! ENQ )
               begin
                  full_reg  <= `BSV_ASSIGNMENT_DELAY 1'b1;
                  empty_reg <= `BSV_ASSIGNMENT_DELAY ! full_reg;
               end // if ( DEQ && ! ENQ )
          end // else: !if(RST == `BSV_RESET_VALUE)

     end // always@ (posedge CLK or `BSV_RESET_EDGE RST)


   always@(posedge CLK `BSV_ARESET_EDGE_HEAD)
     begin
`ifdef BSV_RESET_FIFO_HEAD
        if (RST == `BSV_RESET_VALUE)
          begin
             data0_reg <= `BSV_ASSIGNMENT_DELAY {width {1'b0}} ;
             data1_reg <= `BSV_ASSIGNMENT_DELAY {width {1'b0}} ;
          end
        else
`endif
          begin
             data0_reg  <= `BSV_ASSIGNMENT_DELAY
                           {width{d0di}} & D_IN | {width{d0d1}} & data1_reg | {width{d0h}} & data0_reg ;
             data1_reg <= `BSV_ASSIGNMENT_DELAY
                          d1di ? D_IN : data1_reg ;
          end // else: !if(RST == `BSV_RESET_VALUE)
     end // always@ (posedge CLK or `BSV_RESET_EDGE RST)



   // synopsys translate_off
   always@(posedge CLK)
     begin: error_checks
        reg deqerror, enqerror ;

        deqerror =  0;
        enqerror = 0;
        if (RST == ! `BSV_RESET_VALUE)
          begin
             if ( ! empty_reg && DEQ )
               begin
                  deqerror =  1;
                  $display( "Warning: FIFO2: %m -- Dequeuing from empty fifo" ) ;
               end
             if ( ! full_reg && ENQ && (!DEQ || guarded) )
               begin
                  enqerror = 1;
                  $display( "Warning: FIFO2: %m -- Enqueuing to a full fifo" ) ;
               end
          end
     end // always@ (posedge CLK)
   // synopsys translate_on

endmodule
