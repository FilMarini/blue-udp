
//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// On Sat Apr 22 15:45:20 CST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_udpConfig_put              O     1 const
// RDY_udpMetaDataInTx_put        O     1
// RDY_macMetaDataInTx_put        O     1
// RDY_dataStreamInTx_put         O     1
// axiStreamOutTx_first           O   578 reg
// RDY_axiStreamOutTx_first       O     1 reg
// RDY_axiStreamOutTx_deq         O     1 reg
// axiStreamOutTx_notEmpty        O     1 reg
// RDY_axiStreamOutTx_notEmpty    O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// udpConfig_put                  I   144 reg
// udpMetaDataInTx_put            I    80 reg
// macMetaDataInTx_put            I    64 reg
// dataStreamInTx_put             I   290 reg
// EN_udpConfig_put               I     1
// EN_udpMetaDataInTx_put         I     1
// EN_macMetaDataInTx_put         I     1
// EN_dataStreamInTx_put          I     1
// EN_axiStreamOutTx_deq          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkUdpEthTx(CLK,
		  RST_N,

		  udpConfig_put,
		  EN_udpConfig_put,
		  RDY_udpConfig_put,

		  udpMetaDataInTx_put,
		  EN_udpMetaDataInTx_put,
		  RDY_udpMetaDataInTx_put,

		  macMetaDataInTx_put,
		  EN_macMetaDataInTx_put,
		  RDY_macMetaDataInTx_put,

		  dataStreamInTx_put,
		  EN_dataStreamInTx_put,
		  RDY_dataStreamInTx_put,

		  axiStreamOutTx_first,
		  RDY_axiStreamOutTx_first,

		  EN_axiStreamOutTx_deq,
		  RDY_axiStreamOutTx_deq,

		  axiStreamOutTx_notEmpty,
		  RDY_axiStreamOutTx_notEmpty);
  input  CLK;
  input  RST_N;

  // action method udpConfig_put
  input  [143 : 0] udpConfig_put;
  input  EN_udpConfig_put;
  output RDY_udpConfig_put;

  // action method udpMetaDataInTx_put
  input  [79 : 0] udpMetaDataInTx_put;
  input  EN_udpMetaDataInTx_put;
  output RDY_udpMetaDataInTx_put;

  // action method macMetaDataInTx_put
  input  [63 : 0] macMetaDataInTx_put;
  input  EN_macMetaDataInTx_put;
  output RDY_macMetaDataInTx_put;

  // action method dataStreamInTx_put
  input  [289 : 0] dataStreamInTx_put;
  input  EN_dataStreamInTx_put;
  output RDY_dataStreamInTx_put;

  // value method axiStreamOutTx_first
  output [577 : 0] axiStreamOutTx_first;
  output RDY_axiStreamOutTx_first;

  // action method axiStreamOutTx_deq
  input  EN_axiStreamOutTx_deq;
  output RDY_axiStreamOutTx_deq;

  // value method axiStreamOutTx_notEmpty
  output axiStreamOutTx_notEmpty;
  output RDY_axiStreamOutTx_notEmpty;

  // signals for module outputs
  wire [577 : 0] axiStreamOutTx_first;
  wire RDY_axiStreamOutTx_deq,
       RDY_axiStreamOutTx_first,
       RDY_axiStreamOutTx_notEmpty,
       RDY_dataStreamInTx_put,
       RDY_macMetaDataInTx_put,
       RDY_udpConfig_put,
       RDY_udpMetaDataInTx_put,
       axiStreamOutTx_notEmpty;

  // register ipUdpStream_dataStreamOut_insertState
  reg [1 : 0] ipUdpStream_dataStreamOut_insertState;
  reg [1 : 0] ipUdpStream_dataStreamOut_insertState_D_IN;
  wire ipUdpStream_dataStreamOut_insertState_EN;

  // register ipUdpStream_dataStreamOut_residueBuf
  reg [223 : 0] ipUdpStream_dataStreamOut_residueBuf;
  wire [223 : 0] ipUdpStream_dataStreamOut_residueBuf_D_IN;
  wire ipUdpStream_dataStreamOut_residueBuf_EN;

  // register ipUdpStream_dataStreamOut_residueByteEnBuf
  reg [27 : 0] ipUdpStream_dataStreamOut_residueByteEnBuf;
  wire [27 : 0] ipUdpStream_dataStreamOut_residueByteEnBuf_D_IN;
  wire ipUdpStream_dataStreamOut_residueByteEnBuf_EN;

  // register ipUdpStream_ipIdCounter
  reg [15 : 0] ipUdpStream_ipIdCounter;
  wire [15 : 0] ipUdpStream_ipIdCounter_D_IN;
  wire ipUdpStream_ipIdCounter_EN;

  // register macAxiStream_bufValid
  reg macAxiStream_bufValid;
  wire macAxiStream_bufValid_D_IN, macAxiStream_bufValid_EN;

  // register macAxiStream_byteEnBuf
  reg [31 : 0] macAxiStream_byteEnBuf;
  wire [31 : 0] macAxiStream_byteEnBuf_D_IN;
  wire macAxiStream_byteEnBuf_EN;

  // register macAxiStream_dataBuf
  reg [255 : 0] macAxiStream_dataBuf;
  wire [255 : 0] macAxiStream_dataBuf_D_IN;
  wire macAxiStream_dataBuf_EN;

  // register macStream_dataStreamOut_insertState
  reg [1 : 0] macStream_dataStreamOut_insertState;
  reg [1 : 0] macStream_dataStreamOut_insertState_D_IN;
  wire macStream_dataStreamOut_insertState_EN;

  // register macStream_dataStreamOut_residueBuf
  reg [111 : 0] macStream_dataStreamOut_residueBuf;
  wire [111 : 0] macStream_dataStreamOut_residueBuf_D_IN;
  wire macStream_dataStreamOut_residueBuf_EN;

  // register macStream_dataStreamOut_residueByteEnBuf
  reg [13 : 0] macStream_dataStreamOut_residueByteEnBuf;
  wire [13 : 0] macStream_dataStreamOut_residueByteEnBuf_D_IN;
  wire macStream_dataStreamOut_residueByteEnBuf_EN;

  // register udpConfigReg
  reg [144 : 0] udpConfigReg;
  wire [144 : 0] udpConfigReg_D_IN;
  wire udpConfigReg_EN;

  // ports of submodule dataStreamInTxBuf
  wire [289 : 0] dataStreamInTxBuf_D_IN, dataStreamInTxBuf_D_OUT;
  wire dataStreamInTxBuf_CLR,
       dataStreamInTxBuf_DEQ,
       dataStreamInTxBuf_EMPTY_N,
       dataStreamInTxBuf_ENQ,
       dataStreamInTxBuf_FULL_N;

  // ports of submodule ipUdpStream_dataStreamOut_outputBuf
  wire [289 : 0] ipUdpStream_dataStreamOut_outputBuf_D_IN,
		 ipUdpStream_dataStreamOut_outputBuf_D_OUT;
  wire ipUdpStream_dataStreamOut_outputBuf_CLR,
       ipUdpStream_dataStreamOut_outputBuf_DEQ,
       ipUdpStream_dataStreamOut_outputBuf_EMPTY_N,
       ipUdpStream_dataStreamOut_outputBuf_ENQ,
       ipUdpStream_dataStreamOut_outputBuf_FULL_N;

  // ports of submodule ipUdpStream_ipUdpHeaderBuf
  wire [223 : 0] ipUdpStream_ipUdpHeaderBuf_D_IN,
		 ipUdpStream_ipUdpHeaderBuf_D_OUT;
  wire ipUdpStream_ipUdpHeaderBuf_CLR,
       ipUdpStream_ipUdpHeaderBuf_DEQ,
       ipUdpStream_ipUdpHeaderBuf_EMPTY_N,
       ipUdpStream_ipUdpHeaderBuf_ENQ,
       ipUdpStream_ipUdpHeaderBuf_FULL_N;

  // ports of submodule macAxiStream_axiStreamOutBuf
  wire [577 : 0] macAxiStream_axiStreamOutBuf_D_IN,
		 macAxiStream_axiStreamOutBuf_D_OUT;
  wire macAxiStream_axiStreamOutBuf_CLR,
       macAxiStream_axiStreamOutBuf_DEQ,
       macAxiStream_axiStreamOutBuf_EMPTY_N,
       macAxiStream_axiStreamOutBuf_ENQ,
       macAxiStream_axiStreamOutBuf_FULL_N;

  // ports of submodule macMetaDataInTxBuf
  wire [63 : 0] macMetaDataInTxBuf_D_IN, macMetaDataInTxBuf_D_OUT;
  wire macMetaDataInTxBuf_CLR,
       macMetaDataInTxBuf_DEQ,
       macMetaDataInTxBuf_EMPTY_N,
       macMetaDataInTxBuf_ENQ,
       macMetaDataInTxBuf_FULL_N;

  // ports of submodule macStream_dataStreamOut_outputBuf
  wire [289 : 0] macStream_dataStreamOut_outputBuf_D_IN,
		 macStream_dataStreamOut_outputBuf_D_OUT;
  wire macStream_dataStreamOut_outputBuf_CLR,
       macStream_dataStreamOut_outputBuf_DEQ,
       macStream_dataStreamOut_outputBuf_EMPTY_N,
       macStream_dataStreamOut_outputBuf_ENQ,
       macStream_dataStreamOut_outputBuf_FULL_N;

  // ports of submodule macStream_ethHeaderBuf
  wire [111 : 0] macStream_ethHeaderBuf_D_IN, macStream_ethHeaderBuf_D_OUT;
  wire macStream_ethHeaderBuf_CLR,
       macStream_ethHeaderBuf_DEQ,
       macStream_ethHeaderBuf_EMPTY_N,
       macStream_ethHeaderBuf_ENQ,
       macStream_ethHeaderBuf_FULL_N;

  // ports of submodule udpMetaDataInTxBuf
  wire [79 : 0] udpMetaDataInTxBuf_D_IN, udpMetaDataInTxBuf_D_OUT;
  wire udpMetaDataInTxBuf_CLR,
       udpMetaDataInTxBuf_DEQ,
       udpMetaDataInTxBuf_EMPTY_N,
       udpMetaDataInTxBuf_ENQ,
       udpMetaDataInTxBuf_FULL_N;

  // rule scheduling signals
  reg WILL_FIRE_RL_ipUdpStream_dataStreamOut_doInsertion,
      WILL_FIRE_RL_macStream_dataStreamOut_doInsertion;
  wire WILL_FIRE_RL_macAxiStream_doStreamExtension;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h1872;
  reg [63 : 0] v__h7443;
  // synopsys translate_on

  // remaining internal signals
  reg [143 : 0] CASE_macStream_dataStreamOut_insertState_0_ipU_ETC__q4;
  reg [31 : 0] CASE_ipUdpStream_dataStreamOut_insertState_0_d_ETC__q1;
  reg [17 : 0] CASE_macStream_dataStreamOut_insertState_0_ipU_ETC__q5;
  reg [3 : 0] CASE_ipUdpStream_dataStreamOut_insertState_0_d_ETC__q2;
  reg [1 : 0] CASE_ipUdpStream_dataStreamOut_insertState_0_d_ETC__q3,
	      CASE_macStream_dataStreamOut_insertState_0_ipU_ETC__q6;
  wire [511 : 0] axiStream_tData__h10496, axiStream_tData__h10579;
  wire [223 : 0] additionData__h1926;
  wire [111 : 0] additionData__h7497;
  wire [63 : 0] axiStream_tKeep__h10497, axiStream_tKeep__h10580;
  wire [19 : 0] _theResult____h624;
  wire [15 : 0] temp__h621, x__h1006, x__h1495, x__h619;

  // action method udpConfig_put
  assign RDY_udpConfig_put = 1'd1 ;

  // action method udpMetaDataInTx_put
  assign RDY_udpMetaDataInTx_put =
	     udpConfigReg[144] && udpMetaDataInTxBuf_FULL_N ;

  // action method macMetaDataInTx_put
  assign RDY_macMetaDataInTx_put =
	     udpConfigReg[144] && macMetaDataInTxBuf_FULL_N ;

  // action method dataStreamInTx_put
  assign RDY_dataStreamInTx_put =
	     udpConfigReg[144] && dataStreamInTxBuf_FULL_N ;

  // value method axiStreamOutTx_first
  assign axiStreamOutTx_first = macAxiStream_axiStreamOutBuf_D_OUT ;
  assign RDY_axiStreamOutTx_first = macAxiStream_axiStreamOutBuf_EMPTY_N ;

  // action method axiStreamOutTx_deq
  assign RDY_axiStreamOutTx_deq = macAxiStream_axiStreamOutBuf_EMPTY_N ;

  // value method axiStreamOutTx_notEmpty
  assign axiStreamOutTx_notEmpty = macAxiStream_axiStreamOutBuf_EMPTY_N ;
  assign RDY_axiStreamOutTx_notEmpty = 1'd1 ;

  // submodule dataStreamInTxBuf
  FIFO2 #(.width(32'd290), .guarded(1'd1)) dataStreamInTxBuf(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(dataStreamInTxBuf_D_IN),
							     .ENQ(dataStreamInTxBuf_ENQ),
							     .DEQ(dataStreamInTxBuf_DEQ),
							     .CLR(dataStreamInTxBuf_CLR),
							     .D_OUT(dataStreamInTxBuf_D_OUT),
							     .FULL_N(dataStreamInTxBuf_FULL_N),
							     .EMPTY_N(dataStreamInTxBuf_EMPTY_N));

  // submodule ipUdpStream_dataStreamOut_outputBuf
  FIFO2 #(.width(32'd290),
	  .guarded(1'd1)) ipUdpStream_dataStreamOut_outputBuf(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ipUdpStream_dataStreamOut_outputBuf_D_IN),
							      .ENQ(ipUdpStream_dataStreamOut_outputBuf_ENQ),
							      .DEQ(ipUdpStream_dataStreamOut_outputBuf_DEQ),
							      .CLR(ipUdpStream_dataStreamOut_outputBuf_CLR),
							      .D_OUT(ipUdpStream_dataStreamOut_outputBuf_D_OUT),
							      .FULL_N(ipUdpStream_dataStreamOut_outputBuf_FULL_N),
							      .EMPTY_N(ipUdpStream_dataStreamOut_outputBuf_EMPTY_N));

  // submodule ipUdpStream_ipUdpHeaderBuf
  FIFO2 #(.width(32'd224),
	  .guarded(1'd1)) ipUdpStream_ipUdpHeaderBuf(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ipUdpStream_ipUdpHeaderBuf_D_IN),
						     .ENQ(ipUdpStream_ipUdpHeaderBuf_ENQ),
						     .DEQ(ipUdpStream_ipUdpHeaderBuf_DEQ),
						     .CLR(ipUdpStream_ipUdpHeaderBuf_CLR),
						     .D_OUT(ipUdpStream_ipUdpHeaderBuf_D_OUT),
						     .FULL_N(ipUdpStream_ipUdpHeaderBuf_FULL_N),
						     .EMPTY_N(ipUdpStream_ipUdpHeaderBuf_EMPTY_N));

  // submodule macAxiStream_axiStreamOutBuf
  FIFO2 #(.width(32'd578),
	  .guarded(1'd1)) macAxiStream_axiStreamOutBuf(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(macAxiStream_axiStreamOutBuf_D_IN),
						       .ENQ(macAxiStream_axiStreamOutBuf_ENQ),
						       .DEQ(macAxiStream_axiStreamOutBuf_DEQ),
						       .CLR(macAxiStream_axiStreamOutBuf_CLR),
						       .D_OUT(macAxiStream_axiStreamOutBuf_D_OUT),
						       .FULL_N(macAxiStream_axiStreamOutBuf_FULL_N),
						       .EMPTY_N(macAxiStream_axiStreamOutBuf_EMPTY_N));

  // submodule macMetaDataInTxBuf
  FIFO2 #(.width(32'd64), .guarded(1'd1)) macMetaDataInTxBuf(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(macMetaDataInTxBuf_D_IN),
							     .ENQ(macMetaDataInTxBuf_ENQ),
							     .DEQ(macMetaDataInTxBuf_DEQ),
							     .CLR(macMetaDataInTxBuf_CLR),
							     .D_OUT(macMetaDataInTxBuf_D_OUT),
							     .FULL_N(macMetaDataInTxBuf_FULL_N),
							     .EMPTY_N(macMetaDataInTxBuf_EMPTY_N));

  // submodule macStream_dataStreamOut_outputBuf
  FIFO2 #(.width(32'd290),
	  .guarded(1'd1)) macStream_dataStreamOut_outputBuf(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(macStream_dataStreamOut_outputBuf_D_IN),
							    .ENQ(macStream_dataStreamOut_outputBuf_ENQ),
							    .DEQ(macStream_dataStreamOut_outputBuf_DEQ),
							    .CLR(macStream_dataStreamOut_outputBuf_CLR),
							    .D_OUT(macStream_dataStreamOut_outputBuf_D_OUT),
							    .FULL_N(macStream_dataStreamOut_outputBuf_FULL_N),
							    .EMPTY_N(macStream_dataStreamOut_outputBuf_EMPTY_N));

  // submodule macStream_ethHeaderBuf
  FIFO2 #(.width(32'd112), .guarded(1'd1)) macStream_ethHeaderBuf(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(macStream_ethHeaderBuf_D_IN),
								  .ENQ(macStream_ethHeaderBuf_ENQ),
								  .DEQ(macStream_ethHeaderBuf_DEQ),
								  .CLR(macStream_ethHeaderBuf_CLR),
								  .D_OUT(macStream_ethHeaderBuf_D_OUT),
								  .FULL_N(macStream_ethHeaderBuf_FULL_N),
								  .EMPTY_N(macStream_ethHeaderBuf_EMPTY_N));

  // submodule udpMetaDataInTxBuf
  FIFO2 #(.width(32'd80), .guarded(1'd1)) udpMetaDataInTxBuf(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(udpMetaDataInTxBuf_D_IN),
							     .ENQ(udpMetaDataInTxBuf_ENQ),
							     .DEQ(udpMetaDataInTxBuf_DEQ),
							     .CLR(udpMetaDataInTxBuf_CLR),
							     .D_OUT(udpMetaDataInTxBuf_D_OUT),
							     .FULL_N(udpMetaDataInTxBuf_FULL_N),
							     .EMPTY_N(udpMetaDataInTxBuf_EMPTY_N));

  // rule RL_ipUdpStream_dataStreamOut_doInsertion
  always@(ipUdpStream_dataStreamOut_insertState or
	  ipUdpStream_dataStreamOut_outputBuf_FULL_N or
	  dataStreamInTxBuf_EMPTY_N or ipUdpStream_ipUdpHeaderBuf_EMPTY_N)
  begin
    case (ipUdpStream_dataStreamOut_insertState)
      2'd0:
	  WILL_FIRE_RL_ipUdpStream_dataStreamOut_doInsertion =
	      dataStreamInTxBuf_EMPTY_N &&
	      ipUdpStream_dataStreamOut_outputBuf_FULL_N &&
	      ipUdpStream_ipUdpHeaderBuf_EMPTY_N;
      2'd1:
	  WILL_FIRE_RL_ipUdpStream_dataStreamOut_doInsertion =
	      dataStreamInTxBuf_EMPTY_N &&
	      ipUdpStream_dataStreamOut_outputBuf_FULL_N;
      default: WILL_FIRE_RL_ipUdpStream_dataStreamOut_doInsertion =
		   ipUdpStream_dataStreamOut_insertState != 2'd2 ||
		   ipUdpStream_dataStreamOut_outputBuf_FULL_N;
    endcase
  end

  // rule RL_macStream_dataStreamOut_doInsertion
  always@(macStream_dataStreamOut_insertState or
	  macStream_dataStreamOut_outputBuf_FULL_N or
	  ipUdpStream_dataStreamOut_outputBuf_EMPTY_N or
	  macStream_ethHeaderBuf_EMPTY_N)
  begin
    case (macStream_dataStreamOut_insertState)
      2'd0:
	  WILL_FIRE_RL_macStream_dataStreamOut_doInsertion =
	      ipUdpStream_dataStreamOut_outputBuf_EMPTY_N &&
	      macStream_dataStreamOut_outputBuf_FULL_N &&
	      macStream_ethHeaderBuf_EMPTY_N;
      2'd1:
	  WILL_FIRE_RL_macStream_dataStreamOut_doInsertion =
	      ipUdpStream_dataStreamOut_outputBuf_EMPTY_N &&
	      macStream_dataStreamOut_outputBuf_FULL_N;
      default: WILL_FIRE_RL_macStream_dataStreamOut_doInsertion =
		   macStream_dataStreamOut_insertState != 2'd2 ||
		   macStream_dataStreamOut_outputBuf_FULL_N;
    endcase
  end

  // rule RL_macAxiStream_doStreamExtension
  assign WILL_FIRE_RL_macAxiStream_doStreamExtension =
	     macStream_dataStreamOut_outputBuf_EMPTY_N &&
	     (macAxiStream_bufValid ?
		macAxiStream_axiStreamOutBuf_FULL_N :
		!macStream_dataStreamOut_outputBuf_D_OUT[0] ||
		macAxiStream_axiStreamOutBuf_FULL_N) ;

  // register ipUdpStream_dataStreamOut_insertState
  always@(ipUdpStream_dataStreamOut_insertState or dataStreamInTxBuf_D_OUT)
  begin
    case (ipUdpStream_dataStreamOut_insertState)
      2'd0:
	  ipUdpStream_dataStreamOut_insertState_D_IN =
	      dataStreamInTxBuf_D_OUT[0] ? 2'd2 : 2'd1;
      2'd1:
	  ipUdpStream_dataStreamOut_insertState_D_IN =
	      (dataStreamInTxBuf_D_OUT[33:6] == 28'd0) ? 2'd0 : 2'd2;
      default: ipUdpStream_dataStreamOut_insertState_D_IN = 2'd0;
    endcase
  end
  assign ipUdpStream_dataStreamOut_insertState_EN =
	     WILL_FIRE_RL_ipUdpStream_dataStreamOut_doInsertion &&
	     (ipUdpStream_dataStreamOut_insertState == 2'd0 &&
	      (dataStreamInTxBuf_D_OUT[33:6] != 28'd0 ||
	       !dataStreamInTxBuf_D_OUT[0]) ||
	      ipUdpStream_dataStreamOut_insertState == 2'd1 &&
	      dataStreamInTxBuf_D_OUT[0] ||
	      ipUdpStream_dataStreamOut_insertState == 2'd2) ;

  // register ipUdpStream_dataStreamOut_residueBuf
  assign ipUdpStream_dataStreamOut_residueBuf_D_IN =
	     dataStreamInTxBuf_D_OUT[289:66] ;
  assign ipUdpStream_dataStreamOut_residueBuf_EN =
	     WILL_FIRE_RL_ipUdpStream_dataStreamOut_doInsertion &&
	     (ipUdpStream_dataStreamOut_insertState == 2'd0 ||
	      ipUdpStream_dataStreamOut_insertState == 2'd1) ;

  // register ipUdpStream_dataStreamOut_residueByteEnBuf
  assign ipUdpStream_dataStreamOut_residueByteEnBuf_D_IN =
	     dataStreamInTxBuf_D_OUT[33:6] ;
  assign ipUdpStream_dataStreamOut_residueByteEnBuf_EN =
	     WILL_FIRE_RL_ipUdpStream_dataStreamOut_doInsertion &&
	     (ipUdpStream_dataStreamOut_insertState == 2'd0 ||
	      ipUdpStream_dataStreamOut_insertState == 2'd1) ;

  // register ipUdpStream_ipIdCounter
  assign ipUdpStream_ipIdCounter_D_IN = ipUdpStream_ipIdCounter + 16'd1 ;
  assign ipUdpStream_ipIdCounter_EN =
	     udpMetaDataInTxBuf_EMPTY_N && ipUdpStream_ipUdpHeaderBuf_FULL_N ;

  // register macAxiStream_bufValid
  assign macAxiStream_bufValid_D_IN = !macAxiStream_bufValid ;
  assign macAxiStream_bufValid_EN =
	     WILL_FIRE_RL_macAxiStream_doStreamExtension &&
	     (macAxiStream_bufValid ||
	      !macStream_dataStreamOut_outputBuf_D_OUT[0]) ;

  // register macAxiStream_byteEnBuf
  assign macAxiStream_byteEnBuf_D_IN =
	     macStream_dataStreamOut_outputBuf_D_OUT[33:2] ;
  assign macAxiStream_byteEnBuf_EN =
	     WILL_FIRE_RL_macAxiStream_doStreamExtension &&
	     !macAxiStream_bufValid &&
	     !macStream_dataStreamOut_outputBuf_D_OUT[0] ;

  // register macAxiStream_dataBuf
  assign macAxiStream_dataBuf_D_IN =
	     macStream_dataStreamOut_outputBuf_D_OUT[289:34] ;
  assign macAxiStream_dataBuf_EN =
	     WILL_FIRE_RL_macAxiStream_doStreamExtension &&
	     !macAxiStream_bufValid &&
	     !macStream_dataStreamOut_outputBuf_D_OUT[0] ;

  // register macStream_dataStreamOut_insertState
  always@(macStream_dataStreamOut_insertState or
	  ipUdpStream_dataStreamOut_outputBuf_D_OUT)
  begin
    case (macStream_dataStreamOut_insertState)
      2'd0:
	  macStream_dataStreamOut_insertState_D_IN =
	      ipUdpStream_dataStreamOut_outputBuf_D_OUT[0] ? 2'd2 : 2'd1;
      2'd1:
	  macStream_dataStreamOut_insertState_D_IN =
	      (ipUdpStream_dataStreamOut_outputBuf_D_OUT[33:20] == 14'd0) ?
		2'd0 :
		2'd2;
      default: macStream_dataStreamOut_insertState_D_IN = 2'd0;
    endcase
  end
  assign macStream_dataStreamOut_insertState_EN =
	     WILL_FIRE_RL_macStream_dataStreamOut_doInsertion &&
	     (macStream_dataStreamOut_insertState == 2'd0 &&
	      (ipUdpStream_dataStreamOut_outputBuf_D_OUT[33:20] != 14'd0 ||
	       !ipUdpStream_dataStreamOut_outputBuf_D_OUT[0]) ||
	      macStream_dataStreamOut_insertState == 2'd1 &&
	      ipUdpStream_dataStreamOut_outputBuf_D_OUT[0] ||
	      macStream_dataStreamOut_insertState == 2'd2) ;

  // register macStream_dataStreamOut_residueBuf
  assign macStream_dataStreamOut_residueBuf_D_IN =
	     ipUdpStream_dataStreamOut_outputBuf_D_OUT[289:178] ;
  assign macStream_dataStreamOut_residueBuf_EN =
	     WILL_FIRE_RL_macStream_dataStreamOut_doInsertion &&
	     (macStream_dataStreamOut_insertState == 2'd0 ||
	      macStream_dataStreamOut_insertState == 2'd1) ;

  // register macStream_dataStreamOut_residueByteEnBuf
  assign macStream_dataStreamOut_residueByteEnBuf_D_IN =
	     ipUdpStream_dataStreamOut_outputBuf_D_OUT[33:20] ;
  assign macStream_dataStreamOut_residueByteEnBuf_EN =
	     WILL_FIRE_RL_macStream_dataStreamOut_doInsertion &&
	     (macStream_dataStreamOut_insertState == 2'd0 ||
	      macStream_dataStreamOut_insertState == 2'd1) ;

  // register udpConfigReg
  assign udpConfigReg_D_IN = { 1'd1, udpConfig_put } ;
  assign udpConfigReg_EN = EN_udpConfig_put ;

  // submodule dataStreamInTxBuf
  assign dataStreamInTxBuf_D_IN = dataStreamInTx_put ;
  assign dataStreamInTxBuf_ENQ = EN_dataStreamInTx_put ;
  assign dataStreamInTxBuf_DEQ =
	     WILL_FIRE_RL_ipUdpStream_dataStreamOut_doInsertion &&
	     (ipUdpStream_dataStreamOut_insertState == 2'd0 ||
	      ipUdpStream_dataStreamOut_insertState == 2'd1) ;
  assign dataStreamInTxBuf_CLR = 1'b0 ;

  // submodule ipUdpStream_dataStreamOut_outputBuf
  assign ipUdpStream_dataStreamOut_outputBuf_D_IN =
	     { CASE_ipUdpStream_dataStreamOut_insertState_0_d_ETC__q1,
	       (ipUdpStream_dataStreamOut_insertState == 2'd0) ?
		 additionData__h1926 :
		 ipUdpStream_dataStreamOut_residueBuf,
	       CASE_ipUdpStream_dataStreamOut_insertState_0_d_ETC__q2,
	       (ipUdpStream_dataStreamOut_insertState == 2'd0) ?
		 28'd268435455 :
		 ipUdpStream_dataStreamOut_residueByteEnBuf,
	       CASE_ipUdpStream_dataStreamOut_insertState_0_d_ETC__q3 } ;
  assign ipUdpStream_dataStreamOut_outputBuf_ENQ =
	     WILL_FIRE_RL_ipUdpStream_dataStreamOut_doInsertion &&
	     (ipUdpStream_dataStreamOut_insertState == 2'd0 ||
	      ipUdpStream_dataStreamOut_insertState == 2'd1 ||
	      ipUdpStream_dataStreamOut_insertState == 2'd2) ;
  assign ipUdpStream_dataStreamOut_outputBuf_DEQ =
	     WILL_FIRE_RL_macStream_dataStreamOut_doInsertion &&
	     (macStream_dataStreamOut_insertState == 2'd0 ||
	      macStream_dataStreamOut_insertState == 2'd1) ;
  assign ipUdpStream_dataStreamOut_outputBuf_CLR = 1'b0 ;

  // submodule ipUdpStream_ipUdpHeaderBuf
  assign ipUdpStream_ipUdpHeaderBuf_D_IN =
	     { 16'd17664,
	       x__h1006,
	       48'h000100004011,
	       x__h619,
	       udpConfigReg[95:64],
	       udpMetaDataInTxBuf_D_OUT[63:32],
	       udpMetaDataInTxBuf_D_OUT[15:0],
	       udpMetaDataInTxBuf_D_OUT[31:16],
	       x__h1495,
	       16'd0 } ;
  assign ipUdpStream_ipUdpHeaderBuf_ENQ =
	     udpMetaDataInTxBuf_EMPTY_N && ipUdpStream_ipUdpHeaderBuf_FULL_N ;
  assign ipUdpStream_ipUdpHeaderBuf_DEQ =
	     WILL_FIRE_RL_ipUdpStream_dataStreamOut_doInsertion &&
	     ipUdpStream_dataStreamOut_insertState == 2'd0 ;
  assign ipUdpStream_ipUdpHeaderBuf_CLR = 1'b0 ;

  // submodule macAxiStream_axiStreamOutBuf
  assign macAxiStream_axiStreamOutBuf_D_IN =
	     macAxiStream_bufValid ?
	       { axiStream_tData__h10496,
		 axiStream_tKeep__h10497,
		 1'd0,
		 macStream_dataStreamOut_outputBuf_D_OUT[0] } :
	       { axiStream_tData__h10579, axiStream_tKeep__h10580, 2'd1 } ;
  assign macAxiStream_axiStreamOutBuf_ENQ =
	     WILL_FIRE_RL_macAxiStream_doStreamExtension &&
	     (macAxiStream_bufValid ||
	      macStream_dataStreamOut_outputBuf_D_OUT[0]) ;
  assign macAxiStream_axiStreamOutBuf_DEQ = EN_axiStreamOutTx_deq ;
  assign macAxiStream_axiStreamOutBuf_CLR = 1'b0 ;

  // submodule macMetaDataInTxBuf
  assign macMetaDataInTxBuf_D_IN = macMetaDataInTx_put ;
  assign macMetaDataInTxBuf_ENQ = EN_macMetaDataInTx_put ;
  assign macMetaDataInTxBuf_DEQ =
	     macMetaDataInTxBuf_EMPTY_N && macStream_ethHeaderBuf_FULL_N ;
  assign macMetaDataInTxBuf_CLR = 1'b0 ;

  // submodule macStream_dataStreamOut_outputBuf
  assign macStream_dataStreamOut_outputBuf_D_IN =
	     { CASE_macStream_dataStreamOut_insertState_0_ipU_ETC__q4,
	       (macStream_dataStreamOut_insertState == 2'd0) ?
		 additionData__h7497 :
		 macStream_dataStreamOut_residueBuf,
	       CASE_macStream_dataStreamOut_insertState_0_ipU_ETC__q5,
	       (macStream_dataStreamOut_insertState == 2'd0) ?
		 14'd16383 :
		 macStream_dataStreamOut_residueByteEnBuf,
	       CASE_macStream_dataStreamOut_insertState_0_ipU_ETC__q6 } ;
  assign macStream_dataStreamOut_outputBuf_ENQ =
	     WILL_FIRE_RL_macStream_dataStreamOut_doInsertion &&
	     (macStream_dataStreamOut_insertState == 2'd0 ||
	      macStream_dataStreamOut_insertState == 2'd1 ||
	      macStream_dataStreamOut_insertState == 2'd2) ;
  assign macStream_dataStreamOut_outputBuf_DEQ =
	     WILL_FIRE_RL_macAxiStream_doStreamExtension ;
  assign macStream_dataStreamOut_outputBuf_CLR = 1'b0 ;

  // submodule macStream_ethHeaderBuf
  assign macStream_ethHeaderBuf_D_IN =
	     { macMetaDataInTxBuf_D_OUT[63:16],
	       udpConfigReg[143:96],
	       macMetaDataInTxBuf_D_OUT[15:0] } ;
  assign macStream_ethHeaderBuf_ENQ =
	     macMetaDataInTxBuf_EMPTY_N && macStream_ethHeaderBuf_FULL_N ;
  assign macStream_ethHeaderBuf_DEQ =
	     WILL_FIRE_RL_macStream_dataStreamOut_doInsertion &&
	     macStream_dataStreamOut_insertState == 2'd0 ;
  assign macStream_ethHeaderBuf_CLR = 1'b0 ;

  // submodule udpMetaDataInTxBuf
  assign udpMetaDataInTxBuf_D_IN = udpMetaDataInTx_put ;
  assign udpMetaDataInTxBuf_ENQ = EN_udpMetaDataInTx_put ;
  assign udpMetaDataInTxBuf_DEQ =
	     udpMetaDataInTxBuf_EMPTY_N && ipUdpStream_ipUdpHeaderBuf_FULL_N ;
  assign udpMetaDataInTxBuf_CLR = 1'b0 ;

  // remaining internal signals
  assign _theResult____h624 =
	     { 4'd0, udpMetaDataInTxBuf_D_OUT[47:32] } +
	     { 4'd0, udpMetaDataInTxBuf_D_OUT[63:48] } +
	     { 4'd0, udpConfigReg[79:64] } +
	     { 4'd0, udpConfigReg[95:80] } +
	     20'd16401 +
	     20'd1 +
	     { 4'd0, x__h1006 } +
	     20'd17664 ;
  assign additionData__h1926 =
	     { ipUdpStream_ipUdpHeaderBuf_D_OUT[7:0],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[15:8],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[23:16],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[31:24],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[39:32],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[47:40],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[55:48],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[63:56],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[71:64],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[79:72],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[87:80],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[95:88],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[103:96],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[111:104],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[119:112],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[127:120],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[135:128],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[143:136],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[151:144],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[159:152],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[167:160],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[175:168],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[183:176],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[191:184],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[199:192],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[207:200],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[215:208],
	       ipUdpStream_ipUdpHeaderBuf_D_OUT[223:216] } ;
  assign additionData__h7497 =
	     { macStream_ethHeaderBuf_D_OUT[7:0],
	       macStream_ethHeaderBuf_D_OUT[15:8],
	       macStream_ethHeaderBuf_D_OUT[23:16],
	       macStream_ethHeaderBuf_D_OUT[31:24],
	       macStream_ethHeaderBuf_D_OUT[39:32],
	       macStream_ethHeaderBuf_D_OUT[47:40],
	       macStream_ethHeaderBuf_D_OUT[55:48],
	       macStream_ethHeaderBuf_D_OUT[63:56],
	       macStream_ethHeaderBuf_D_OUT[71:64],
	       macStream_ethHeaderBuf_D_OUT[79:72],
	       macStream_ethHeaderBuf_D_OUT[87:80],
	       macStream_ethHeaderBuf_D_OUT[95:88],
	       macStream_ethHeaderBuf_D_OUT[103:96],
	       macStream_ethHeaderBuf_D_OUT[111:104] } ;
  assign axiStream_tData__h10496 =
	     { macStream_dataStreamOut_outputBuf_D_OUT[289:34],
	       macAxiStream_dataBuf } ;
  assign axiStream_tData__h10579 =
	     { 256'd0, macStream_dataStreamOut_outputBuf_D_OUT[289:34] } ;
  assign axiStream_tKeep__h10497 =
	     { macStream_dataStreamOut_outputBuf_D_OUT[33:2],
	       macAxiStream_byteEnBuf } ;
  assign axiStream_tKeep__h10580 =
	     { 32'd0, macStream_dataStreamOut_outputBuf_D_OUT[33:2] } ;
  assign temp__h621 =
	     _theResult____h624[15:0] + { 12'd0, _theResult____h624[19:16] } ;
  assign x__h1006 = udpMetaDataInTxBuf_D_OUT[79:64] + 16'd28 ;
  assign x__h1495 = udpMetaDataInTxBuf_D_OUT[79:64] + 16'd8 ;
  assign x__h619 = ~temp__h621 ;
  always@(ipUdpStream_dataStreamOut_insertState or dataStreamInTxBuf_D_OUT)
  begin
    case (ipUdpStream_dataStreamOut_insertState)
      2'd0, 2'd1:
	  CASE_ipUdpStream_dataStreamOut_insertState_0_d_ETC__q1 =
	      dataStreamInTxBuf_D_OUT[65:34];
      default: CASE_ipUdpStream_dataStreamOut_insertState_0_d_ETC__q1 = 32'd0;
    endcase
  end
  always@(ipUdpStream_dataStreamOut_insertState or dataStreamInTxBuf_D_OUT)
  begin
    case (ipUdpStream_dataStreamOut_insertState)
      2'd0, 2'd1:
	  CASE_ipUdpStream_dataStreamOut_insertState_0_d_ETC__q2 =
	      dataStreamInTxBuf_D_OUT[5:2];
      default: CASE_ipUdpStream_dataStreamOut_insertState_0_d_ETC__q2 = 4'd0;
    endcase
  end
  always@(ipUdpStream_dataStreamOut_insertState or dataStreamInTxBuf_D_OUT)
  begin
    case (ipUdpStream_dataStreamOut_insertState)
      2'd0, 2'd1:
	  CASE_ipUdpStream_dataStreamOut_insertState_0_d_ETC__q3 =
	      { dataStreamInTxBuf_D_OUT[1],
		dataStreamInTxBuf_D_OUT[0] &&
		dataStreamInTxBuf_D_OUT[33:6] == 28'd0 };
      default: CASE_ipUdpStream_dataStreamOut_insertState_0_d_ETC__q3 = 2'd1;
    endcase
  end
  always@(macStream_dataStreamOut_insertState or
	  ipUdpStream_dataStreamOut_outputBuf_D_OUT)
  begin
    case (macStream_dataStreamOut_insertState)
      2'd0, 2'd1:
	  CASE_macStream_dataStreamOut_insertState_0_ipU_ETC__q4 =
	      ipUdpStream_dataStreamOut_outputBuf_D_OUT[177:34];
      default: CASE_macStream_dataStreamOut_insertState_0_ipU_ETC__q4 =
		   144'd0;
    endcase
  end
  always@(macStream_dataStreamOut_insertState or
	  ipUdpStream_dataStreamOut_outputBuf_D_OUT)
  begin
    case (macStream_dataStreamOut_insertState)
      2'd0, 2'd1:
	  CASE_macStream_dataStreamOut_insertState_0_ipU_ETC__q5 =
	      ipUdpStream_dataStreamOut_outputBuf_D_OUT[19:2];
      default: CASE_macStream_dataStreamOut_insertState_0_ipU_ETC__q5 = 18'd0;
    endcase
  end
  always@(macStream_dataStreamOut_insertState or
	  ipUdpStream_dataStreamOut_outputBuf_D_OUT)
  begin
    case (macStream_dataStreamOut_insertState)
      2'd0, 2'd1:
	  CASE_macStream_dataStreamOut_insertState_0_ipU_ETC__q6 =
	      { ipUdpStream_dataStreamOut_outputBuf_D_OUT[1],
		ipUdpStream_dataStreamOut_outputBuf_D_OUT[0] &&
		ipUdpStream_dataStreamOut_outputBuf_D_OUT[33:20] == 14'd0 };
      default: CASE_macStream_dataStreamOut_insertState_0_ipU_ETC__q6 = 2'd1;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ipUdpStream_dataStreamOut_insertState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ipUdpStream_ipIdCounter <= `BSV_ASSIGNMENT_DELAY 16'd0;
	macAxiStream_bufValid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	macStream_dataStreamOut_insertState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	udpConfigReg <= `BSV_ASSIGNMENT_DELAY
	    145'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (ipUdpStream_dataStreamOut_insertState_EN)
	  ipUdpStream_dataStreamOut_insertState <= `BSV_ASSIGNMENT_DELAY
	      ipUdpStream_dataStreamOut_insertState_D_IN;
	if (ipUdpStream_ipIdCounter_EN)
	  ipUdpStream_ipIdCounter <= `BSV_ASSIGNMENT_DELAY
	      ipUdpStream_ipIdCounter_D_IN;
	if (macAxiStream_bufValid_EN)
	  macAxiStream_bufValid <= `BSV_ASSIGNMENT_DELAY
	      macAxiStream_bufValid_D_IN;
	if (macStream_dataStreamOut_insertState_EN)
	  macStream_dataStreamOut_insertState <= `BSV_ASSIGNMENT_DELAY
	      macStream_dataStreamOut_insertState_D_IN;
	if (udpConfigReg_EN)
	  udpConfigReg <= `BSV_ASSIGNMENT_DELAY udpConfigReg_D_IN;
      end
    if (ipUdpStream_dataStreamOut_residueBuf_EN)
      ipUdpStream_dataStreamOut_residueBuf <= `BSV_ASSIGNMENT_DELAY
	  ipUdpStream_dataStreamOut_residueBuf_D_IN;
    if (ipUdpStream_dataStreamOut_residueByteEnBuf_EN)
      ipUdpStream_dataStreamOut_residueByteEnBuf <= `BSV_ASSIGNMENT_DELAY
	  ipUdpStream_dataStreamOut_residueByteEnBuf_D_IN;
    if (macAxiStream_byteEnBuf_EN)
      macAxiStream_byteEnBuf <= `BSV_ASSIGNMENT_DELAY
	  macAxiStream_byteEnBuf_D_IN;
    if (macAxiStream_dataBuf_EN)
      macAxiStream_dataBuf <= `BSV_ASSIGNMENT_DELAY macAxiStream_dataBuf_D_IN;
    if (macStream_dataStreamOut_residueBuf_EN)
      macStream_dataStreamOut_residueBuf <= `BSV_ASSIGNMENT_DELAY
	  macStream_dataStreamOut_residueBuf_D_IN;
    if (macStream_dataStreamOut_residueByteEnBuf_EN)
      macStream_dataStreamOut_residueByteEnBuf <= `BSV_ASSIGNMENT_DELAY
	  macStream_dataStreamOut_residueByteEnBuf_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ipUdpStream_dataStreamOut_insertState = 2'h2;
    ipUdpStream_dataStreamOut_residueBuf =
	224'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ipUdpStream_dataStreamOut_residueByteEnBuf = 28'hAAAAAAA;
    ipUdpStream_ipIdCounter = 16'hAAAA;
    macAxiStream_bufValid = 1'h0;
    macAxiStream_byteEnBuf = 32'hAAAAAAAA;
    macAxiStream_dataBuf =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    macStream_dataStreamOut_insertState = 2'h2;
    macStream_dataStreamOut_residueBuf = 112'hAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    macStream_dataStreamOut_residueByteEnBuf = 14'h2AAA;
    udpConfigReg = 145'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (udpMetaDataInTxBuf_EMPTY_N && ipUdpStream_ipUdpHeaderBuf_FULL_N)
	$display("IpUdpGen: genHeader of %d frame", ipUdpStream_ipIdCounter);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ipUdpStream_dataStreamOut_doInsertion &&
	  ipUdpStream_dataStreamOut_insertState != 2'd0 &&
	  ipUdpStream_dataStreamOut_insertState != 2'd1 &&
	  ipUdpStream_dataStreamOut_insertState != 2'd2)
	begin
	  v__h1872 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ipUdpStream_dataStreamOut_doInsertion &&
	  ipUdpStream_dataStreamOut_insertState != 2'd0 &&
	  ipUdpStream_dataStreamOut_insertState != 2'd1 &&
	  ipUdpStream_dataStreamOut_insertState != 2'd2)
	$write("ImmAssert failed in %m @time=%0t: %s-- %s: ",
	       v__h1872,
	       "\"/home/wengwz/workspace/udp-eth/src/includes/Utils.bsv\", line 200, column 21\n",
	       "unreachible case @ mkDataStreamInsert");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ipUdpStream_dataStreamOut_doInsertion &&
	  ipUdpStream_dataStreamOut_insertState != 2'd0 &&
	  ipUdpStream_dataStreamOut_insertState != 2'd1 &&
	  ipUdpStream_dataStreamOut_insertState != 2'd2)
	$write("insertState=");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ipUdpStream_dataStreamOut_doInsertion &&
	  ipUdpStream_dataStreamOut_insertState != 2'd0 &&
	  ipUdpStream_dataStreamOut_insertState != 2'd1 &&
	  ipUdpStream_dataStreamOut_insertState != 2'd2)
	$write("CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ipUdpStream_dataStreamOut_doInsertion &&
	  ipUdpStream_dataStreamOut_insertState != 2'd0 &&
	  ipUdpStream_dataStreamOut_insertState != 2'd1 &&
	  ipUdpStream_dataStreamOut_insertState != 2'd2)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ipUdpStream_dataStreamOut_doInsertion &&
	  ipUdpStream_dataStreamOut_insertState != 2'd0 &&
	  ipUdpStream_dataStreamOut_insertState != 2'd1 &&
	  ipUdpStream_dataStreamOut_insertState != 2'd2)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macStream_dataStreamOut_doInsertion &&
	  macStream_dataStreamOut_insertState != 2'd0 &&
	  macStream_dataStreamOut_insertState != 2'd1 &&
	  macStream_dataStreamOut_insertState != 2'd2)
	begin
	  v__h7443 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macStream_dataStreamOut_doInsertion &&
	  macStream_dataStreamOut_insertState != 2'd0 &&
	  macStream_dataStreamOut_insertState != 2'd1 &&
	  macStream_dataStreamOut_insertState != 2'd2)
	$write("ImmAssert failed in %m @time=%0t: %s-- %s: ",
	       v__h7443,
	       "\"/home/wengwz/workspace/udp-eth/src/includes/Utils.bsv\", line 200, column 21\n",
	       "unreachible case @ mkDataStreamInsert");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macStream_dataStreamOut_doInsertion &&
	  macStream_dataStreamOut_insertState != 2'd0 &&
	  macStream_dataStreamOut_insertState != 2'd1 &&
	  macStream_dataStreamOut_insertState != 2'd2)
	$write("insertState=");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macStream_dataStreamOut_doInsertion &&
	  macStream_dataStreamOut_insertState != 2'd0 &&
	  macStream_dataStreamOut_insertState != 2'd1 &&
	  macStream_dataStreamOut_insertState != 2'd2)
	$write("CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macStream_dataStreamOut_doInsertion &&
	  macStream_dataStreamOut_insertState != 2'd0 &&
	  macStream_dataStreamOut_insertState != 2'd1 &&
	  macStream_dataStreamOut_insertState != 2'd2)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_macStream_dataStreamOut_doInsertion &&
	  macStream_dataStreamOut_insertState != 2'd0 &&
	  macStream_dataStreamOut_insertState != 2'd1 &&
	  macStream_dataStreamOut_insertState != 2'd2)
	$finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkUdpEthTx


`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif


module RegN(CLK, RST, Q_OUT, D_IN, EN);

   parameter width = 1;
   parameter init  = { width {1'b0} } ;

   input     CLK;
   input     RST;
   input     EN;
   input [width - 1 : 0] D_IN;
   output [width - 1 : 0] Q_OUT;

   reg [width - 1 : 0]    Q_OUT;

   always@(posedge CLK)
     begin
        if (RST == `BSV_RESET_VALUE)
          Q_OUT <= `BSV_ASSIGNMENT_DELAY init;
        else
          begin
             if (EN)
               Q_OUT <= `BSV_ASSIGNMENT_DELAY D_IN;
          end // else: !if(RST == `BSV_RESET_VALUE)
     end

`ifdef BSV_NO_INITIAL_BLOCKS
`else // not BSV_NO_INITIAL_BLOCKS
   // synopsys translate_off
   initial begin
      Q_OUT = {((width + 1)/2){2'b10}} ;
   end
   // synopsys translate_on
`endif // BSV_NO_INITIAL_BLOCKS

endmodule


`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif


// Basic register without reset.
module RegUN(CLK, EN, D_IN, Q_OUT);
   parameter width = 1;

   input     CLK;
   input     EN;
   input [width - 1 : 0] D_IN;

   output [width - 1 : 0] Q_OUT;
   reg [width - 1 : 0]    Q_OUT;

`ifdef BSV_NO_INITIAL_BLOCKS
`else // not BSV_NO_INITIAL_BLOCKS
   // synopsys translate_off
   initial begin
      Q_OUT = {((width + 1)/2){2'b10}} ;
   end
   // synopsys translate_on
`endif // BSV_NO_INITIAL_BLOCKS

   
   always@(posedge CLK)
     begin
        if (EN)
          Q_OUT <= `BSV_ASSIGNMENT_DELAY D_IN;
     end
endmodule


`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

`ifdef BSV_ASYNC_RESET
 `define BSV_ARESET_EDGE_META or `BSV_RESET_EDGE RST
`else
 `define BSV_ARESET_EDGE_META
`endif

`ifdef BSV_RESET_FIFO_HEAD
 `define BSV_ARESET_EDGE_HEAD `BSV_ARESET_EDGE_META
`else
 `define BSV_ARESET_EDGE_HEAD
`endif

// Depth 2 FIFO
module FIFO2(CLK,
             RST,
             D_IN,
             ENQ,
             FULL_N,
             D_OUT,
             DEQ,
             EMPTY_N,
             CLR);

   parameter width = 1;
   parameter guarded = 1'b1;

   input     CLK ;
   input     RST ;
   input [width - 1 : 0] D_IN;
   input                 ENQ;
   input                 DEQ;
   input                 CLR ;

   output                FULL_N;
   output                EMPTY_N;
   output [width - 1 : 0] D_OUT;

   reg                    full_reg;
   reg                    empty_reg;
   reg [width - 1 : 0]    data0_reg;
   reg [width - 1 : 0]    data1_reg;

   assign                 FULL_N = full_reg ;
   assign                 EMPTY_N = empty_reg ;
   assign                 D_OUT = data0_reg ;


   // Optimize the loading logic since state encoding is not power of 2!
   wire                   d0di = (ENQ && ! empty_reg ) || ( ENQ && DEQ && full_reg ) ;
   wire                   d0d1 = DEQ && ! full_reg ;
   wire                   d0h = ((! DEQ) && (! ENQ )) || (!DEQ && empty_reg ) || ( ! ENQ &&full_reg) ;
   wire                   d1di = ENQ & empty_reg ;

`ifdef BSV_NO_INITIAL_BLOCKS
`else // not BSV_NO_INITIAL_BLOCKS
   // synopsys translate_off
   initial
     begin
        data0_reg   = {((width + 1)/2) {2'b10}} ;
        data1_reg  = {((width + 1)/2) {2'b10}} ;
        empty_reg = 1'b0;
        full_reg  = 1'b1;
     end // initial begin
   // synopsys translate_on
`endif // BSV_NO_INITIAL_BLOCKS

   always@(posedge CLK `BSV_ARESET_EDGE_META)
     begin
        if (RST == `BSV_RESET_VALUE)
          begin
             empty_reg <= `BSV_ASSIGNMENT_DELAY 1'b0;
             full_reg  <= `BSV_ASSIGNMENT_DELAY 1'b1;
          end // if (RST == `BSV_RESET_VALUE)
        else
          begin
             if (CLR)
               begin
                  empty_reg <= `BSV_ASSIGNMENT_DELAY 1'b0;
                  full_reg  <= `BSV_ASSIGNMENT_DELAY 1'b1;
               end // if (CLR)
             else if ( ENQ && ! DEQ ) // just enq
               begin
                  empty_reg <= `BSV_ASSIGNMENT_DELAY 1'b1;
                  full_reg <= `BSV_ASSIGNMENT_DELAY ! empty_reg ;
               end
             else if ( DEQ && ! ENQ )
               begin
                  full_reg  <= `BSV_ASSIGNMENT_DELAY 1'b1;
                  empty_reg <= `BSV_ASSIGNMENT_DELAY ! full_reg;
               end // if ( DEQ && ! ENQ )
          end // else: !if(RST == `BSV_RESET_VALUE)

     end // always@ (posedge CLK or `BSV_RESET_EDGE RST)


   always@(posedge CLK `BSV_ARESET_EDGE_HEAD)
     begin
`ifdef BSV_RESET_FIFO_HEAD
        if (RST == `BSV_RESET_VALUE)
          begin
             data0_reg <= `BSV_ASSIGNMENT_DELAY {width {1'b0}} ;
             data1_reg <= `BSV_ASSIGNMENT_DELAY {width {1'b0}} ;
          end
        else
`endif
          begin
             data0_reg  <= `BSV_ASSIGNMENT_DELAY
                           {width{d0di}} & D_IN | {width{d0d1}} & data1_reg | {width{d0h}} & data0_reg ;
             data1_reg <= `BSV_ASSIGNMENT_DELAY
                          d1di ? D_IN : data1_reg ;
          end // else: !if(RST == `BSV_RESET_VALUE)
     end // always@ (posedge CLK or `BSV_RESET_EDGE RST)



   // synopsys translate_off
   always@(posedge CLK)
     begin: error_checks
        reg deqerror, enqerror ;

        deqerror =  0;
        enqerror = 0;
        if (RST == ! `BSV_RESET_VALUE)
          begin
             if ( ! empty_reg && DEQ )
               begin
                  deqerror =  1;
                  $display( "Warning: FIFO2: %m -- Dequeuing from empty fifo" ) ;
               end
             if ( ! full_reg && ENQ && (!DEQ || guarded) )
               begin
                  enqerror = 1;
                  $display( "Warning: FIFO2: %m -- Enqueuing to a full fifo" ) ;
               end
          end
     end // always@ (posedge CLK)
   // synopsys translate_on

endmodule
