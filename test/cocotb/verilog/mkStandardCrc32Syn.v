
//
// Generated by Bluespec Compiler, version 2022.01 (build 066c7a8)
//
// On Tue Apr 25 17:05:08 CST 2023
//
//
// Ports:
// Name                         I/O  size props
// RDY_dataStreamIn_put           O     1 reg
// crcCheckSumOut_first           O    32 reg
// RDY_crcCheckSumOut_first       O     1 reg
// RDY_crcCheckSumOut_deq         O     1 reg
// crcCheckSumOut_notEmpty        O     1 reg
// RDY_crcCheckSumOut_notEmpty    O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// dataStreamIn_put               I   290 reg
// EN_dataStreamIn_put            I     1
// EN_crcCheckSumOut_deq          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkStandardCrc32Syn(CLK,
			  RST_N,

			  dataStreamIn_put,
			  EN_dataStreamIn_put,
			  RDY_dataStreamIn_put,

			  crcCheckSumOut_first,
			  RDY_crcCheckSumOut_first,

			  EN_crcCheckSumOut_deq,
			  RDY_crcCheckSumOut_deq,

			  crcCheckSumOut_notEmpty,
			  RDY_crcCheckSumOut_notEmpty);
  input  CLK;
  input  RST_N;

  // action method dataStreamIn_put
  input  [289 : 0] dataStreamIn_put;
  input  EN_dataStreamIn_put;
  output RDY_dataStreamIn_put;

  // value method crcCheckSumOut_first
  output [31 : 0] crcCheckSumOut_first;
  output RDY_crcCheckSumOut_first;

  // action method crcCheckSumOut_deq
  input  EN_crcCheckSumOut_deq;
  output RDY_crcCheckSumOut_deq;

  // value method crcCheckSumOut_notEmpty
  output crcCheckSumOut_notEmpty;
  output RDY_crcCheckSumOut_notEmpty;

  // signals for module outputs
  wire [31 : 0] crcCheckSumOut_first;
  wire RDY_crcCheckSumOut_deq,
       RDY_crcCheckSumOut_first,
       RDY_crcCheckSumOut_notEmpty,
       RDY_dataStreamIn_put,
       crcCheckSumOut_notEmpty;

  // register standardCrc32_interCrcResult
  reg [31 : 0] standardCrc32_interCrcResult;
  wire [31 : 0] standardCrc32_interCrcResult_D_IN;
  wire standardCrc32_interCrcResult_EN;

  // ports of submodule dataStreamInBuf
  wire [289 : 0] dataStreamInBuf_D_IN, dataStreamInBuf_D_OUT;
  wire dataStreamInBuf_CLR,
       dataStreamInBuf_DEQ,
       dataStreamInBuf_EMPTY_N,
       dataStreamInBuf_ENQ,
       dataStreamInBuf_FULL_N;

  // ports of submodule standardCrc32_accumulatedStream
  wire [70 : 0] standardCrc32_accumulatedStream_D_IN,
		standardCrc32_accumulatedStream_D_OUT;
  wire standardCrc32_accumulatedStream_CLR,
       standardCrc32_accumulatedStream_DEQ,
       standardCrc32_accumulatedStream_EMPTY_N,
       standardCrc32_accumulatedStream_ENQ,
       standardCrc32_accumulatedStream_FULL_N;

  // ports of submodule standardCrc32_crcCtrlSigBuf
  wire [6 : 0] standardCrc32_crcCtrlSigBuf_D_IN,
	       standardCrc32_crcCtrlSigBuf_D_OUT;
  wire standardCrc32_crcCtrlSigBuf_CLR,
       standardCrc32_crcCtrlSigBuf_DEQ,
       standardCrc32_crcCtrlSigBuf_EMPTY_N,
       standardCrc32_crcCtrlSigBuf_ENQ,
       standardCrc32_crcCtrlSigBuf_FULL_N;

  // ports of submodule standardCrc32_crcDramTabVec_0_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_0_regFile_D_IN,
		standardCrc32_crcDramTabVec_0_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_0_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_0_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_0_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_0_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_0_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_0_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_0_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_0_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_10_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_10_regFile_D_IN,
		standardCrc32_crcDramTabVec_10_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_10_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_10_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_10_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_10_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_10_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_10_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_10_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_10_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_11_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_11_regFile_D_IN,
		standardCrc32_crcDramTabVec_11_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_11_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_11_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_11_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_11_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_11_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_11_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_11_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_11_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_12_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_12_regFile_D_IN,
		standardCrc32_crcDramTabVec_12_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_12_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_12_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_12_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_12_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_12_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_12_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_12_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_12_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_13_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_13_regFile_D_IN,
		standardCrc32_crcDramTabVec_13_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_13_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_13_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_13_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_13_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_13_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_13_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_13_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_13_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_14_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_14_regFile_D_IN,
		standardCrc32_crcDramTabVec_14_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_14_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_14_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_14_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_14_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_14_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_14_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_14_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_14_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_15_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_15_regFile_D_IN,
		standardCrc32_crcDramTabVec_15_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_15_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_15_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_15_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_15_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_15_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_15_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_15_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_15_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_16_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_16_regFile_D_IN,
		standardCrc32_crcDramTabVec_16_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_16_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_16_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_16_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_16_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_16_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_16_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_16_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_16_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_17_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_17_regFile_D_IN,
		standardCrc32_crcDramTabVec_17_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_17_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_17_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_17_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_17_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_17_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_17_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_17_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_17_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_18_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_18_regFile_D_IN,
		standardCrc32_crcDramTabVec_18_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_18_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_18_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_18_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_18_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_18_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_18_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_18_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_18_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_19_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_19_regFile_D_IN,
		standardCrc32_crcDramTabVec_19_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_19_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_19_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_19_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_19_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_19_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_19_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_19_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_19_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_1_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_1_regFile_D_IN,
		standardCrc32_crcDramTabVec_1_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_1_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_1_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_1_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_1_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_1_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_1_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_1_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_1_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_20_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_20_regFile_D_IN,
		standardCrc32_crcDramTabVec_20_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_20_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_20_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_20_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_20_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_20_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_20_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_20_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_20_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_21_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_21_regFile_D_IN,
		standardCrc32_crcDramTabVec_21_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_21_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_21_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_21_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_21_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_21_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_21_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_21_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_21_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_22_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_22_regFile_D_IN,
		standardCrc32_crcDramTabVec_22_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_22_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_22_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_22_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_22_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_22_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_22_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_22_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_22_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_23_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_23_regFile_D_IN,
		standardCrc32_crcDramTabVec_23_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_23_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_23_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_23_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_23_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_23_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_23_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_23_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_23_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_24_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_24_regFile_D_IN,
		standardCrc32_crcDramTabVec_24_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_24_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_24_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_24_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_24_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_24_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_24_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_24_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_24_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_25_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_25_regFile_D_IN,
		standardCrc32_crcDramTabVec_25_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_25_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_25_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_25_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_25_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_25_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_25_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_25_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_25_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_26_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_26_regFile_D_IN,
		standardCrc32_crcDramTabVec_26_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_26_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_26_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_26_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_26_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_26_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_26_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_26_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_26_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_27_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_27_regFile_D_IN,
		standardCrc32_crcDramTabVec_27_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_27_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_27_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_27_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_27_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_27_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_27_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_27_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_27_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_28_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_28_regFile_D_IN,
		standardCrc32_crcDramTabVec_28_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_28_regFile_D_OUT_2,
		standardCrc32_crcDramTabVec_28_regFile_D_OUT_3;
  wire [7 : 0] standardCrc32_crcDramTabVec_28_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_28_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_28_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_28_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_28_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_28_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_28_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_29_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_29_regFile_D_IN,
		standardCrc32_crcDramTabVec_29_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_29_regFile_D_OUT_2,
		standardCrc32_crcDramTabVec_29_regFile_D_OUT_3;
  wire [7 : 0] standardCrc32_crcDramTabVec_29_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_29_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_29_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_29_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_29_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_29_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_29_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_2_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_2_regFile_D_IN,
		standardCrc32_crcDramTabVec_2_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_2_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_2_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_2_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_2_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_2_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_2_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_2_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_2_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_30_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_30_regFile_D_IN,
		standardCrc32_crcDramTabVec_30_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_30_regFile_D_OUT_2,
		standardCrc32_crcDramTabVec_30_regFile_D_OUT_3;
  wire [7 : 0] standardCrc32_crcDramTabVec_30_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_30_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_30_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_30_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_30_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_30_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_30_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_31_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_31_regFile_D_IN,
		standardCrc32_crcDramTabVec_31_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_31_regFile_D_OUT_2,
		standardCrc32_crcDramTabVec_31_regFile_D_OUT_3;
  wire [7 : 0] standardCrc32_crcDramTabVec_31_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_31_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_31_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_31_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_31_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_31_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_31_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_3_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_3_regFile_D_IN,
		standardCrc32_crcDramTabVec_3_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_3_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_3_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_3_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_3_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_3_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_3_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_3_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_3_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_4_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_4_regFile_D_IN,
		standardCrc32_crcDramTabVec_4_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_4_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_4_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_4_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_4_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_4_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_4_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_4_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_4_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_5_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_5_regFile_D_IN,
		standardCrc32_crcDramTabVec_5_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_5_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_5_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_5_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_5_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_5_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_5_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_5_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_5_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_6_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_6_regFile_D_IN,
		standardCrc32_crcDramTabVec_6_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_6_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_6_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_6_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_6_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_6_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_6_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_6_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_6_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_7_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_7_regFile_D_IN,
		standardCrc32_crcDramTabVec_7_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_7_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_7_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_7_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_7_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_7_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_7_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_7_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_7_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_8_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_8_regFile_D_IN,
		standardCrc32_crcDramTabVec_8_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_8_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_8_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_8_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_8_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_8_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_8_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_8_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_8_regFile_WE;

  // ports of submodule standardCrc32_crcDramTabVec_9_regFile
  wire [31 : 0] standardCrc32_crcDramTabVec_9_regFile_D_IN,
		standardCrc32_crcDramTabVec_9_regFile_D_OUT_1,
		standardCrc32_crcDramTabVec_9_regFile_D_OUT_2;
  wire [7 : 0] standardCrc32_crcDramTabVec_9_regFile_ADDR_1,
	       standardCrc32_crcDramTabVec_9_regFile_ADDR_2,
	       standardCrc32_crcDramTabVec_9_regFile_ADDR_3,
	       standardCrc32_crcDramTabVec_9_regFile_ADDR_4,
	       standardCrc32_crcDramTabVec_9_regFile_ADDR_5,
	       standardCrc32_crcDramTabVec_9_regFile_ADDR_IN;
  wire standardCrc32_crcDramTabVec_9_regFile_WE;

  // ports of submodule standardCrc32_crcVec8Stream
  wire [255 : 0] standardCrc32_crcVec8Stream_D_IN,
		 standardCrc32_crcVec8Stream_D_OUT;
  wire standardCrc32_crcVec8Stream_CLR,
       standardCrc32_crcVec8Stream_DEQ,
       standardCrc32_crcVec8Stream_EMPTY_N,
       standardCrc32_crcVec8Stream_ENQ,
       standardCrc32_crcVec8Stream_FULL_N;

  // ports of submodule standardCrc32_crcVec8StreamLast
  wire [255 : 0] standardCrc32_crcVec8StreamLast_D_IN,
		 standardCrc32_crcVec8StreamLast_D_OUT;
  wire standardCrc32_crcVec8StreamLast_CLR,
       standardCrc32_crcVec8StreamLast_DEQ,
       standardCrc32_crcVec8StreamLast_EMPTY_N,
       standardCrc32_crcVec8StreamLast_ENQ,
       standardCrc32_crcVec8StreamLast_FULL_N;

  // ports of submodule standardCrc32_curCrcBuf
  wire [31 : 0] standardCrc32_curCrcBuf_D_IN, standardCrc32_curCrcBuf_D_OUT;
  wire standardCrc32_curCrcBuf_CLR,
       standardCrc32_curCrcBuf_DEQ,
       standardCrc32_curCrcBuf_EMPTY_N,
       standardCrc32_curCrcBuf_ENQ,
       standardCrc32_curCrcBuf_FULL_N;

  // ports of submodule standardCrc32_outputBuf
  wire [31 : 0] standardCrc32_outputBuf_D_IN, standardCrc32_outputBuf_D_OUT;
  wire standardCrc32_outputBuf_CLR,
       standardCrc32_outputBuf_DEQ,
       standardCrc32_outputBuf_EMPTY_N,
       standardCrc32_outputBuf_ENQ,
       standardCrc32_outputBuf_FULL_N;

  // ports of submodule standardCrc32_preProcessedStream
  wire [262 : 0] standardCrc32_preProcessedStream_D_IN,
		 standardCrc32_preProcessedStream_D_OUT;
  wire standardCrc32_preProcessedStream_CLR,
       standardCrc32_preProcessedStream_DEQ,
       standardCrc32_preProcessedStream_EMPTY_N,
       standardCrc32_preProcessedStream_ENQ,
       standardCrc32_preProcessedStream_FULL_N;

  // ports of submodule standardCrc32_reducedStream
  wire [38 : 0] standardCrc32_reducedStream_D_IN,
		standardCrc32_reducedStream_D_OUT;
  wire standardCrc32_reducedStream_CLR,
       standardCrc32_reducedStream_DEQ,
       standardCrc32_reducedStream_EMPTY_N,
       standardCrc32_reducedStream_ENQ,
       standardCrc32_reducedStream_FULL_N;

  // ports of submodule standardCrc32_shiftedStream
  wire [262 : 0] standardCrc32_shiftedStream_D_IN,
		 standardCrc32_shiftedStream_D_OUT;
  wire standardCrc32_shiftedStream_CLR,
       standardCrc32_shiftedStream_DEQ,
       standardCrc32_shiftedStream_EMPTY_N,
       standardCrc32_shiftedStream_ENQ,
       standardCrc32_shiftedStream_FULL_N;

  // ports of submodule standardCrc32_shiftedStreamLast
  wire [319 : 0] standardCrc32_shiftedStreamLast_D_IN,
		 standardCrc32_shiftedStreamLast_D_OUT;
  wire standardCrc32_shiftedStreamLast_CLR,
       standardCrc32_shiftedStreamLast_DEQ,
       standardCrc32_shiftedStreamLast_EMPTY_N,
       standardCrc32_shiftedStreamLast_ENQ,
       standardCrc32_shiftedStreamLast_FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_standardCrc32_preProcessing,
       WILL_FIRE_RL_standardCrc32_shiftOutExtraByte;

  // remaining internal signals
  reg [7 : 0] CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q33,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q34,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q35,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q36,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q37,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q38,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q39,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q40,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q41,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q42,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q43,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q44,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q45,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q46,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q47,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q48,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q49,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q50,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q51,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q52,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q53,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q54,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q55,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q56,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q57,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q58,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q59,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q60,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q61,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q62,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q63,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q64,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q65,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q66,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q67,
	      CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q68,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q1,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q10,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q11,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q12,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q13,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q2,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q3,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q4,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q5,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q6,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q7,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q8,
	      CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q9;
  wire [279 : 0] IF_standardCrc32_accumulatedStream_first__28_B_ETC___d823;
  wire [255 : 0] crcContext_data__h16117, x__h40105;
  wire [191 : 0] standardCrc32_crcDramTabVec_28_regFile_sub_sta_ETC___d653,
		 standardCrc32_crcDramTabVec_28_regFile_sub_sta_ETC___d905;
  wire [127 : 0] standardCrc32_crcDramTabVec_28_regFile_sub_sta_ETC___d630,
		 standardCrc32_crcDramTabVec_28_regFile_sub_sta_ETC___d882;
  wire [31 : 0] INV_finalCrcRes54502__q69,
		crc1__h131434,
		crc1__h133337,
		crc1__h133614,
		crc1__h133891,
		crc1__h134168,
		crc1__h134445,
		crc1__h134722,
		crc1__h134999,
		crc1__h136291,
		crc1__h136320,
		crc1__h136599,
		crc1__h137307,
		crc1__h251625,
		crc1__h252608,
		crc1__h252873,
		crc1__h253138,
		crc1__h253403,
		crc1__h253668,
		crc1__h253933,
		crc1__h254198,
		crc1__h255806,
		crc1__h255835,
		crc1__h256114,
		crc2__h131435,
		crc2__h133338,
		crc2__h133615,
		crc2__h133892,
		crc2__h134169,
		crc2__h134446,
		crc2__h134723,
		crc2__h135000,
		crc2__h136292,
		crc2__h136321,
		crc2__h136600,
		crc2__h137308,
		crc2__h251626,
		crc2__h252609,
		crc2__h252874,
		crc2__h253139,
		crc2__h253404,
		crc2__h253669,
		crc2__h253934,
		crc2__h254199,
		crc2__h255807,
		crc2__h255836,
		crc2__h256115,
		finalCrcRes__h254502,
		nextCrc__h136899,
		x__h135325,
		x__h137695;
  wire [5 : 0] x__h34843;
  wire standardCrc32_accumulatedStream_first__28_BITS_ETC___d731;

  // action method dataStreamIn_put
  assign RDY_dataStreamIn_put = dataStreamInBuf_FULL_N ;

  // value method crcCheckSumOut_first
  assign crcCheckSumOut_first = standardCrc32_outputBuf_D_OUT ;
  assign RDY_crcCheckSumOut_first = standardCrc32_outputBuf_EMPTY_N ;

  // action method crcCheckSumOut_deq
  assign RDY_crcCheckSumOut_deq = standardCrc32_outputBuf_EMPTY_N ;

  // value method crcCheckSumOut_notEmpty
  assign crcCheckSumOut_notEmpty = standardCrc32_outputBuf_EMPTY_N ;
  assign RDY_crcCheckSumOut_notEmpty = 1'd1 ;

  // submodule dataStreamInBuf
  FIFO2 #(.width(32'd290), .guarded(1'd1)) dataStreamInBuf(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(dataStreamInBuf_D_IN),
							   .ENQ(dataStreamInBuf_ENQ),
							   .DEQ(dataStreamInBuf_DEQ),
							   .CLR(dataStreamInBuf_CLR),
							   .D_OUT(dataStreamInBuf_D_OUT),
							   .FULL_N(dataStreamInBuf_FULL_N),
							   .EMPTY_N(dataStreamInBuf_EMPTY_N));

  // submodule standardCrc32_accumulatedStream
  FIFO2 #(.width(32'd71),
	  .guarded(1'd1)) standardCrc32_accumulatedStream(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(standardCrc32_accumulatedStream_D_IN),
							  .ENQ(standardCrc32_accumulatedStream_ENQ),
							  .DEQ(standardCrc32_accumulatedStream_DEQ),
							  .CLR(standardCrc32_accumulatedStream_CLR),
							  .D_OUT(standardCrc32_accumulatedStream_D_OUT),
							  .FULL_N(standardCrc32_accumulatedStream_FULL_N),
							  .EMPTY_N(standardCrc32_accumulatedStream_EMPTY_N));

  // submodule standardCrc32_crcCtrlSigBuf
  FIFO2 #(.width(32'd7),
	  .guarded(1'd1)) standardCrc32_crcCtrlSigBuf(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(standardCrc32_crcCtrlSigBuf_D_IN),
						      .ENQ(standardCrc32_crcCtrlSigBuf_ENQ),
						      .DEQ(standardCrc32_crcCtrlSigBuf_DEQ),
						      .CLR(standardCrc32_crcCtrlSigBuf_CLR),
						      .D_OUT(standardCrc32_crcCtrlSigBuf_D_OUT),
						      .FULL_N(standardCrc32_crcCtrlSigBuf_FULL_N),
						      .EMPTY_N(standardCrc32_crcCtrlSigBuf_EMPTY_N));

  // submodule standardCrc32_crcDramTabVec_0_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_0.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_0_regFile(.CLK(CLK),
								     .ADDR_1(standardCrc32_crcDramTabVec_0_regFile_ADDR_1),
								     .ADDR_2(standardCrc32_crcDramTabVec_0_regFile_ADDR_2),
								     .ADDR_3(standardCrc32_crcDramTabVec_0_regFile_ADDR_3),
								     .ADDR_4(standardCrc32_crcDramTabVec_0_regFile_ADDR_4),
								     .ADDR_5(standardCrc32_crcDramTabVec_0_regFile_ADDR_5),
								     .ADDR_IN(standardCrc32_crcDramTabVec_0_regFile_ADDR_IN),
								     .D_IN(standardCrc32_crcDramTabVec_0_regFile_D_IN),
								     .WE(standardCrc32_crcDramTabVec_0_regFile_WE),
								     .D_OUT_1(standardCrc32_crcDramTabVec_0_regFile_D_OUT_1),
								     .D_OUT_2(standardCrc32_crcDramTabVec_0_regFile_D_OUT_2),
								     .D_OUT_3(),
								     .D_OUT_4(),
								     .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_10_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_10.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_10_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_10_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_10_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_10_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_10_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_10_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_10_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_10_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_10_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_10_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_10_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_11_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_11.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_11_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_11_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_11_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_11_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_11_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_11_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_11_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_11_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_11_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_11_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_11_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_12_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_12.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_12_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_12_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_12_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_12_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_12_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_12_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_12_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_12_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_12_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_12_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_12_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_13_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_13.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_13_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_13_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_13_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_13_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_13_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_13_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_13_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_13_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_13_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_13_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_13_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_14_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_14.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_14_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_14_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_14_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_14_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_14_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_14_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_14_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_14_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_14_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_14_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_14_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_15_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_15.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_15_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_15_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_15_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_15_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_15_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_15_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_15_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_15_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_15_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_15_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_15_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_16_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_16.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_16_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_16_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_16_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_16_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_16_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_16_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_16_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_16_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_16_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_16_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_16_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_17_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_17.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_17_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_17_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_17_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_17_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_17_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_17_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_17_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_17_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_17_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_17_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_17_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_18_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_18.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_18_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_18_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_18_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_18_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_18_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_18_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_18_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_18_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_18_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_18_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_18_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_19_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_19.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_19_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_19_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_19_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_19_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_19_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_19_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_19_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_19_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_19_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_19_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_19_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_1_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_1.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_1_regFile(.CLK(CLK),
								     .ADDR_1(standardCrc32_crcDramTabVec_1_regFile_ADDR_1),
								     .ADDR_2(standardCrc32_crcDramTabVec_1_regFile_ADDR_2),
								     .ADDR_3(standardCrc32_crcDramTabVec_1_regFile_ADDR_3),
								     .ADDR_4(standardCrc32_crcDramTabVec_1_regFile_ADDR_4),
								     .ADDR_5(standardCrc32_crcDramTabVec_1_regFile_ADDR_5),
								     .ADDR_IN(standardCrc32_crcDramTabVec_1_regFile_ADDR_IN),
								     .D_IN(standardCrc32_crcDramTabVec_1_regFile_D_IN),
								     .WE(standardCrc32_crcDramTabVec_1_regFile_WE),
								     .D_OUT_1(standardCrc32_crcDramTabVec_1_regFile_D_OUT_1),
								     .D_OUT_2(standardCrc32_crcDramTabVec_1_regFile_D_OUT_2),
								     .D_OUT_3(),
								     .D_OUT_4(),
								     .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_20_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_20.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_20_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_20_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_20_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_20_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_20_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_20_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_20_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_20_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_20_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_20_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_20_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_21_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_21.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_21_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_21_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_21_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_21_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_21_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_21_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_21_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_21_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_21_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_21_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_21_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_22_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_22.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_22_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_22_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_22_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_22_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_22_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_22_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_22_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_22_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_22_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_22_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_22_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_23_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_23.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_23_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_23_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_23_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_23_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_23_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_23_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_23_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_23_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_23_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_23_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_23_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_24_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_24.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_24_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_24_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_24_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_24_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_24_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_24_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_24_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_24_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_24_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_24_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_24_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_25_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_25.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_25_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_25_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_25_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_25_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_25_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_25_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_25_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_25_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_25_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_25_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_25_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_26_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_26.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_26_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_26_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_26_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_26_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_26_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_26_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_26_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_26_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_26_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_26_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_26_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_27_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_27.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_27_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_27_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_27_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_27_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_27_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_27_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_27_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_27_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_27_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_27_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_27_regFile_D_OUT_2),
								      .D_OUT_3(),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_28_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_28.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_28_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_28_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_28_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_28_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_28_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_28_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_28_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_28_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_28_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_28_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_28_regFile_D_OUT_2),
								      .D_OUT_3(standardCrc32_crcDramTabVec_28_regFile_D_OUT_3),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_29_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_29.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_29_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_29_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_29_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_29_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_29_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_29_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_29_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_29_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_29_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_29_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_29_regFile_D_OUT_2),
								      .D_OUT_3(standardCrc32_crcDramTabVec_29_regFile_D_OUT_3),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_2_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_2.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_2_regFile(.CLK(CLK),
								     .ADDR_1(standardCrc32_crcDramTabVec_2_regFile_ADDR_1),
								     .ADDR_2(standardCrc32_crcDramTabVec_2_regFile_ADDR_2),
								     .ADDR_3(standardCrc32_crcDramTabVec_2_regFile_ADDR_3),
								     .ADDR_4(standardCrc32_crcDramTabVec_2_regFile_ADDR_4),
								     .ADDR_5(standardCrc32_crcDramTabVec_2_regFile_ADDR_5),
								     .ADDR_IN(standardCrc32_crcDramTabVec_2_regFile_ADDR_IN),
								     .D_IN(standardCrc32_crcDramTabVec_2_regFile_D_IN),
								     .WE(standardCrc32_crcDramTabVec_2_regFile_WE),
								     .D_OUT_1(standardCrc32_crcDramTabVec_2_regFile_D_OUT_1),
								     .D_OUT_2(standardCrc32_crcDramTabVec_2_regFile_D_OUT_2),
								     .D_OUT_3(),
								     .D_OUT_4(),
								     .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_30_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_30.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_30_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_30_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_30_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_30_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_30_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_30_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_30_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_30_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_30_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_30_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_30_regFile_D_OUT_2),
								      .D_OUT_3(standardCrc32_crcDramTabVec_30_regFile_D_OUT_3),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_31_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_31.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_31_regFile(.CLK(CLK),
								      .ADDR_1(standardCrc32_crcDramTabVec_31_regFile_ADDR_1),
								      .ADDR_2(standardCrc32_crcDramTabVec_31_regFile_ADDR_2),
								      .ADDR_3(standardCrc32_crcDramTabVec_31_regFile_ADDR_3),
								      .ADDR_4(standardCrc32_crcDramTabVec_31_regFile_ADDR_4),
								      .ADDR_5(standardCrc32_crcDramTabVec_31_regFile_ADDR_5),
								      .ADDR_IN(standardCrc32_crcDramTabVec_31_regFile_ADDR_IN),
								      .D_IN(standardCrc32_crcDramTabVec_31_regFile_D_IN),
								      .WE(standardCrc32_crcDramTabVec_31_regFile_WE),
								      .D_OUT_1(standardCrc32_crcDramTabVec_31_regFile_D_OUT_1),
								      .D_OUT_2(standardCrc32_crcDramTabVec_31_regFile_D_OUT_2),
								      .D_OUT_3(standardCrc32_crcDramTabVec_31_regFile_D_OUT_3),
								      .D_OUT_4(),
								      .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_3_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_3.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_3_regFile(.CLK(CLK),
								     .ADDR_1(standardCrc32_crcDramTabVec_3_regFile_ADDR_1),
								     .ADDR_2(standardCrc32_crcDramTabVec_3_regFile_ADDR_2),
								     .ADDR_3(standardCrc32_crcDramTabVec_3_regFile_ADDR_3),
								     .ADDR_4(standardCrc32_crcDramTabVec_3_regFile_ADDR_4),
								     .ADDR_5(standardCrc32_crcDramTabVec_3_regFile_ADDR_5),
								     .ADDR_IN(standardCrc32_crcDramTabVec_3_regFile_ADDR_IN),
								     .D_IN(standardCrc32_crcDramTabVec_3_regFile_D_IN),
								     .WE(standardCrc32_crcDramTabVec_3_regFile_WE),
								     .D_OUT_1(standardCrc32_crcDramTabVec_3_regFile_D_OUT_1),
								     .D_OUT_2(standardCrc32_crcDramTabVec_3_regFile_D_OUT_2),
								     .D_OUT_3(),
								     .D_OUT_4(),
								     .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_4_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_4.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_4_regFile(.CLK(CLK),
								     .ADDR_1(standardCrc32_crcDramTabVec_4_regFile_ADDR_1),
								     .ADDR_2(standardCrc32_crcDramTabVec_4_regFile_ADDR_2),
								     .ADDR_3(standardCrc32_crcDramTabVec_4_regFile_ADDR_3),
								     .ADDR_4(standardCrc32_crcDramTabVec_4_regFile_ADDR_4),
								     .ADDR_5(standardCrc32_crcDramTabVec_4_regFile_ADDR_5),
								     .ADDR_IN(standardCrc32_crcDramTabVec_4_regFile_ADDR_IN),
								     .D_IN(standardCrc32_crcDramTabVec_4_regFile_D_IN),
								     .WE(standardCrc32_crcDramTabVec_4_regFile_WE),
								     .D_OUT_1(standardCrc32_crcDramTabVec_4_regFile_D_OUT_1),
								     .D_OUT_2(standardCrc32_crcDramTabVec_4_regFile_D_OUT_2),
								     .D_OUT_3(),
								     .D_OUT_4(),
								     .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_5_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_5.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_5_regFile(.CLK(CLK),
								     .ADDR_1(standardCrc32_crcDramTabVec_5_regFile_ADDR_1),
								     .ADDR_2(standardCrc32_crcDramTabVec_5_regFile_ADDR_2),
								     .ADDR_3(standardCrc32_crcDramTabVec_5_regFile_ADDR_3),
								     .ADDR_4(standardCrc32_crcDramTabVec_5_regFile_ADDR_4),
								     .ADDR_5(standardCrc32_crcDramTabVec_5_regFile_ADDR_5),
								     .ADDR_IN(standardCrc32_crcDramTabVec_5_regFile_ADDR_IN),
								     .D_IN(standardCrc32_crcDramTabVec_5_regFile_D_IN),
								     .WE(standardCrc32_crcDramTabVec_5_regFile_WE),
								     .D_OUT_1(standardCrc32_crcDramTabVec_5_regFile_D_OUT_1),
								     .D_OUT_2(standardCrc32_crcDramTabVec_5_regFile_D_OUT_2),
								     .D_OUT_3(),
								     .D_OUT_4(),
								     .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_6_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_6.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_6_regFile(.CLK(CLK),
								     .ADDR_1(standardCrc32_crcDramTabVec_6_regFile_ADDR_1),
								     .ADDR_2(standardCrc32_crcDramTabVec_6_regFile_ADDR_2),
								     .ADDR_3(standardCrc32_crcDramTabVec_6_regFile_ADDR_3),
								     .ADDR_4(standardCrc32_crcDramTabVec_6_regFile_ADDR_4),
								     .ADDR_5(standardCrc32_crcDramTabVec_6_regFile_ADDR_5),
								     .ADDR_IN(standardCrc32_crcDramTabVec_6_regFile_ADDR_IN),
								     .D_IN(standardCrc32_crcDramTabVec_6_regFile_D_IN),
								     .WE(standardCrc32_crcDramTabVec_6_regFile_WE),
								     .D_OUT_1(standardCrc32_crcDramTabVec_6_regFile_D_OUT_1),
								     .D_OUT_2(standardCrc32_crcDramTabVec_6_regFile_D_OUT_2),
								     .D_OUT_3(),
								     .D_OUT_4(),
								     .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_7_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_7.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_7_regFile(.CLK(CLK),
								     .ADDR_1(standardCrc32_crcDramTabVec_7_regFile_ADDR_1),
								     .ADDR_2(standardCrc32_crcDramTabVec_7_regFile_ADDR_2),
								     .ADDR_3(standardCrc32_crcDramTabVec_7_regFile_ADDR_3),
								     .ADDR_4(standardCrc32_crcDramTabVec_7_regFile_ADDR_4),
								     .ADDR_5(standardCrc32_crcDramTabVec_7_regFile_ADDR_5),
								     .ADDR_IN(standardCrc32_crcDramTabVec_7_regFile_ADDR_IN),
								     .D_IN(standardCrc32_crcDramTabVec_7_regFile_D_IN),
								     .WE(standardCrc32_crcDramTabVec_7_regFile_WE),
								     .D_OUT_1(standardCrc32_crcDramTabVec_7_regFile_D_OUT_1),
								     .D_OUT_2(standardCrc32_crcDramTabVec_7_regFile_D_OUT_2),
								     .D_OUT_3(),
								     .D_OUT_4(),
								     .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_8_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_8.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_8_regFile(.CLK(CLK),
								     .ADDR_1(standardCrc32_crcDramTabVec_8_regFile_ADDR_1),
								     .ADDR_2(standardCrc32_crcDramTabVec_8_regFile_ADDR_2),
								     .ADDR_3(standardCrc32_crcDramTabVec_8_regFile_ADDR_3),
								     .ADDR_4(standardCrc32_crcDramTabVec_8_regFile_ADDR_4),
								     .ADDR_5(standardCrc32_crcDramTabVec_8_regFile_ADDR_5),
								     .ADDR_IN(standardCrc32_crcDramTabVec_8_regFile_ADDR_IN),
								     .D_IN(standardCrc32_crcDramTabVec_8_regFile_D_IN),
								     .WE(standardCrc32_crcDramTabVec_8_regFile_WE),
								     .D_OUT_1(standardCrc32_crcDramTabVec_8_regFile_D_OUT_1),
								     .D_OUT_2(standardCrc32_crcDramTabVec_8_regFile_D_OUT_2),
								     .D_OUT_3(),
								     .D_OUT_4(),
								     .D_OUT_5());

  // submodule standardCrc32_crcDramTabVec_9_regFile
  RegFileLoad #(.file("/home/wengwz/workspace/udp-eth/crc32tab/crc32_tab_9.txt"),
		.addr_width(32'd8),
		.data_width(32'd32),
		.lo(8'h0),
		.hi(8'd255),
		.binary(1'd0)) standardCrc32_crcDramTabVec_9_regFile(.CLK(CLK),
								     .ADDR_1(standardCrc32_crcDramTabVec_9_regFile_ADDR_1),
								     .ADDR_2(standardCrc32_crcDramTabVec_9_regFile_ADDR_2),
								     .ADDR_3(standardCrc32_crcDramTabVec_9_regFile_ADDR_3),
								     .ADDR_4(standardCrc32_crcDramTabVec_9_regFile_ADDR_4),
								     .ADDR_5(standardCrc32_crcDramTabVec_9_regFile_ADDR_5),
								     .ADDR_IN(standardCrc32_crcDramTabVec_9_regFile_ADDR_IN),
								     .D_IN(standardCrc32_crcDramTabVec_9_regFile_D_IN),
								     .WE(standardCrc32_crcDramTabVec_9_regFile_WE),
								     .D_OUT_1(standardCrc32_crcDramTabVec_9_regFile_D_OUT_1),
								     .D_OUT_2(standardCrc32_crcDramTabVec_9_regFile_D_OUT_2),
								     .D_OUT_3(),
								     .D_OUT_4(),
								     .D_OUT_5());

  // submodule standardCrc32_crcVec8Stream
  FIFO2 #(.width(32'd256),
	  .guarded(1'd1)) standardCrc32_crcVec8Stream(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(standardCrc32_crcVec8Stream_D_IN),
						      .ENQ(standardCrc32_crcVec8Stream_ENQ),
						      .DEQ(standardCrc32_crcVec8Stream_DEQ),
						      .CLR(standardCrc32_crcVec8Stream_CLR),
						      .D_OUT(standardCrc32_crcVec8Stream_D_OUT),
						      .FULL_N(standardCrc32_crcVec8Stream_FULL_N),
						      .EMPTY_N(standardCrc32_crcVec8Stream_EMPTY_N));

  // submodule standardCrc32_crcVec8StreamLast
  FIFO2 #(.width(32'd256),
	  .guarded(1'd1)) standardCrc32_crcVec8StreamLast(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(standardCrc32_crcVec8StreamLast_D_IN),
							  .ENQ(standardCrc32_crcVec8StreamLast_ENQ),
							  .DEQ(standardCrc32_crcVec8StreamLast_DEQ),
							  .CLR(standardCrc32_crcVec8StreamLast_CLR),
							  .D_OUT(standardCrc32_crcVec8StreamLast_D_OUT),
							  .FULL_N(standardCrc32_crcVec8StreamLast_FULL_N),
							  .EMPTY_N(standardCrc32_crcVec8StreamLast_EMPTY_N));

  // submodule standardCrc32_curCrcBuf
  FIFO2 #(.width(32'd32), .guarded(1'd1)) standardCrc32_curCrcBuf(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(standardCrc32_curCrcBuf_D_IN),
								  .ENQ(standardCrc32_curCrcBuf_ENQ),
								  .DEQ(standardCrc32_curCrcBuf_DEQ),
								  .CLR(standardCrc32_curCrcBuf_CLR),
								  .D_OUT(standardCrc32_curCrcBuf_D_OUT),
								  .FULL_N(standardCrc32_curCrcBuf_FULL_N),
								  .EMPTY_N(standardCrc32_curCrcBuf_EMPTY_N));

  // submodule standardCrc32_outputBuf
  FIFO2 #(.width(32'd32), .guarded(1'd1)) standardCrc32_outputBuf(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(standardCrc32_outputBuf_D_IN),
								  .ENQ(standardCrc32_outputBuf_ENQ),
								  .DEQ(standardCrc32_outputBuf_DEQ),
								  .CLR(standardCrc32_outputBuf_CLR),
								  .D_OUT(standardCrc32_outputBuf_D_OUT),
								  .FULL_N(standardCrc32_outputBuf_FULL_N),
								  .EMPTY_N(standardCrc32_outputBuf_EMPTY_N));

  // submodule standardCrc32_preProcessedStream
  FIFO2 #(.width(32'd263),
	  .guarded(1'd1)) standardCrc32_preProcessedStream(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(standardCrc32_preProcessedStream_D_IN),
							   .ENQ(standardCrc32_preProcessedStream_ENQ),
							   .DEQ(standardCrc32_preProcessedStream_DEQ),
							   .CLR(standardCrc32_preProcessedStream_CLR),
							   .D_OUT(standardCrc32_preProcessedStream_D_OUT),
							   .FULL_N(standardCrc32_preProcessedStream_FULL_N),
							   .EMPTY_N(standardCrc32_preProcessedStream_EMPTY_N));

  // submodule standardCrc32_reducedStream
  FIFO2 #(.width(32'd39),
	  .guarded(1'd1)) standardCrc32_reducedStream(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(standardCrc32_reducedStream_D_IN),
						      .ENQ(standardCrc32_reducedStream_ENQ),
						      .DEQ(standardCrc32_reducedStream_DEQ),
						      .CLR(standardCrc32_reducedStream_CLR),
						      .D_OUT(standardCrc32_reducedStream_D_OUT),
						      .FULL_N(standardCrc32_reducedStream_FULL_N),
						      .EMPTY_N(standardCrc32_reducedStream_EMPTY_N));

  // submodule standardCrc32_shiftedStream
  FIFO2 #(.width(32'd263),
	  .guarded(1'd1)) standardCrc32_shiftedStream(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(standardCrc32_shiftedStream_D_IN),
						      .ENQ(standardCrc32_shiftedStream_ENQ),
						      .DEQ(standardCrc32_shiftedStream_DEQ),
						      .CLR(standardCrc32_shiftedStream_CLR),
						      .D_OUT(standardCrc32_shiftedStream_D_OUT),
						      .FULL_N(standardCrc32_shiftedStream_FULL_N),
						      .EMPTY_N(standardCrc32_shiftedStream_EMPTY_N));

  // submodule standardCrc32_shiftedStreamLast
  FIFO2 #(.width(32'd320),
	  .guarded(1'd1)) standardCrc32_shiftedStreamLast(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(standardCrc32_shiftedStreamLast_D_IN),
							  .ENQ(standardCrc32_shiftedStreamLast_ENQ),
							  .DEQ(standardCrc32_shiftedStreamLast_DEQ),
							  .CLR(standardCrc32_shiftedStreamLast_CLR),
							  .D_OUT(standardCrc32_shiftedStreamLast_D_OUT),
							  .FULL_N(standardCrc32_shiftedStreamLast_FULL_N),
							  .EMPTY_N(standardCrc32_shiftedStreamLast_EMPTY_N));

  // rule RL_standardCrc32_preProcessing
  assign WILL_FIRE_RL_standardCrc32_preProcessing =
	     dataStreamInBuf_EMPTY_N &&
	     standardCrc32_preProcessedStream_FULL_N ;

  // rule RL_standardCrc32_shiftOutExtraByte
  assign WILL_FIRE_RL_standardCrc32_shiftOutExtraByte =
	     standardCrc32_preProcessedStream_EMPTY_N &&
	     standardCrc32_shiftedStream_FULL_N ;

  // register standardCrc32_interCrcResult
  assign standardCrc32_interCrcResult_D_IN =
	     standardCrc32_reducedStream_D_OUT[6] ?
	       32'hFFFFFFFF :
	       nextCrc__h136899 ;
  assign standardCrc32_interCrcResult_EN =
	     standardCrc32_reducedStream_EMPTY_N &&
	     (!standardCrc32_reducedStream_D_OUT[6] ||
	      standardCrc32_accumulatedStream_FULL_N) ;

  // submodule dataStreamInBuf
  assign dataStreamInBuf_D_IN = dataStreamIn_put ;
  assign dataStreamInBuf_ENQ = EN_dataStreamIn_put ;
  assign dataStreamInBuf_DEQ = WILL_FIRE_RL_standardCrc32_preProcessing ;
  assign dataStreamInBuf_CLR = 1'b0 ;

  // submodule standardCrc32_accumulatedStream
  assign standardCrc32_accumulatedStream_D_IN =
	     { standardCrc32_reducedStream_D_OUT[38:7],
	       standardCrc32_interCrcResult,
	       standardCrc32_reducedStream_D_OUT[6:0] } ;
  assign standardCrc32_accumulatedStream_ENQ =
	     standardCrc32_reducedStream_EMPTY_N &&
	     (!standardCrc32_reducedStream_D_OUT[6] ||
	      standardCrc32_accumulatedStream_FULL_N) &&
	     standardCrc32_reducedStream_D_OUT[6] ;
  assign standardCrc32_accumulatedStream_DEQ =
	     standardCrc32_accumulatedStream_EMPTY_N &&
	     standardCrc32_shiftedStreamLast_FULL_N ;
  assign standardCrc32_accumulatedStream_CLR = 1'b0 ;

  // submodule standardCrc32_crcCtrlSigBuf
  assign standardCrc32_crcCtrlSigBuf_D_IN =
	     standardCrc32_shiftedStream_D_OUT[6:0] ;
  assign standardCrc32_crcCtrlSigBuf_ENQ =
	     standardCrc32_shiftedStream_EMPTY_N &&
	     standardCrc32_crcVec8Stream_FULL_N &&
	     standardCrc32_crcCtrlSigBuf_FULL_N ;
  assign standardCrc32_crcCtrlSigBuf_DEQ =
	     standardCrc32_crcVec8Stream_EMPTY_N &&
	     standardCrc32_crcCtrlSigBuf_EMPTY_N &&
	     standardCrc32_reducedStream_FULL_N ;
  assign standardCrc32_crcCtrlSigBuf_CLR = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_0_regFile
  assign standardCrc32_crcDramTabVec_0_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[7:0] ;
  assign standardCrc32_crcDramTabVec_0_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[14:7] ;
  assign standardCrc32_crcDramTabVec_0_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_0_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_0_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_0_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_0_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_0_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_10_regFile
  assign standardCrc32_crcDramTabVec_10_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[87:80] ;
  assign standardCrc32_crcDramTabVec_10_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[94:87] ;
  assign standardCrc32_crcDramTabVec_10_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_10_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_10_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_10_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_10_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_10_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_11_regFile
  assign standardCrc32_crcDramTabVec_11_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[95:88] ;
  assign standardCrc32_crcDramTabVec_11_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[102:95] ;
  assign standardCrc32_crcDramTabVec_11_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_11_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_11_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_11_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_11_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_11_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_12_regFile
  assign standardCrc32_crcDramTabVec_12_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[103:96] ;
  assign standardCrc32_crcDramTabVec_12_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[110:103] ;
  assign standardCrc32_crcDramTabVec_12_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_12_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_12_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_12_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_12_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_12_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_13_regFile
  assign standardCrc32_crcDramTabVec_13_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[111:104] ;
  assign standardCrc32_crcDramTabVec_13_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[118:111] ;
  assign standardCrc32_crcDramTabVec_13_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_13_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_13_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_13_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_13_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_13_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_14_regFile
  assign standardCrc32_crcDramTabVec_14_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[119:112] ;
  assign standardCrc32_crcDramTabVec_14_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[126:119] ;
  assign standardCrc32_crcDramTabVec_14_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_14_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_14_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_14_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_14_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_14_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_15_regFile
  assign standardCrc32_crcDramTabVec_15_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[127:120] ;
  assign standardCrc32_crcDramTabVec_15_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[134:127] ;
  assign standardCrc32_crcDramTabVec_15_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_15_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_15_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_15_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_15_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_15_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_16_regFile
  assign standardCrc32_crcDramTabVec_16_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[135:128] ;
  assign standardCrc32_crcDramTabVec_16_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[142:135] ;
  assign standardCrc32_crcDramTabVec_16_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_16_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_16_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_16_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_16_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_16_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_17_regFile
  assign standardCrc32_crcDramTabVec_17_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[143:136] ;
  assign standardCrc32_crcDramTabVec_17_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[150:143] ;
  assign standardCrc32_crcDramTabVec_17_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_17_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_17_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_17_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_17_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_17_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_18_regFile
  assign standardCrc32_crcDramTabVec_18_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[151:144] ;
  assign standardCrc32_crcDramTabVec_18_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[158:151] ;
  assign standardCrc32_crcDramTabVec_18_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_18_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_18_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_18_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_18_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_18_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_19_regFile
  assign standardCrc32_crcDramTabVec_19_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[159:152] ;
  assign standardCrc32_crcDramTabVec_19_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[166:159] ;
  assign standardCrc32_crcDramTabVec_19_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_19_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_19_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_19_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_19_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_19_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_1_regFile
  assign standardCrc32_crcDramTabVec_1_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[15:8] ;
  assign standardCrc32_crcDramTabVec_1_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[22:15] ;
  assign standardCrc32_crcDramTabVec_1_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_1_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_1_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_1_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_1_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_1_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_20_regFile
  assign standardCrc32_crcDramTabVec_20_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[167:160] ;
  assign standardCrc32_crcDramTabVec_20_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[174:167] ;
  assign standardCrc32_crcDramTabVec_20_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_20_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_20_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_20_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_20_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_20_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_21_regFile
  assign standardCrc32_crcDramTabVec_21_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[175:168] ;
  assign standardCrc32_crcDramTabVec_21_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[182:175] ;
  assign standardCrc32_crcDramTabVec_21_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_21_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_21_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_21_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_21_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_21_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_22_regFile
  assign standardCrc32_crcDramTabVec_22_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[183:176] ;
  assign standardCrc32_crcDramTabVec_22_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[190:183] ;
  assign standardCrc32_crcDramTabVec_22_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_22_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_22_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_22_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_22_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_22_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_23_regFile
  assign standardCrc32_crcDramTabVec_23_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[191:184] ;
  assign standardCrc32_crcDramTabVec_23_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[198:191] ;
  assign standardCrc32_crcDramTabVec_23_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_23_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_23_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_23_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_23_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_23_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_24_regFile
  assign standardCrc32_crcDramTabVec_24_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[199:192] ;
  assign standardCrc32_crcDramTabVec_24_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[206:199] ;
  assign standardCrc32_crcDramTabVec_24_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_24_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_24_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_24_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_24_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_24_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_25_regFile
  assign standardCrc32_crcDramTabVec_25_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[207:200] ;
  assign standardCrc32_crcDramTabVec_25_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[214:207] ;
  assign standardCrc32_crcDramTabVec_25_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_25_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_25_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_25_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_25_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_25_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_26_regFile
  assign standardCrc32_crcDramTabVec_26_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[215:208] ;
  assign standardCrc32_crcDramTabVec_26_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[222:215] ;
  assign standardCrc32_crcDramTabVec_26_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_26_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_26_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_26_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_26_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_26_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_27_regFile
  assign standardCrc32_crcDramTabVec_27_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[223:216] ;
  assign standardCrc32_crcDramTabVec_27_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[230:223] ;
  assign standardCrc32_crcDramTabVec_27_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_27_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_27_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_27_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_27_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_27_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_28_regFile
  assign standardCrc32_crcDramTabVec_28_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[231:224] ;
  assign standardCrc32_crcDramTabVec_28_regFile_ADDR_2 =
	     standardCrc32_interCrcResult[7:0] ;
  assign standardCrc32_crcDramTabVec_28_regFile_ADDR_3 =
	     standardCrc32_shiftedStream_D_OUT[238:231] ;
  assign standardCrc32_crcDramTabVec_28_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_28_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_28_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_28_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_28_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_29_regFile
  assign standardCrc32_crcDramTabVec_29_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[239:232] ;
  assign standardCrc32_crcDramTabVec_29_regFile_ADDR_2 =
	     standardCrc32_interCrcResult[15:8] ;
  assign standardCrc32_crcDramTabVec_29_regFile_ADDR_3 =
	     standardCrc32_shiftedStream_D_OUT[246:239] ;
  assign standardCrc32_crcDramTabVec_29_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_29_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_29_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_29_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_29_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_2_regFile
  assign standardCrc32_crcDramTabVec_2_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[23:16] ;
  assign standardCrc32_crcDramTabVec_2_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[30:23] ;
  assign standardCrc32_crcDramTabVec_2_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_2_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_2_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_2_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_2_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_2_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_30_regFile
  assign standardCrc32_crcDramTabVec_30_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[247:240] ;
  assign standardCrc32_crcDramTabVec_30_regFile_ADDR_2 =
	     standardCrc32_interCrcResult[23:16] ;
  assign standardCrc32_crcDramTabVec_30_regFile_ADDR_3 =
	     standardCrc32_shiftedStream_D_OUT[254:247] ;
  assign standardCrc32_crcDramTabVec_30_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_30_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_30_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_30_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_30_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_31_regFile
  assign standardCrc32_crcDramTabVec_31_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[255:248] ;
  assign standardCrc32_crcDramTabVec_31_regFile_ADDR_2 =
	     standardCrc32_interCrcResult[31:24] ;
  assign standardCrc32_crcDramTabVec_31_regFile_ADDR_3 =
	     standardCrc32_shiftedStream_D_OUT[262:255] ;
  assign standardCrc32_crcDramTabVec_31_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_31_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_31_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_31_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_31_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_3_regFile
  assign standardCrc32_crcDramTabVec_3_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[31:24] ;
  assign standardCrc32_crcDramTabVec_3_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[38:31] ;
  assign standardCrc32_crcDramTabVec_3_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_3_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_3_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_3_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_3_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_3_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_4_regFile
  assign standardCrc32_crcDramTabVec_4_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[39:32] ;
  assign standardCrc32_crcDramTabVec_4_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[46:39] ;
  assign standardCrc32_crcDramTabVec_4_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_4_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_4_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_4_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_4_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_4_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_5_regFile
  assign standardCrc32_crcDramTabVec_5_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[47:40] ;
  assign standardCrc32_crcDramTabVec_5_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[54:47] ;
  assign standardCrc32_crcDramTabVec_5_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_5_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_5_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_5_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_5_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_5_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_6_regFile
  assign standardCrc32_crcDramTabVec_6_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[55:48] ;
  assign standardCrc32_crcDramTabVec_6_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[62:55] ;
  assign standardCrc32_crcDramTabVec_6_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_6_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_6_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_6_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_6_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_6_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_7_regFile
  assign standardCrc32_crcDramTabVec_7_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[63:56] ;
  assign standardCrc32_crcDramTabVec_7_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[70:63] ;
  assign standardCrc32_crcDramTabVec_7_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_7_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_7_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_7_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_7_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_7_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_8_regFile
  assign standardCrc32_crcDramTabVec_8_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[71:64] ;
  assign standardCrc32_crcDramTabVec_8_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[78:71] ;
  assign standardCrc32_crcDramTabVec_8_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_8_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_8_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_8_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_8_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_8_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcDramTabVec_9_regFile
  assign standardCrc32_crcDramTabVec_9_regFile_ADDR_1 =
	     standardCrc32_shiftedStreamLast_D_OUT[79:72] ;
  assign standardCrc32_crcDramTabVec_9_regFile_ADDR_2 =
	     standardCrc32_shiftedStream_D_OUT[86:79] ;
  assign standardCrc32_crcDramTabVec_9_regFile_ADDR_3 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_9_regFile_ADDR_4 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_9_regFile_ADDR_5 = 8'h0 ;
  assign standardCrc32_crcDramTabVec_9_regFile_ADDR_IN = 8'h0 ;
  assign standardCrc32_crcDramTabVec_9_regFile_D_IN = 32'h0 ;
  assign standardCrc32_crcDramTabVec_9_regFile_WE = 1'b0 ;

  // submodule standardCrc32_crcVec8Stream
  assign standardCrc32_crcVec8Stream_D_IN =
	     { standardCrc32_crcDramTabVec_28_regFile_sub_sta_ETC___d653,
	       crc1__h134722 ^ crc2__h134723,
	       crc1__h134999 ^ crc2__h135000 } ;
  assign standardCrc32_crcVec8Stream_ENQ =
	     standardCrc32_shiftedStream_EMPTY_N &&
	     standardCrc32_crcVec8Stream_FULL_N &&
	     standardCrc32_crcCtrlSigBuf_FULL_N ;
  assign standardCrc32_crcVec8Stream_DEQ =
	     standardCrc32_crcVec8Stream_EMPTY_N &&
	     standardCrc32_crcCtrlSigBuf_EMPTY_N &&
	     standardCrc32_reducedStream_FULL_N ;
  assign standardCrc32_crcVec8Stream_CLR = 1'b0 ;

  // submodule standardCrc32_crcVec8StreamLast
  assign standardCrc32_crcVec8StreamLast_D_IN =
	     { standardCrc32_crcDramTabVec_28_regFile_sub_sta_ETC___d905,
	       crc1__h253933 ^ crc2__h253934,
	       crc1__h254198 ^ crc2__h254199 } ;
  assign standardCrc32_crcVec8StreamLast_ENQ =
	     standardCrc32_shiftedStreamLast_EMPTY_N &&
	     standardCrc32_crcVec8StreamLast_FULL_N &&
	     standardCrc32_curCrcBuf_FULL_N ;
  assign standardCrc32_crcVec8StreamLast_DEQ =
	     standardCrc32_crcVec8StreamLast_EMPTY_N &&
	     standardCrc32_curCrcBuf_EMPTY_N &&
	     standardCrc32_outputBuf_FULL_N ;
  assign standardCrc32_crcVec8StreamLast_CLR = 1'b0 ;

  // submodule standardCrc32_curCrcBuf
  assign standardCrc32_curCrcBuf_D_IN =
	     standardCrc32_shiftedStreamLast_D_OUT[319:288] ^
	     standardCrc32_shiftedStreamLast_D_OUT[287:256] ;
  assign standardCrc32_curCrcBuf_ENQ =
	     standardCrc32_shiftedStreamLast_EMPTY_N &&
	     standardCrc32_crcVec8StreamLast_FULL_N &&
	     standardCrc32_curCrcBuf_FULL_N ;
  assign standardCrc32_curCrcBuf_DEQ =
	     standardCrc32_crcVec8StreamLast_EMPTY_N &&
	     standardCrc32_curCrcBuf_EMPTY_N &&
	     standardCrc32_outputBuf_FULL_N ;
  assign standardCrc32_curCrcBuf_CLR = 1'b0 ;

  // submodule standardCrc32_outputBuf
  assign standardCrc32_outputBuf_D_IN =
	     { INV_finalCrcRes54502__q69[0],
	       INV_finalCrcRes54502__q69[1],
	       INV_finalCrcRes54502__q69[2],
	       INV_finalCrcRes54502__q69[3],
	       INV_finalCrcRes54502__q69[4],
	       INV_finalCrcRes54502__q69[5],
	       INV_finalCrcRes54502__q69[6],
	       INV_finalCrcRes54502__q69[7],
	       INV_finalCrcRes54502__q69[8],
	       INV_finalCrcRes54502__q69[9],
	       INV_finalCrcRes54502__q69[10],
	       INV_finalCrcRes54502__q69[11],
	       INV_finalCrcRes54502__q69[12],
	       INV_finalCrcRes54502__q69[13],
	       INV_finalCrcRes54502__q69[14],
	       INV_finalCrcRes54502__q69[15],
	       INV_finalCrcRes54502__q69[16],
	       INV_finalCrcRes54502__q69[17],
	       INV_finalCrcRes54502__q69[18],
	       INV_finalCrcRes54502__q69[19],
	       INV_finalCrcRes54502__q69[20],
	       INV_finalCrcRes54502__q69[21],
	       INV_finalCrcRes54502__q69[22],
	       INV_finalCrcRes54502__q69[23],
	       INV_finalCrcRes54502__q69[24],
	       INV_finalCrcRes54502__q69[25],
	       INV_finalCrcRes54502__q69[26],
	       INV_finalCrcRes54502__q69[27],
	       INV_finalCrcRes54502__q69[28],
	       INV_finalCrcRes54502__q69[29],
	       INV_finalCrcRes54502__q69[30],
	       INV_finalCrcRes54502__q69[31] } ;
  assign standardCrc32_outputBuf_ENQ =
	     standardCrc32_crcVec8StreamLast_EMPTY_N &&
	     standardCrc32_curCrcBuf_EMPTY_N &&
	     standardCrc32_outputBuf_FULL_N ;
  assign standardCrc32_outputBuf_DEQ = EN_crcCheckSumOut_deq ;
  assign standardCrc32_outputBuf_CLR = 1'b0 ;

  // submodule standardCrc32_preProcessedStream
  assign standardCrc32_preProcessedStream_D_IN =
	     { crcContext_data__h16117,
	       dataStreamInBuf_D_OUT[0],
	       x__h34843 } ;
  assign standardCrc32_preProcessedStream_ENQ =
	     WILL_FIRE_RL_standardCrc32_preProcessing ;
  assign standardCrc32_preProcessedStream_DEQ =
	     WILL_FIRE_RL_standardCrc32_shiftOutExtraByte ;
  assign standardCrc32_preProcessedStream_CLR = 1'b0 ;

  // submodule standardCrc32_reducedStream
  assign standardCrc32_reducedStream_D_IN =
	     { x__h135325, standardCrc32_crcCtrlSigBuf_D_OUT } ;
  assign standardCrc32_reducedStream_ENQ =
	     standardCrc32_crcVec8Stream_EMPTY_N &&
	     standardCrc32_crcCtrlSigBuf_EMPTY_N &&
	     standardCrc32_reducedStream_FULL_N ;
  assign standardCrc32_reducedStream_DEQ =
	     standardCrc32_reducedStream_EMPTY_N &&
	     (!standardCrc32_reducedStream_D_OUT[6] ||
	      standardCrc32_accumulatedStream_FULL_N) ;
  assign standardCrc32_reducedStream_CLR = 1'b0 ;

  // submodule standardCrc32_shiftedStream
  assign standardCrc32_shiftedStream_D_IN =
	     { x__h40105, standardCrc32_preProcessedStream_D_OUT[6:0] } ;
  assign standardCrc32_shiftedStream_ENQ =
	     WILL_FIRE_RL_standardCrc32_shiftOutExtraByte ;
  assign standardCrc32_shiftedStream_DEQ =
	     standardCrc32_shiftedStream_EMPTY_N &&
	     standardCrc32_crcVec8Stream_FULL_N &&
	     standardCrc32_crcCtrlSigBuf_FULL_N ;
  assign standardCrc32_shiftedStream_CLR = 1'b0 ;

  // submodule standardCrc32_shiftedStreamLast
  assign standardCrc32_shiftedStreamLast_D_IN =
	     { standardCrc32_accumulatedStream_D_OUT[70:39],
	       x__h137695,
	       IF_standardCrc32_accumulatedStream_first__28_B_ETC___d823[279:24] } ;
  assign standardCrc32_shiftedStreamLast_ENQ =
	     standardCrc32_accumulatedStream_EMPTY_N &&
	     standardCrc32_shiftedStreamLast_FULL_N ;
  assign standardCrc32_shiftedStreamLast_DEQ =
	     standardCrc32_shiftedStreamLast_EMPTY_N &&
	     standardCrc32_crcVec8StreamLast_FULL_N &&
	     standardCrc32_curCrcBuf_FULL_N ;
  assign standardCrc32_shiftedStreamLast_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_standardCrc32_accumulatedStream_first__28_B_ETC___d823 =
	     standardCrc32_accumulatedStream_first__28_BITS_ETC___d731 ?
	       { CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q33,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q34,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q35,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q36,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q37,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q38,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q39,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q40,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q41,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q42,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q43,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q44,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q45,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q46,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q47,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q48,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q49,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q50,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q51,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q52,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q53,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q54,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q55,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q56,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q57,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q58,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q59,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q60,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q61,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q62,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q63,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q64,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q65,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q66,
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q67 } :
	       280'd0 ;
  assign INV_finalCrcRes54502__q69 = ~finalCrcRes__h254502 ;
  assign crc1__h131434 =
	     standardCrc32_crcDramTabVec_28_regFile_D_OUT_3 ^
	     standardCrc32_crcDramTabVec_29_regFile_D_OUT_3 ;
  assign crc1__h133337 =
	     standardCrc32_crcDramTabVec_24_regFile_D_OUT_2 ^
	     standardCrc32_crcDramTabVec_25_regFile_D_OUT_2 ;
  assign crc1__h133614 =
	     standardCrc32_crcDramTabVec_20_regFile_D_OUT_2 ^
	     standardCrc32_crcDramTabVec_21_regFile_D_OUT_2 ;
  assign crc1__h133891 =
	     standardCrc32_crcDramTabVec_16_regFile_D_OUT_2 ^
	     standardCrc32_crcDramTabVec_17_regFile_D_OUT_2 ;
  assign crc1__h134168 =
	     standardCrc32_crcDramTabVec_12_regFile_D_OUT_2 ^
	     standardCrc32_crcDramTabVec_13_regFile_D_OUT_2 ;
  assign crc1__h134445 =
	     standardCrc32_crcDramTabVec_8_regFile_D_OUT_2 ^
	     standardCrc32_crcDramTabVec_9_regFile_D_OUT_2 ;
  assign crc1__h134722 =
	     standardCrc32_crcDramTabVec_4_regFile_D_OUT_2 ^
	     standardCrc32_crcDramTabVec_5_regFile_D_OUT_2 ;
  assign crc1__h134999 =
	     standardCrc32_crcDramTabVec_0_regFile_D_OUT_2 ^
	     standardCrc32_crcDramTabVec_1_regFile_D_OUT_2 ;
  assign crc1__h136291 = crc1__h136320 ^ crc2__h136321 ;
  assign crc1__h136320 =
	     standardCrc32_crcVec8Stream_D_OUT[31:0] ^
	     standardCrc32_crcVec8Stream_D_OUT[63:32] ;
  assign crc1__h136599 =
	     standardCrc32_crcVec8Stream_D_OUT[159:128] ^
	     standardCrc32_crcVec8Stream_D_OUT[191:160] ;
  assign crc1__h137307 =
	     standardCrc32_crcDramTabVec_28_regFile_D_OUT_2 ^
	     standardCrc32_crcDramTabVec_29_regFile_D_OUT_2 ;
  assign crc1__h251625 =
	     standardCrc32_crcDramTabVec_28_regFile_D_OUT_1 ^
	     standardCrc32_crcDramTabVec_29_regFile_D_OUT_1 ;
  assign crc1__h252608 =
	     standardCrc32_crcDramTabVec_24_regFile_D_OUT_1 ^
	     standardCrc32_crcDramTabVec_25_regFile_D_OUT_1 ;
  assign crc1__h252873 =
	     standardCrc32_crcDramTabVec_20_regFile_D_OUT_1 ^
	     standardCrc32_crcDramTabVec_21_regFile_D_OUT_1 ;
  assign crc1__h253138 =
	     standardCrc32_crcDramTabVec_16_regFile_D_OUT_1 ^
	     standardCrc32_crcDramTabVec_17_regFile_D_OUT_1 ;
  assign crc1__h253403 =
	     standardCrc32_crcDramTabVec_12_regFile_D_OUT_1 ^
	     standardCrc32_crcDramTabVec_13_regFile_D_OUT_1 ;
  assign crc1__h253668 =
	     standardCrc32_crcDramTabVec_8_regFile_D_OUT_1 ^
	     standardCrc32_crcDramTabVec_9_regFile_D_OUT_1 ;
  assign crc1__h253933 =
	     standardCrc32_crcDramTabVec_4_regFile_D_OUT_1 ^
	     standardCrc32_crcDramTabVec_5_regFile_D_OUT_1 ;
  assign crc1__h254198 =
	     standardCrc32_crcDramTabVec_0_regFile_D_OUT_1 ^
	     standardCrc32_crcDramTabVec_1_regFile_D_OUT_1 ;
  assign crc1__h255806 = crc1__h255835 ^ crc2__h255836 ;
  assign crc1__h255835 =
	     standardCrc32_crcVec8StreamLast_D_OUT[31:0] ^
	     standardCrc32_crcVec8StreamLast_D_OUT[63:32] ;
  assign crc1__h256114 =
	     standardCrc32_crcVec8StreamLast_D_OUT[159:128] ^
	     standardCrc32_crcVec8StreamLast_D_OUT[191:160] ;
  assign crc2__h131435 =
	     standardCrc32_crcDramTabVec_30_regFile_D_OUT_3 ^
	     standardCrc32_crcDramTabVec_31_regFile_D_OUT_3 ;
  assign crc2__h133338 =
	     standardCrc32_crcDramTabVec_26_regFile_D_OUT_2 ^
	     standardCrc32_crcDramTabVec_27_regFile_D_OUT_2 ;
  assign crc2__h133615 =
	     standardCrc32_crcDramTabVec_22_regFile_D_OUT_2 ^
	     standardCrc32_crcDramTabVec_23_regFile_D_OUT_2 ;
  assign crc2__h133892 =
	     standardCrc32_crcDramTabVec_18_regFile_D_OUT_2 ^
	     standardCrc32_crcDramTabVec_19_regFile_D_OUT_2 ;
  assign crc2__h134169 =
	     standardCrc32_crcDramTabVec_14_regFile_D_OUT_2 ^
	     standardCrc32_crcDramTabVec_15_regFile_D_OUT_2 ;
  assign crc2__h134446 =
	     standardCrc32_crcDramTabVec_10_regFile_D_OUT_2 ^
	     standardCrc32_crcDramTabVec_11_regFile_D_OUT_2 ;
  assign crc2__h134723 =
	     standardCrc32_crcDramTabVec_6_regFile_D_OUT_2 ^
	     standardCrc32_crcDramTabVec_7_regFile_D_OUT_2 ;
  assign crc2__h135000 =
	     standardCrc32_crcDramTabVec_2_regFile_D_OUT_2 ^
	     standardCrc32_crcDramTabVec_3_regFile_D_OUT_2 ;
  assign crc2__h136292 = crc1__h136599 ^ crc2__h136600 ;
  assign crc2__h136321 =
	     standardCrc32_crcVec8Stream_D_OUT[95:64] ^
	     standardCrc32_crcVec8Stream_D_OUT[127:96] ;
  assign crc2__h136600 =
	     standardCrc32_crcVec8Stream_D_OUT[223:192] ^
	     standardCrc32_crcVec8Stream_D_OUT[255:224] ;
  assign crc2__h137308 =
	     standardCrc32_crcDramTabVec_30_regFile_D_OUT_2 ^
	     standardCrc32_crcDramTabVec_31_regFile_D_OUT_2 ;
  assign crc2__h251626 =
	     standardCrc32_crcDramTabVec_30_regFile_D_OUT_1 ^
	     standardCrc32_crcDramTabVec_31_regFile_D_OUT_1 ;
  assign crc2__h252609 =
	     standardCrc32_crcDramTabVec_26_regFile_D_OUT_1 ^
	     standardCrc32_crcDramTabVec_27_regFile_D_OUT_1 ;
  assign crc2__h252874 =
	     standardCrc32_crcDramTabVec_22_regFile_D_OUT_1 ^
	     standardCrc32_crcDramTabVec_23_regFile_D_OUT_1 ;
  assign crc2__h253139 =
	     standardCrc32_crcDramTabVec_18_regFile_D_OUT_1 ^
	     standardCrc32_crcDramTabVec_19_regFile_D_OUT_1 ;
  assign crc2__h253404 =
	     standardCrc32_crcDramTabVec_14_regFile_D_OUT_1 ^
	     standardCrc32_crcDramTabVec_15_regFile_D_OUT_1 ;
  assign crc2__h253669 =
	     standardCrc32_crcDramTabVec_10_regFile_D_OUT_1 ^
	     standardCrc32_crcDramTabVec_11_regFile_D_OUT_1 ;
  assign crc2__h253934 =
	     standardCrc32_crcDramTabVec_6_regFile_D_OUT_1 ^
	     standardCrc32_crcDramTabVec_7_regFile_D_OUT_1 ;
  assign crc2__h254199 =
	     standardCrc32_crcDramTabVec_2_regFile_D_OUT_1 ^
	     standardCrc32_crcDramTabVec_3_regFile_D_OUT_1 ;
  assign crc2__h255807 = crc1__h256114 ^ crc2__h256115 ;
  assign crc2__h255836 =
	     standardCrc32_crcVec8StreamLast_D_OUT[95:64] ^
	     standardCrc32_crcVec8StreamLast_D_OUT[127:96] ;
  assign crc2__h256115 =
	     standardCrc32_crcVec8StreamLast_D_OUT[223:192] ^
	     standardCrc32_crcVec8StreamLast_D_OUT[255:224] ;
  assign crcContext_data__h16117 =
	     { dataStreamInBuf_D_OUT[34],
	       dataStreamInBuf_D_OUT[35],
	       dataStreamInBuf_D_OUT[36],
	       dataStreamInBuf_D_OUT[37],
	       dataStreamInBuf_D_OUT[38],
	       dataStreamInBuf_D_OUT[39],
	       dataStreamInBuf_D_OUT[40],
	       dataStreamInBuf_D_OUT[41],
	       dataStreamInBuf_D_OUT[42],
	       dataStreamInBuf_D_OUT[43],
	       dataStreamInBuf_D_OUT[44],
	       dataStreamInBuf_D_OUT[45],
	       dataStreamInBuf_D_OUT[46],
	       dataStreamInBuf_D_OUT[47],
	       dataStreamInBuf_D_OUT[48],
	       dataStreamInBuf_D_OUT[49],
	       dataStreamInBuf_D_OUT[50],
	       dataStreamInBuf_D_OUT[51],
	       dataStreamInBuf_D_OUT[52],
	       dataStreamInBuf_D_OUT[53],
	       dataStreamInBuf_D_OUT[54],
	       dataStreamInBuf_D_OUT[55],
	       dataStreamInBuf_D_OUT[56],
	       dataStreamInBuf_D_OUT[57],
	       dataStreamInBuf_D_OUT[58],
	       dataStreamInBuf_D_OUT[59],
	       dataStreamInBuf_D_OUT[60],
	       dataStreamInBuf_D_OUT[61],
	       dataStreamInBuf_D_OUT[62],
	       dataStreamInBuf_D_OUT[63],
	       dataStreamInBuf_D_OUT[64],
	       dataStreamInBuf_D_OUT[65],
	       dataStreamInBuf_D_OUT[66],
	       dataStreamInBuf_D_OUT[67],
	       dataStreamInBuf_D_OUT[68],
	       dataStreamInBuf_D_OUT[69],
	       dataStreamInBuf_D_OUT[70],
	       dataStreamInBuf_D_OUT[71],
	       dataStreamInBuf_D_OUT[72],
	       dataStreamInBuf_D_OUT[73],
	       dataStreamInBuf_D_OUT[74],
	       dataStreamInBuf_D_OUT[75],
	       dataStreamInBuf_D_OUT[76],
	       dataStreamInBuf_D_OUT[77],
	       dataStreamInBuf_D_OUT[78],
	       dataStreamInBuf_D_OUT[79],
	       dataStreamInBuf_D_OUT[80],
	       dataStreamInBuf_D_OUT[81],
	       dataStreamInBuf_D_OUT[82],
	       dataStreamInBuf_D_OUT[83],
	       dataStreamInBuf_D_OUT[84],
	       dataStreamInBuf_D_OUT[85],
	       dataStreamInBuf_D_OUT[86],
	       dataStreamInBuf_D_OUT[87],
	       dataStreamInBuf_D_OUT[88],
	       dataStreamInBuf_D_OUT[89],
	       dataStreamInBuf_D_OUT[90],
	       dataStreamInBuf_D_OUT[91],
	       dataStreamInBuf_D_OUT[92],
	       dataStreamInBuf_D_OUT[93],
	       dataStreamInBuf_D_OUT[94],
	       dataStreamInBuf_D_OUT[95],
	       dataStreamInBuf_D_OUT[96],
	       dataStreamInBuf_D_OUT[97],
	       dataStreamInBuf_D_OUT[98],
	       dataStreamInBuf_D_OUT[99],
	       dataStreamInBuf_D_OUT[100],
	       dataStreamInBuf_D_OUT[101],
	       dataStreamInBuf_D_OUT[102],
	       dataStreamInBuf_D_OUT[103],
	       dataStreamInBuf_D_OUT[104],
	       dataStreamInBuf_D_OUT[105],
	       dataStreamInBuf_D_OUT[106],
	       dataStreamInBuf_D_OUT[107],
	       dataStreamInBuf_D_OUT[108],
	       dataStreamInBuf_D_OUT[109],
	       dataStreamInBuf_D_OUT[110],
	       dataStreamInBuf_D_OUT[111],
	       dataStreamInBuf_D_OUT[112],
	       dataStreamInBuf_D_OUT[113],
	       dataStreamInBuf_D_OUT[114],
	       dataStreamInBuf_D_OUT[115],
	       dataStreamInBuf_D_OUT[116],
	       dataStreamInBuf_D_OUT[117],
	       dataStreamInBuf_D_OUT[118],
	       dataStreamInBuf_D_OUT[119],
	       dataStreamInBuf_D_OUT[120],
	       dataStreamInBuf_D_OUT[121],
	       dataStreamInBuf_D_OUT[122],
	       dataStreamInBuf_D_OUT[123],
	       dataStreamInBuf_D_OUT[124],
	       dataStreamInBuf_D_OUT[125],
	       dataStreamInBuf_D_OUT[126],
	       dataStreamInBuf_D_OUT[127],
	       dataStreamInBuf_D_OUT[128],
	       dataStreamInBuf_D_OUT[129],
	       dataStreamInBuf_D_OUT[130],
	       dataStreamInBuf_D_OUT[131],
	       dataStreamInBuf_D_OUT[132],
	       dataStreamInBuf_D_OUT[133],
	       dataStreamInBuf_D_OUT[134],
	       dataStreamInBuf_D_OUT[135],
	       dataStreamInBuf_D_OUT[136],
	       dataStreamInBuf_D_OUT[137],
	       dataStreamInBuf_D_OUT[138],
	       dataStreamInBuf_D_OUT[139],
	       dataStreamInBuf_D_OUT[140],
	       dataStreamInBuf_D_OUT[141],
	       dataStreamInBuf_D_OUT[142],
	       dataStreamInBuf_D_OUT[143],
	       dataStreamInBuf_D_OUT[144],
	       dataStreamInBuf_D_OUT[145],
	       dataStreamInBuf_D_OUT[146],
	       dataStreamInBuf_D_OUT[147],
	       dataStreamInBuf_D_OUT[148],
	       dataStreamInBuf_D_OUT[149],
	       dataStreamInBuf_D_OUT[150],
	       dataStreamInBuf_D_OUT[151],
	       dataStreamInBuf_D_OUT[152],
	       dataStreamInBuf_D_OUT[153],
	       dataStreamInBuf_D_OUT[154],
	       dataStreamInBuf_D_OUT[155],
	       dataStreamInBuf_D_OUT[156],
	       dataStreamInBuf_D_OUT[157],
	       dataStreamInBuf_D_OUT[158],
	       dataStreamInBuf_D_OUT[159],
	       dataStreamInBuf_D_OUT[160],
	       dataStreamInBuf_D_OUT[161],
	       dataStreamInBuf_D_OUT[162],
	       dataStreamInBuf_D_OUT[163],
	       dataStreamInBuf_D_OUT[164],
	       dataStreamInBuf_D_OUT[165],
	       dataStreamInBuf_D_OUT[166],
	       dataStreamInBuf_D_OUT[167],
	       dataStreamInBuf_D_OUT[168],
	       dataStreamInBuf_D_OUT[169],
	       dataStreamInBuf_D_OUT[170],
	       dataStreamInBuf_D_OUT[171],
	       dataStreamInBuf_D_OUT[172],
	       dataStreamInBuf_D_OUT[173],
	       dataStreamInBuf_D_OUT[174],
	       dataStreamInBuf_D_OUT[175],
	       dataStreamInBuf_D_OUT[176],
	       dataStreamInBuf_D_OUT[177],
	       dataStreamInBuf_D_OUT[178],
	       dataStreamInBuf_D_OUT[179],
	       dataStreamInBuf_D_OUT[180],
	       dataStreamInBuf_D_OUT[181],
	       dataStreamInBuf_D_OUT[182],
	       dataStreamInBuf_D_OUT[183],
	       dataStreamInBuf_D_OUT[184],
	       dataStreamInBuf_D_OUT[185],
	       dataStreamInBuf_D_OUT[186],
	       dataStreamInBuf_D_OUT[187],
	       dataStreamInBuf_D_OUT[188],
	       dataStreamInBuf_D_OUT[189],
	       dataStreamInBuf_D_OUT[190],
	       dataStreamInBuf_D_OUT[191],
	       dataStreamInBuf_D_OUT[192],
	       dataStreamInBuf_D_OUT[193],
	       dataStreamInBuf_D_OUT[194],
	       dataStreamInBuf_D_OUT[195],
	       dataStreamInBuf_D_OUT[196],
	       dataStreamInBuf_D_OUT[197],
	       dataStreamInBuf_D_OUT[198],
	       dataStreamInBuf_D_OUT[199],
	       dataStreamInBuf_D_OUT[200],
	       dataStreamInBuf_D_OUT[201],
	       dataStreamInBuf_D_OUT[202],
	       dataStreamInBuf_D_OUT[203],
	       dataStreamInBuf_D_OUT[204],
	       dataStreamInBuf_D_OUT[205],
	       dataStreamInBuf_D_OUT[206],
	       dataStreamInBuf_D_OUT[207],
	       dataStreamInBuf_D_OUT[208],
	       dataStreamInBuf_D_OUT[209],
	       dataStreamInBuf_D_OUT[210],
	       dataStreamInBuf_D_OUT[211],
	       dataStreamInBuf_D_OUT[212],
	       dataStreamInBuf_D_OUT[213],
	       dataStreamInBuf_D_OUT[214],
	       dataStreamInBuf_D_OUT[215],
	       dataStreamInBuf_D_OUT[216],
	       dataStreamInBuf_D_OUT[217],
	       dataStreamInBuf_D_OUT[218],
	       dataStreamInBuf_D_OUT[219],
	       dataStreamInBuf_D_OUT[220],
	       dataStreamInBuf_D_OUT[221],
	       dataStreamInBuf_D_OUT[222],
	       dataStreamInBuf_D_OUT[223],
	       dataStreamInBuf_D_OUT[224],
	       dataStreamInBuf_D_OUT[225],
	       dataStreamInBuf_D_OUT[226],
	       dataStreamInBuf_D_OUT[227],
	       dataStreamInBuf_D_OUT[228],
	       dataStreamInBuf_D_OUT[229],
	       dataStreamInBuf_D_OUT[230],
	       dataStreamInBuf_D_OUT[231],
	       dataStreamInBuf_D_OUT[232],
	       dataStreamInBuf_D_OUT[233],
	       dataStreamInBuf_D_OUT[234],
	       dataStreamInBuf_D_OUT[235],
	       dataStreamInBuf_D_OUT[236],
	       dataStreamInBuf_D_OUT[237],
	       dataStreamInBuf_D_OUT[238],
	       dataStreamInBuf_D_OUT[239],
	       dataStreamInBuf_D_OUT[240],
	       dataStreamInBuf_D_OUT[241],
	       dataStreamInBuf_D_OUT[242],
	       dataStreamInBuf_D_OUT[243],
	       dataStreamInBuf_D_OUT[244],
	       dataStreamInBuf_D_OUT[245],
	       dataStreamInBuf_D_OUT[246],
	       dataStreamInBuf_D_OUT[247],
	       dataStreamInBuf_D_OUT[248],
	       dataStreamInBuf_D_OUT[249],
	       dataStreamInBuf_D_OUT[250],
	       dataStreamInBuf_D_OUT[251],
	       dataStreamInBuf_D_OUT[252],
	       dataStreamInBuf_D_OUT[253],
	       dataStreamInBuf_D_OUT[254],
	       dataStreamInBuf_D_OUT[255],
	       dataStreamInBuf_D_OUT[256],
	       dataStreamInBuf_D_OUT[257],
	       dataStreamInBuf_D_OUT[258],
	       dataStreamInBuf_D_OUT[259],
	       dataStreamInBuf_D_OUT[260],
	       dataStreamInBuf_D_OUT[261],
	       dataStreamInBuf_D_OUT[262],
	       dataStreamInBuf_D_OUT[263],
	       dataStreamInBuf_D_OUT[264],
	       dataStreamInBuf_D_OUT[265],
	       dataStreamInBuf_D_OUT[266],
	       dataStreamInBuf_D_OUT[267],
	       dataStreamInBuf_D_OUT[268],
	       dataStreamInBuf_D_OUT[269],
	       dataStreamInBuf_D_OUT[270],
	       dataStreamInBuf_D_OUT[271],
	       dataStreamInBuf_D_OUT[272],
	       dataStreamInBuf_D_OUT[273],
	       dataStreamInBuf_D_OUT[274],
	       dataStreamInBuf_D_OUT[275],
	       dataStreamInBuf_D_OUT[276],
	       dataStreamInBuf_D_OUT[277],
	       dataStreamInBuf_D_OUT[278],
	       dataStreamInBuf_D_OUT[279],
	       dataStreamInBuf_D_OUT[280],
	       dataStreamInBuf_D_OUT[281],
	       dataStreamInBuf_D_OUT[282],
	       dataStreamInBuf_D_OUT[283],
	       dataStreamInBuf_D_OUT[284],
	       dataStreamInBuf_D_OUT[285],
	       dataStreamInBuf_D_OUT[286],
	       dataStreamInBuf_D_OUT[287],
	       dataStreamInBuf_D_OUT[288],
	       dataStreamInBuf_D_OUT[289] } ;
  assign finalCrcRes__h254502 =
	     crc1__h255806 ^ crc2__h255807 ^ standardCrc32_curCrcBuf_D_OUT ;
  assign nextCrc__h136899 =
	     standardCrc32_reducedStream_D_OUT[38:7] ^ crc1__h137307 ^
	     crc2__h137308 ;
  assign standardCrc32_accumulatedStream_first__28_BITS_ETC___d731 =
	     standardCrc32_accumulatedStream_D_OUT[5:0] <= 6'd36 ;
  assign standardCrc32_crcDramTabVec_28_regFile_sub_sta_ETC___d630 =
	     { crc1__h131434 ^ crc2__h131435,
	       crc1__h133337 ^ crc2__h133338,
	       crc1__h133614 ^ crc2__h133615,
	       crc1__h133891 ^ crc2__h133892 } ;
  assign standardCrc32_crcDramTabVec_28_regFile_sub_sta_ETC___d653 =
	     { standardCrc32_crcDramTabVec_28_regFile_sub_sta_ETC___d630,
	       crc1__h134168 ^ crc2__h134169,
	       crc1__h134445 ^ crc2__h134446 } ;
  assign standardCrc32_crcDramTabVec_28_regFile_sub_sta_ETC___d882 =
	     { crc1__h251625 ^ crc2__h251626,
	       crc1__h252608 ^ crc2__h252609,
	       crc1__h252873 ^ crc2__h252874,
	       crc1__h253138 ^ crc2__h253139 } ;
  assign standardCrc32_crcDramTabVec_28_regFile_sub_sta_ETC___d905 =
	     { standardCrc32_crcDramTabVec_28_regFile_sub_sta_ETC___d882,
	       crc1__h253403 ^ crc2__h253404,
	       crc1__h253668 ^ crc2__h253669 } ;
  assign x__h135325 = crc1__h136291 ^ crc2__h136292 ;
  assign x__h137695 =
	     { IF_standardCrc32_accumulatedStream_first__28_B_ETC___d823[23:0],
	       standardCrc32_accumulatedStream_first__28_BITS_ETC___d731 ?
		 CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q68 :
		 8'd0 } ;
  assign x__h34843 =
	     dataStreamInBuf_D_OUT[33] ?
	       6'd0 :
	       (dataStreamInBuf_D_OUT[32] ?
		  6'd1 :
		  (dataStreamInBuf_D_OUT[31] ?
		     6'd2 :
		     (dataStreamInBuf_D_OUT[30] ?
			6'd3 :
			(dataStreamInBuf_D_OUT[29] ?
			   6'd4 :
			   (dataStreamInBuf_D_OUT[28] ?
			      6'd5 :
			      (dataStreamInBuf_D_OUT[27] ?
				 6'd6 :
				 (dataStreamInBuf_D_OUT[26] ?
				    6'd7 :
				    (dataStreamInBuf_D_OUT[25] ?
				       6'd8 :
				       (dataStreamInBuf_D_OUT[24] ?
					  6'd9 :
					  (dataStreamInBuf_D_OUT[23] ?
					     6'd10 :
					     (dataStreamInBuf_D_OUT[22] ?
						6'd11 :
						(dataStreamInBuf_D_OUT[21] ?
						   6'd12 :
						   (dataStreamInBuf_D_OUT[20] ?
						      6'd13 :
						      (dataStreamInBuf_D_OUT[19] ?
							 6'd14 :
							 (dataStreamInBuf_D_OUT[18] ?
							    6'd15 :
							    (dataStreamInBuf_D_OUT[17] ?
							       6'd16 :
							       (dataStreamInBuf_D_OUT[16] ?
								  6'd17 :
								  (dataStreamInBuf_D_OUT[15] ?
								     6'd18 :
								     (dataStreamInBuf_D_OUT[14] ?
									6'd19 :
									(dataStreamInBuf_D_OUT[13] ?
									   6'd20 :
									   (dataStreamInBuf_D_OUT[12] ?
									      6'd21 :
									      (dataStreamInBuf_D_OUT[11] ?
										 6'd22 :
										 (dataStreamInBuf_D_OUT[10] ?
										    6'd23 :
										    (dataStreamInBuf_D_OUT[9] ?
										       6'd24 :
										       (dataStreamInBuf_D_OUT[8] ?
											  6'd25 :
											  (dataStreamInBuf_D_OUT[7] ?
											     6'd26 :
											     (dataStreamInBuf_D_OUT[6] ?
												6'd27 :
												(dataStreamInBuf_D_OUT[5] ?
												   6'd28 :
												   (dataStreamInBuf_D_OUT[4] ?
												      6'd29 :
												      (dataStreamInBuf_D_OUT[3] ?
													 6'd30 :
													 (dataStreamInBuf_D_OUT[2] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign x__h40105 =
	     (standardCrc32_preProcessedStream_D_OUT[5:0] <= 6'd32) ?
	       { CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q1,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q2,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q3,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q4,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q5,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q6,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q7,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q8,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q9,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q10,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q11,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q12,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q13,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31,
		 CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 } :
	       256'd0 ;
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q1 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q1 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q1 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q2 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q2 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q2 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q2 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q3 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q3 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q3 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q3 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q3 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q4 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q4 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q4 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q4 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q4 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q4 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q5 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q5 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q5 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q5 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q5 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q5 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q5 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q6 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q6 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q6 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q6 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q6 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q6 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q6 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q6 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q7 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q7 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q7 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q7 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q7 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q7 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q7 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q7 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q7 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q8 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q8 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q8 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q8 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q8 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q8 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q8 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q8 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q8 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q8 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q9 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q9 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q9 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q9 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q9 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q9 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q9 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q9 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q9 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q9 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q9 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q10 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q10 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q10 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q10 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q10 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q10 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q10 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q10 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q10 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q10 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q10 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q10 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q11 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q11 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q11 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q11 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q11 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q11 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q11 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q11 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q11 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q11 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q11 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q11 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q11 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q12 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q12 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q12 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q12 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q12 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q12 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q12 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q12 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q12 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q12 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q12 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q12 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q12 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q12 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q13 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q13 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q13 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q13 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q13 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q13 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q13 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q13 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q13 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q13 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q13 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q13 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q13 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q13 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q13 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q14 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q15 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 =
	      standardCrc32_preProcessedStream_D_OUT[142:135];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd15:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q16 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
	      standardCrc32_preProcessedStream_D_OUT[134:127];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
	      standardCrc32_preProcessedStream_D_OUT[142:135];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd15:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd16:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q17 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[126:119];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[134:127];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[142:135];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd15:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd16:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd17:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q18 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[118:111];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[126:119];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[134:127];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[142:135];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd15:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd16:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd17:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd18:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q19 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[110:103];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[118:111];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[126:119];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[134:127];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[142:135];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd15:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd16:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd17:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd18:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd19:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q20 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[102:95];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[110:103];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[118:111];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[126:119];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[134:127];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[142:135];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd15:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd16:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd17:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd18:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd19:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd20:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q21 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[94:87];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[102:95];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[110:103];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[118:111];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[126:119];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[134:127];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[142:135];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd15:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd16:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd17:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd18:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd19:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd20:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd21:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q22 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[86:79];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[94:87];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[102:95];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[110:103];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[118:111];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[126:119];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[134:127];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[142:135];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd15:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd16:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd17:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd18:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd19:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd20:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd21:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd22:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd23, 6'd24, 6'd25, 6'd26, 6'd27, 6'd28, 6'd29, 6'd30, 6'd31, 6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q23 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[78:71];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[86:79];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[94:87];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[102:95];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[110:103];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[118:111];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[126:119];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[134:127];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[142:135];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd15:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd16:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd17:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd18:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd19:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd20:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd21:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd22:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd23:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd24, 6'd25, 6'd26, 6'd27, 6'd28, 6'd29, 6'd30, 6'd31, 6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q24 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[70:63];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[78:71];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[86:79];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[94:87];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[102:95];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[110:103];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[118:111];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[126:119];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[134:127];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[142:135];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd15:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd16:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd17:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd18:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd19:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd20:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd21:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd22:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd23:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd24:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd25, 6'd26, 6'd27, 6'd28, 6'd29, 6'd30, 6'd31, 6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q25 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[62:55];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[70:63];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[78:71];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[86:79];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[94:87];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[102:95];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[110:103];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[118:111];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[126:119];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[134:127];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[142:135];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd15:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd16:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd17:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd18:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd19:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd20:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd21:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd22:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd23:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd24:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd25:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd26, 6'd27, 6'd28, 6'd29, 6'd30, 6'd31, 6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q26 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[54:47];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[62:55];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[70:63];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[78:71];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[86:79];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[94:87];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[102:95];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[110:103];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[118:111];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[126:119];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[134:127];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[142:135];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd15:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd16:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd17:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd18:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd19:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd20:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd21:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd22:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd23:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd24:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd25:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd26:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd27, 6'd28, 6'd29, 6'd30, 6'd31, 6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q27 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[46:39];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[54:47];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[62:55];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[70:63];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[78:71];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[86:79];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[94:87];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[102:95];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[110:103];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[118:111];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[126:119];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[134:127];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[142:135];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd15:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd16:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd17:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd18:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd19:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd20:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd21:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd22:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd23:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd24:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd25:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd26:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd27:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd28, 6'd29, 6'd30, 6'd31, 6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q28 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[38:31];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[46:39];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[54:47];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[62:55];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[70:63];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[78:71];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[86:79];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[94:87];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[102:95];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[110:103];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[118:111];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[126:119];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[134:127];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[142:135];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd15:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd16:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd17:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd18:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd19:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd20:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd21:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd22:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd23:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd24:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd25:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd26:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd27:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd28:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd29, 6'd30, 6'd31, 6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q29 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[30:23];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[38:31];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[46:39];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[54:47];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[62:55];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[70:63];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[78:71];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[86:79];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[94:87];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[102:95];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[110:103];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[118:111];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[126:119];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[134:127];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[142:135];
      6'd15:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd16:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd17:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd18:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd19:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd20:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd21:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd22:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd23:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd24:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd25:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd26:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd27:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd28:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd29:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd30, 6'd31, 6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q30 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[22:15];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[30:23];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[38:31];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[46:39];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[54:47];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[62:55];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[70:63];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[78:71];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[86:79];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[94:87];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[102:95];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[110:103];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[118:111];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[126:119];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[134:127];
      6'd15:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[142:135];
      6'd16:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd17:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd18:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd19:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd20:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd21:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd22:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd23:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd24:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd25:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd26:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd27:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd28:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd29:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd30:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd31, 6'd32:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q31 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_preProcessedStream_D_OUT)
  begin
    case (standardCrc32_preProcessedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[14:7];
      6'd1:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[22:15];
      6'd2:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[30:23];
      6'd3:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[38:31];
      6'd4:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[46:39];
      6'd5:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[54:47];
      6'd6:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[62:55];
      6'd7:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[70:63];
      6'd8:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[78:71];
      6'd9:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[86:79];
      6'd10:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[94:87];
      6'd11:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[102:95];
      6'd12:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[110:103];
      6'd13:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[118:111];
      6'd14:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[126:119];
      6'd15:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[134:127];
      6'd16:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[142:135];
      6'd17:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[150:143];
      6'd18:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[158:151];
      6'd19:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[166:159];
      6'd20:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[174:167];
      6'd21:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[182:175];
      6'd22:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[190:183];
      6'd23:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[198:191];
      6'd24:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[206:199];
      6'd25:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[214:207];
      6'd26:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[222:215];
      6'd27:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[230:223];
      6'd28:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[238:231];
      6'd29:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[246:239];
      6'd30:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[254:247];
      6'd31:
	  CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
	      standardCrc32_preProcessedStream_D_OUT[262:255];
      6'd32: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 = 8'd0;
      default: CASE_standardCrc32_preProcessedStreamD_OUT_BI_ETC__q32 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q33 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q33 = 8'd0;
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q33 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q34 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd1:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q34 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q34 = 8'd0;
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q34 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q35 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd1:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q35 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd2:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q35 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q35 = 8'd0;
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q35 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q36 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd1:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q36 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd2:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q36 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd3:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q36 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q36 = 8'd0;
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q36 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q37 = 8'd0;
      6'd1:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q37 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd2:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q37 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd3:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q37 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd4:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q37 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q37 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q38 = 8'd0;
      6'd2:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q38 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd3:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q38 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd4:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q38 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd5:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q38 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q38 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q39 = 8'd0;
      6'd3:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q39 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd4:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q39 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd5:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q39 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd6:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q39 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q39 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q40 = 8'd0;
      6'd4:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q40 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd5:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q40 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd6:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q40 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd7:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q40 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q40 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q41 = 8'd0;
      6'd5:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q41 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd6:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q41 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd7:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q41 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd8:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q41 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q41 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q42 = 8'd0;
      6'd6:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q42 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd7:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q42 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd8:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q42 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd9:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q42 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q42 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q43 = 8'd0;
      6'd7:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q43 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd8:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q43 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd9:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q43 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd10:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q43 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q43 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q44 = 8'd0;
      6'd8:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q44 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd9:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q44 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd10:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q44 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd11:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q44 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q44 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q45 = 8'd0;
      6'd9:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q45 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd10:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q45 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd11:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q45 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd12:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q45 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q45 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q46 = 8'd0;
      6'd10:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q46 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd11:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q46 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd12:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q46 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd13:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q46 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q46 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q47 = 8'd0;
      6'd11:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q47 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd12:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q47 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd13:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q47 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd14:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q47 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q47 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q48 = 8'd0;
      6'd12:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q48 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd13:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q48 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd14:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q48 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd15:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q48 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q48 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q49 = 8'd0;
      6'd13:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q49 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd14:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q49 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd15:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q49 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd16:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q49 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q49 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q50 = 8'd0;
      6'd14:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q50 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd15:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q50 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd16:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q50 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd17:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q50 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q50 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q51 = 8'd0;
      6'd15:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q51 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd16:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q51 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd17:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q51 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd18:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q51 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q51 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q52 = 8'd0;
      6'd16:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q52 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd17:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q52 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd18:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q52 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd19:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q52 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q52 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q53 = 8'd0;
      6'd17:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q53 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd18:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q53 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd19:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q53 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd20:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q53 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q53 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q54 = 8'd0;
      6'd18:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q54 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd19:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q54 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd20:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q54 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd21:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q54 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q54 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q55 = 8'd0;
      6'd19:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q55 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd20:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q55 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd21:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q55 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd22:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q55 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q55 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q56 = 8'd0;
      6'd20:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q56 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd21:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q56 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd22:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q56 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd23:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q56 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q56 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q57 = 8'd0;
      6'd21:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q57 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd22:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q57 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd23:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q57 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd24:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q57 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q57 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q58 = 8'd0;
      6'd22:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q58 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd23:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q58 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd24:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q58 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd25:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q58 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q58 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q59 = 8'd0;
      6'd23:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q59 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd24:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q59 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd25:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q59 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd26:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q59 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q59 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q60 = 8'd0;
      6'd24:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q60 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd25:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q60 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd26:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q60 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd27:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q60 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q60 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd29,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q61 = 8'd0;
      6'd25:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q61 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd26:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q61 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd27:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q61 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd28:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q61 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q61 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd30,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q62 = 8'd0;
      6'd26:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q62 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd27:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q62 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd28:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q62 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd29:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q62 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q62 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd31,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q63 = 8'd0;
      6'd27:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q63 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd28:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q63 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd29:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q63 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd30:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q63 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q63 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd32,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q64 = 8'd0;
      6'd28:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q64 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd29:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q64 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd30:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q64 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd31:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q64 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q64 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd33,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q65 = 8'd0;
      6'd29:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q65 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd30:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q65 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd31:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q65 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd32:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q65 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q65 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd34,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q66 = 8'd0;
      6'd30:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q66 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd31:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q66 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd32:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q66 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd33:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q66 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q66 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd35,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q67 = 8'd0;
      6'd31:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q67 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd32:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q67 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd33:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q67 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd34:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q67 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q67 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  always@(standardCrc32_accumulatedStream_D_OUT)
  begin
    case (standardCrc32_accumulatedStream_D_OUT[5:0])
      6'd0,
      6'd1,
      6'd2,
      6'd3,
      6'd4,
      6'd5,
      6'd6,
      6'd7,
      6'd8,
      6'd9,
      6'd10,
      6'd11,
      6'd12,
      6'd13,
      6'd14,
      6'd15,
      6'd16,
      6'd17,
      6'd18,
      6'd19,
      6'd20,
      6'd21,
      6'd22,
      6'd23,
      6'd24,
      6'd25,
      6'd26,
      6'd27,
      6'd28,
      6'd29,
      6'd30,
      6'd31,
      6'd36:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q68 = 8'd0;
      6'd32:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q68 =
	      standardCrc32_accumulatedStream_D_OUT[14:7];
      6'd33:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q68 =
	      standardCrc32_accumulatedStream_D_OUT[22:15];
      6'd34:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q68 =
	      standardCrc32_accumulatedStream_D_OUT[30:23];
      6'd35:
	  CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q68 =
	      standardCrc32_accumulatedStream_D_OUT[38:31];
      default: CASE_standardCrc32_accumulatedStreamD_OUT_BIT_ETC__q68 =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        standardCrc32_interCrcResult <= `BSV_ASSIGNMENT_DELAY 32'hFFFFFFFF;
      end
    else
      begin
        if (standardCrc32_interCrcResult_EN)
	  standardCrc32_interCrcResult <= `BSV_ASSIGNMENT_DELAY
	      standardCrc32_interCrcResult_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    standardCrc32_interCrcResult = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_preProcessing)
	$write("StandardCrc32 PreProcessing: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_preProcessing)
	$write("PreProcessContext { ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_preProcessing)
	$write("'h%h", crcContext_data__h16117);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_preProcessing) $write(", ", "ctrlSig: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_preProcessing)
	$write("Crc32CtrlSig { ", "isLast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_preProcessing &&
	  dataStreamInBuf_D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_preProcessing &&
	  !dataStreamInBuf_D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_preProcessing)
	$write(", ", "shiftAmt: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_preProcessing)
	$write("'h%h", x__h34843, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_preProcessing) $write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_preProcessing) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_shiftOutExtraByte)
	$write("StandardCrc32 ShiftExtraByte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_shiftOutExtraByte)
	$write("PreProcessContext { ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_shiftOutExtraByte)
	$write("'h%h", x__h40105);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_shiftOutExtraByte)
	$write(", ", "ctrlSig: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_shiftOutExtraByte)
	$write("Crc32CtrlSig { ", "isLast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_shiftOutExtraByte &&
	  standardCrc32_preProcessedStream_D_OUT[6])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_shiftOutExtraByte &&
	  !standardCrc32_preProcessedStream_D_OUT[6])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_shiftOutExtraByte)
	$write(", ", "shiftAmt: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_shiftOutExtraByte)
	$write("'h%h", standardCrc32_preProcessedStream_D_OUT[5:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_shiftOutExtraByte) $write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_standardCrc32_shiftOutExtraByte) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (standardCrc32_crcVec8StreamLast_EMPTY_N &&
	  standardCrc32_curCrcBuf_EMPTY_N &&
	  standardCrc32_outputBuf_FULL_N)
	$display("Finish computation of one case: %x", finalCrcRes__h254502);
  end
  // synopsys translate_on
endmodule  // mkStandardCrc32Syn


`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif


module RegN(CLK, RST, Q_OUT, D_IN, EN);

   parameter width = 1;
   parameter init  = { width {1'b0} } ;

   input     CLK;
   input     RST;
   input     EN;
   input [width - 1 : 0] D_IN;
   output [width - 1 : 0] Q_OUT;

   reg [width - 1 : 0]    Q_OUT;

   always@(posedge CLK)
     begin
        if (RST == `BSV_RESET_VALUE)
          Q_OUT <= `BSV_ASSIGNMENT_DELAY init;
        else
          begin
             if (EN)
               Q_OUT <= `BSV_ASSIGNMENT_DELAY D_IN;
          end // else: !if(RST == `BSV_RESET_VALUE)
     end

`ifdef BSV_NO_INITIAL_BLOCKS
`else // not BSV_NO_INITIAL_BLOCKS
   // synopsys translate_off
   initial begin
      Q_OUT = {((width + 1)/2){2'b10}} ;
   end
   // synopsys translate_on
`endif // BSV_NO_INITIAL_BLOCKS

endmodule


`ifdef  BSV_WARN_REGFILE_ADDR_RANGE
`else
`define BSV_WARN_REGFILE_ADDR_RANGE 0
`endif

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif


// Multi-ported Register File -- initializable from a file.
module RegFileLoad(CLK,
                   ADDR_IN, D_IN, WE,
                   ADDR_1, D_OUT_1,
                   ADDR_2, D_OUT_2,
                   ADDR_3, D_OUT_3,
                   ADDR_4, D_OUT_4,
                   ADDR_5, D_OUT_5
                   );
   parameter                   file = "";
   parameter                   addr_width = 1;
   parameter                   data_width = 1;
   parameter                   lo = 0;
   parameter                   hi = 1;
   parameter                   binary = 0;

   input                       CLK;
   input [addr_width - 1 : 0]  ADDR_IN;
   input [data_width - 1 : 0]  D_IN;
   input                       WE;

   input [addr_width - 1 : 0]  ADDR_1;
   output [data_width - 1 : 0] D_OUT_1;

   input [addr_width - 1 : 0]  ADDR_2;
   output [data_width - 1 : 0] D_OUT_2;

   input [addr_width - 1 : 0]  ADDR_3;
   output [data_width - 1 : 0] D_OUT_3;

   input [addr_width - 1 : 0]  ADDR_4;
   output [data_width - 1 : 0] D_OUT_4;

   input [addr_width - 1 : 0]  ADDR_5;
   output [data_width - 1 : 0] D_OUT_5;

   reg [data_width - 1 : 0]    arr[lo:hi];


   initial
     begin : init_rom_block
	if (binary)
           $readmemb(file, arr, lo, hi);
        else
           $readmemh(file, arr, lo, hi);
     end // initial begin


   always@(posedge CLK)
     begin
        if (WE)
          arr[ADDR_IN] <= `BSV_ASSIGNMENT_DELAY D_IN;
     end // always@ (posedge CLK)

   assign D_OUT_1 = arr[ADDR_1];
   assign D_OUT_2 = arr[ADDR_2];
   assign D_OUT_3 = arr[ADDR_3];
   assign D_OUT_4 = arr[ADDR_4];
   assign D_OUT_5 = arr[ADDR_5];

   // synopsys translate_off
   always@(posedge CLK)
     begin : runtime_check
        reg enable_check;
        enable_check = `BSV_WARN_REGFILE_ADDR_RANGE ;
        if ( enable_check )
           begin
              if (( ADDR_1 < lo ) || (ADDR_1 > hi) )
                $display( "Warning: RegFile: %m -- Address port 1 is out of bounds: %h", ADDR_1 ) ;
              if (( ADDR_2 < lo ) || (ADDR_2 > hi) )
                $display( "Warning: RegFile: %m -- Address port 2 is out of bounds: %h", ADDR_2 ) ;
              if (( ADDR_3 < lo ) || (ADDR_3 > hi) )
                $display( "Warning: RegFile: %m -- Address port 3 is out of bounds: %h", ADDR_3 ) ;
              if (( ADDR_4 < lo ) || (ADDR_4 > hi) )
                $display( "Warning: RegFile: %m -- Address port 4 is out of bounds: %h", ADDR_4 ) ;
              if (( ADDR_5 < lo ) || (ADDR_5 > hi) )
                $display( "Warning: RegFile: %m -- Address port 5 is out of bounds: %h", ADDR_5 ) ;
              if ( WE && ( ADDR_IN < lo ) || (ADDR_IN > hi) )
                $display( "Warning: RegFile: %m -- Write Address port is out of bounds: %h", ADDR_IN ) ;
           end
     end
   // synopsys translate_on

endmodule

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

`ifdef BSV_ASYNC_RESET
 `define BSV_ARESET_EDGE_META or `BSV_RESET_EDGE RST
`else
 `define BSV_ARESET_EDGE_META
`endif

`ifdef BSV_RESET_FIFO_HEAD
 `define BSV_ARESET_EDGE_HEAD `BSV_ARESET_EDGE_META
`else
 `define BSV_ARESET_EDGE_HEAD
`endif

// Depth 2 FIFO
module FIFO2(CLK,
             RST,
             D_IN,
             ENQ,
             FULL_N,
             D_OUT,
             DEQ,
             EMPTY_N,
             CLR);

   parameter width = 1;
   parameter guarded = 1'b1;

   input     CLK ;
   input     RST ;
   input [width - 1 : 0] D_IN;
   input                 ENQ;
   input                 DEQ;
   input                 CLR ;

   output                FULL_N;
   output                EMPTY_N;
   output [width - 1 : 0] D_OUT;

   reg                    full_reg;
   reg                    empty_reg;
   reg [width - 1 : 0]    data0_reg;
   reg [width - 1 : 0]    data1_reg;

   assign                 FULL_N = full_reg ;
   assign                 EMPTY_N = empty_reg ;
   assign                 D_OUT = data0_reg ;


   // Optimize the loading logic since state encoding is not power of 2!
   wire                   d0di = (ENQ && ! empty_reg ) || ( ENQ && DEQ && full_reg ) ;
   wire                   d0d1 = DEQ && ! full_reg ;
   wire                   d0h = ((! DEQ) && (! ENQ )) || (!DEQ && empty_reg ) || ( ! ENQ &&full_reg) ;
   wire                   d1di = ENQ & empty_reg ;

`ifdef BSV_NO_INITIAL_BLOCKS
`else // not BSV_NO_INITIAL_BLOCKS
   // synopsys translate_off
   initial
     begin
        data0_reg   = {((width + 1)/2) {2'b10}} ;
        data1_reg  = {((width + 1)/2) {2'b10}} ;
        empty_reg = 1'b0;
        full_reg  = 1'b1;
     end // initial begin
   // synopsys translate_on
`endif // BSV_NO_INITIAL_BLOCKS

   always@(posedge CLK `BSV_ARESET_EDGE_META)
     begin
        if (RST == `BSV_RESET_VALUE)
          begin
             empty_reg <= `BSV_ASSIGNMENT_DELAY 1'b0;
             full_reg  <= `BSV_ASSIGNMENT_DELAY 1'b1;
          end // if (RST == `BSV_RESET_VALUE)
        else
          begin
             if (CLR)
               begin
                  empty_reg <= `BSV_ASSIGNMENT_DELAY 1'b0;
                  full_reg  <= `BSV_ASSIGNMENT_DELAY 1'b1;
               end // if (CLR)
             else if ( ENQ && ! DEQ ) // just enq
               begin
                  empty_reg <= `BSV_ASSIGNMENT_DELAY 1'b1;
                  full_reg <= `BSV_ASSIGNMENT_DELAY ! empty_reg ;
               end
             else if ( DEQ && ! ENQ )
               begin
                  full_reg  <= `BSV_ASSIGNMENT_DELAY 1'b1;
                  empty_reg <= `BSV_ASSIGNMENT_DELAY ! full_reg;
               end // if ( DEQ && ! ENQ )
          end // else: !if(RST == `BSV_RESET_VALUE)

     end // always@ (posedge CLK or `BSV_RESET_EDGE RST)


   always@(posedge CLK `BSV_ARESET_EDGE_HEAD)
     begin
`ifdef BSV_RESET_FIFO_HEAD
        if (RST == `BSV_RESET_VALUE)
          begin
             data0_reg <= `BSV_ASSIGNMENT_DELAY {width {1'b0}} ;
             data1_reg <= `BSV_ASSIGNMENT_DELAY {width {1'b0}} ;
          end
        else
`endif
          begin
             data0_reg  <= `BSV_ASSIGNMENT_DELAY
                           {width{d0di}} & D_IN | {width{d0d1}} & data1_reg | {width{d0h}} & data0_reg ;
             data1_reg <= `BSV_ASSIGNMENT_DELAY
                          d1di ? D_IN : data1_reg ;
          end // else: !if(RST == `BSV_RESET_VALUE)
     end // always@ (posedge CLK or `BSV_RESET_EDGE RST)



   // synopsys translate_off
   always@(posedge CLK)
     begin: error_checks
        reg deqerror, enqerror ;

        deqerror =  0;
        enqerror = 0;
        if (RST == ! `BSV_RESET_VALUE)
          begin
             if ( ! empty_reg && DEQ )
               begin
                  deqerror =  1;
                  $display( "Warning: FIFO2: %m -- Dequeuing from empty fifo" ) ;
               end
             if ( ! full_reg && ENQ && (!DEQ || guarded) )
               begin
                  enqerror = 1;
                  $display( "Warning: FIFO2: %m -- Enqueuing to a full fifo" ) ;
               end
          end
     end // always@ (posedge CLK)
   // synopsys translate_on

endmodule
